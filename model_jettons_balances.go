/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonsBalances type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonsBalances{}

// JettonsBalances struct for JettonsBalances
type JettonsBalances struct {
	Balances []JettonBalance `json:"balances"`
}

type _JettonsBalances JettonsBalances

// NewJettonsBalances instantiates a new JettonsBalances object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonsBalances(balances []JettonBalance) *JettonsBalances {
	this := JettonsBalances{}
	this.Balances = balances
	return &this
}

// NewJettonsBalancesWithDefaults instantiates a new JettonsBalances object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonsBalancesWithDefaults() *JettonsBalances {
	this := JettonsBalances{}
	return &this
}

// GetBalances returns the Balances field value
func (o *JettonsBalances) GetBalances() []JettonBalance {
	if o == nil {
		var ret []JettonBalance
		return ret
	}

	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value
// and a boolean to check if the value has been set.
func (o *JettonsBalances) GetBalancesOk() ([]JettonBalance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Balances, true
}

// SetBalances sets field value
func (o *JettonsBalances) SetBalances(v []JettonBalance) {
	o.Balances = v
}

func (o JettonsBalances) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonsBalances) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["balances"] = o.Balances
	return toSerialize, nil
}

func (o *JettonsBalances) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"balances",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonsBalances := _JettonsBalances{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonsBalances)

	if err != nil {
		return err
	}

	*o = JettonsBalances(varJettonsBalances)

	return err
}

type NullableJettonsBalances struct {
	value *JettonsBalances
	isSet bool
}

func (v NullableJettonsBalances) Get() *JettonsBalances {
	return v.value
}

func (v *NullableJettonsBalances) Set(val *JettonsBalances) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonsBalances) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonsBalances) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonsBalances(val *JettonsBalances) *NullableJettonsBalances {
	return &NullableJettonsBalances{value: val, isSet: true}
}

func (v NullableJettonsBalances) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonsBalances) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


