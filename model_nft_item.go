/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NftItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NftItem{}

// NftItem struct for NftItem
type NftItem struct {
	Address string `json:"address"`
	Index int64 `json:"index"`
	Owner *AccountAddress `json:"owner,omitempty"`
	Collection *NftItemCollection `json:"collection,omitempty"`
	Verified bool `json:"verified"`
	Metadata map[string]interface{} `json:"metadata"`
	Sale *Sale `json:"sale,omitempty"`
	Previews []ImagePreview `json:"previews,omitempty"`
	Dns *string `json:"dns,omitempty"`
	ApprovedBy []string `json:"approved_by"`
	IncludeCnft *bool `json:"include_cnft,omitempty"`
	Trust TrustType `json:"trust"`
}

type _NftItem NftItem

// NewNftItem instantiates a new NftItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftItem(address string, index int64, verified bool, metadata map[string]interface{}, approvedBy []string, trust TrustType) *NftItem {
	this := NftItem{}
	this.Address = address
	this.Index = index
	this.Verified = verified
	this.Metadata = metadata
	this.ApprovedBy = approvedBy
	this.Trust = trust
	return &this
}

// NewNftItemWithDefaults instantiates a new NftItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftItemWithDefaults() *NftItem {
	this := NftItem{}
	return &this
}

// GetAddress returns the Address field value
func (o *NftItem) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *NftItem) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *NftItem) SetAddress(v string) {
	o.Address = v
}

// GetIndex returns the Index field value
func (o *NftItem) GetIndex() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *NftItem) GetIndexOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *NftItem) SetIndex(v int64) {
	o.Index = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *NftItem) GetOwner() AccountAddress {
	if o == nil || IsNil(o.Owner) {
		var ret AccountAddress
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftItem) GetOwnerOk() (*AccountAddress, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *NftItem) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given AccountAddress and assigns it to the Owner field.
func (o *NftItem) SetOwner(v AccountAddress) {
	o.Owner = &v
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *NftItem) GetCollection() NftItemCollection {
	if o == nil || IsNil(o.Collection) {
		var ret NftItemCollection
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftItem) GetCollectionOk() (*NftItemCollection, bool) {
	if o == nil || IsNil(o.Collection) {
		return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *NftItem) HasCollection() bool {
	if o != nil && !IsNil(o.Collection) {
		return true
	}

	return false
}

// SetCollection gets a reference to the given NftItemCollection and assigns it to the Collection field.
func (o *NftItem) SetCollection(v NftItemCollection) {
	o.Collection = &v
}

// GetVerified returns the Verified field value
func (o *NftItem) GetVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value
// and a boolean to check if the value has been set.
func (o *NftItem) GetVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verified, true
}

// SetVerified sets field value
func (o *NftItem) SetVerified(v bool) {
	o.Verified = v
}

// GetMetadata returns the Metadata field value
func (o *NftItem) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *NftItem) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *NftItem) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetSale returns the Sale field value if set, zero value otherwise.
func (o *NftItem) GetSale() Sale {
	if o == nil || IsNil(o.Sale) {
		var ret Sale
		return ret
	}
	return *o.Sale
}

// GetSaleOk returns a tuple with the Sale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftItem) GetSaleOk() (*Sale, bool) {
	if o == nil || IsNil(o.Sale) {
		return nil, false
	}
	return o.Sale, true
}

// HasSale returns a boolean if a field has been set.
func (o *NftItem) HasSale() bool {
	if o != nil && !IsNil(o.Sale) {
		return true
	}

	return false
}

// SetSale gets a reference to the given Sale and assigns it to the Sale field.
func (o *NftItem) SetSale(v Sale) {
	o.Sale = &v
}

// GetPreviews returns the Previews field value if set, zero value otherwise.
func (o *NftItem) GetPreviews() []ImagePreview {
	if o == nil || IsNil(o.Previews) {
		var ret []ImagePreview
		return ret
	}
	return o.Previews
}

// GetPreviewsOk returns a tuple with the Previews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftItem) GetPreviewsOk() ([]ImagePreview, bool) {
	if o == nil || IsNil(o.Previews) {
		return nil, false
	}
	return o.Previews, true
}

// HasPreviews returns a boolean if a field has been set.
func (o *NftItem) HasPreviews() bool {
	if o != nil && !IsNil(o.Previews) {
		return true
	}

	return false
}

// SetPreviews gets a reference to the given []ImagePreview and assigns it to the Previews field.
func (o *NftItem) SetPreviews(v []ImagePreview) {
	o.Previews = v
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *NftItem) GetDns() string {
	if o == nil || IsNil(o.Dns) {
		var ret string
		return ret
	}
	return *o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftItem) GetDnsOk() (*string, bool) {
	if o == nil || IsNil(o.Dns) {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *NftItem) HasDns() bool {
	if o != nil && !IsNil(o.Dns) {
		return true
	}

	return false
}

// SetDns gets a reference to the given string and assigns it to the Dns field.
func (o *NftItem) SetDns(v string) {
	o.Dns = &v
}

// GetApprovedBy returns the ApprovedBy field value
func (o *NftItem) GetApprovedBy() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ApprovedBy
}

// GetApprovedByOk returns a tuple with the ApprovedBy field value
// and a boolean to check if the value has been set.
func (o *NftItem) GetApprovedByOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApprovedBy, true
}

// SetApprovedBy sets field value
func (o *NftItem) SetApprovedBy(v []string) {
	o.ApprovedBy = v
}

// GetIncludeCnft returns the IncludeCnft field value if set, zero value otherwise.
func (o *NftItem) GetIncludeCnft() bool {
	if o == nil || IsNil(o.IncludeCnft) {
		var ret bool
		return ret
	}
	return *o.IncludeCnft
}

// GetIncludeCnftOk returns a tuple with the IncludeCnft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftItem) GetIncludeCnftOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeCnft) {
		return nil, false
	}
	return o.IncludeCnft, true
}

// HasIncludeCnft returns a boolean if a field has been set.
func (o *NftItem) HasIncludeCnft() bool {
	if o != nil && !IsNil(o.IncludeCnft) {
		return true
	}

	return false
}

// SetIncludeCnft gets a reference to the given bool and assigns it to the IncludeCnft field.
func (o *NftItem) SetIncludeCnft(v bool) {
	o.IncludeCnft = &v
}

// GetTrust returns the Trust field value
func (o *NftItem) GetTrust() TrustType {
	if o == nil {
		var ret TrustType
		return ret
	}

	return o.Trust
}

// GetTrustOk returns a tuple with the Trust field value
// and a boolean to check if the value has been set.
func (o *NftItem) GetTrustOk() (*TrustType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trust, true
}

// SetTrust sets field value
func (o *NftItem) SetTrust(v TrustType) {
	o.Trust = v
}

func (o NftItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NftItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["index"] = o.Index
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Collection) {
		toSerialize["collection"] = o.Collection
	}
	toSerialize["verified"] = o.Verified
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.Sale) {
		toSerialize["sale"] = o.Sale
	}
	if !IsNil(o.Previews) {
		toSerialize["previews"] = o.Previews
	}
	if !IsNil(o.Dns) {
		toSerialize["dns"] = o.Dns
	}
	toSerialize["approved_by"] = o.ApprovedBy
	if !IsNil(o.IncludeCnft) {
		toSerialize["include_cnft"] = o.IncludeCnft
	}
	toSerialize["trust"] = o.Trust
	return toSerialize, nil
}

func (o *NftItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"index",
		"verified",
		"metadata",
		"approved_by",
		"trust",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNftItem := _NftItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNftItem)

	if err != nil {
		return err
	}

	*o = NftItem(varNftItem)

	return err
}

type NullableNftItem struct {
	value *NftItem
	isSet bool
}

func (v NullableNftItem) Get() *NftItem {
	return v.value
}

func (v *NullableNftItem) Set(val *NftItem) {
	v.value = val
	v.isSet = true
}

func (v NullableNftItem) IsSet() bool {
	return v.isSet
}

func (v *NullableNftItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftItem(val *NftItem) *NullableNftItem {
	return &NullableNftItem{value: val, isSet: true}
}

func (v NullableNftItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


