/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SignRawMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignRawMessage{}

// SignRawMessage struct for SignRawMessage
type SignRawMessage struct {
	Address string `json:"address"`
	// Number of nanocoins to send. Decimal string.
	Amount string `json:"amount"`
	// Raw one-cell BoC encoded in Base64.
	Payload *string `json:"payload,omitempty"`
	// Raw once-cell BoC encoded in Base64.
	StateInit *string `json:"stateInit,omitempty"`
}

type _SignRawMessage SignRawMessage

// NewSignRawMessage instantiates a new SignRawMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignRawMessage(address string, amount string) *SignRawMessage {
	this := SignRawMessage{}
	this.Address = address
	this.Amount = amount
	return &this
}

// NewSignRawMessageWithDefaults instantiates a new SignRawMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignRawMessageWithDefaults() *SignRawMessage {
	this := SignRawMessage{}
	return &this
}

// GetAddress returns the Address field value
func (o *SignRawMessage) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *SignRawMessage) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *SignRawMessage) SetAddress(v string) {
	o.Address = v
}

// GetAmount returns the Amount field value
func (o *SignRawMessage) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SignRawMessage) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SignRawMessage) SetAmount(v string) {
	o.Amount = v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *SignRawMessage) GetPayload() string {
	if o == nil || IsNil(o.Payload) {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignRawMessage) GetPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *SignRawMessage) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *SignRawMessage) SetPayload(v string) {
	o.Payload = &v
}

// GetStateInit returns the StateInit field value if set, zero value otherwise.
func (o *SignRawMessage) GetStateInit() string {
	if o == nil || IsNil(o.StateInit) {
		var ret string
		return ret
	}
	return *o.StateInit
}

// GetStateInitOk returns a tuple with the StateInit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignRawMessage) GetStateInitOk() (*string, bool) {
	if o == nil || IsNil(o.StateInit) {
		return nil, false
	}
	return o.StateInit, true
}

// HasStateInit returns a boolean if a field has been set.
func (o *SignRawMessage) HasStateInit() bool {
	if o != nil && !IsNil(o.StateInit) {
		return true
	}

	return false
}

// SetStateInit gets a reference to the given string and assigns it to the StateInit field.
func (o *SignRawMessage) SetStateInit(v string) {
	o.StateInit = &v
}

func (o SignRawMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignRawMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.StateInit) {
		toSerialize["stateInit"] = o.StateInit
	}
	return toSerialize, nil
}

func (o *SignRawMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignRawMessage := _SignRawMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignRawMessage)

	if err != nil {
		return err
	}

	*o = SignRawMessage(varSignRawMessage)

	return err
}

type NullableSignRawMessage struct {
	value *SignRawMessage
	isSet bool
}

func (v NullableSignRawMessage) Get() *SignRawMessage {
	return v.value
}

func (v *NullableSignRawMessage) Set(val *SignRawMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSignRawMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSignRawMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignRawMessage(val *SignRawMessage) *NullableSignRawMessage {
	return &NullableSignRawMessage{value: val, isSet: true}
}

func (v NullableSignRawMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignRawMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


