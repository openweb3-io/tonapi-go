/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonMetadata{}

// JettonMetadata struct for JettonMetadata
type JettonMetadata struct {
	Address string `json:"address"`
	Name string `json:"name"`
	Symbol string `json:"symbol"`
	Decimals string `json:"decimals"`
	Image *string `json:"image,omitempty"`
	Description *string `json:"description,omitempty"`
	Social []string `json:"social,omitempty"`
	Websites []string `json:"websites,omitempty"`
	Catalogs []string `json:"catalogs,omitempty"`
}

type _JettonMetadata JettonMetadata

// NewJettonMetadata instantiates a new JettonMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonMetadata(address string, name string, symbol string, decimals string) *JettonMetadata {
	this := JettonMetadata{}
	this.Address = address
	this.Name = name
	this.Symbol = symbol
	this.Decimals = decimals
	return &this
}

// NewJettonMetadataWithDefaults instantiates a new JettonMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonMetadataWithDefaults() *JettonMetadata {
	this := JettonMetadata{}
	return &this
}

// GetAddress returns the Address field value
func (o *JettonMetadata) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *JettonMetadata) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *JettonMetadata) SetAddress(v string) {
	o.Address = v
}

// GetName returns the Name field value
func (o *JettonMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JettonMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JettonMetadata) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *JettonMetadata) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *JettonMetadata) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *JettonMetadata) SetSymbol(v string) {
	o.Symbol = v
}

// GetDecimals returns the Decimals field value
func (o *JettonMetadata) GetDecimals() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *JettonMetadata) GetDecimalsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *JettonMetadata) SetDecimals(v string) {
	o.Decimals = v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *JettonMetadata) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonMetadata) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *JettonMetadata) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *JettonMetadata) SetImage(v string) {
	o.Image = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *JettonMetadata) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonMetadata) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *JettonMetadata) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *JettonMetadata) SetDescription(v string) {
	o.Description = &v
}

// GetSocial returns the Social field value if set, zero value otherwise.
func (o *JettonMetadata) GetSocial() []string {
	if o == nil || IsNil(o.Social) {
		var ret []string
		return ret
	}
	return o.Social
}

// GetSocialOk returns a tuple with the Social field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonMetadata) GetSocialOk() ([]string, bool) {
	if o == nil || IsNil(o.Social) {
		return nil, false
	}
	return o.Social, true
}

// HasSocial returns a boolean if a field has been set.
func (o *JettonMetadata) HasSocial() bool {
	if o != nil && !IsNil(o.Social) {
		return true
	}

	return false
}

// SetSocial gets a reference to the given []string and assigns it to the Social field.
func (o *JettonMetadata) SetSocial(v []string) {
	o.Social = v
}

// GetWebsites returns the Websites field value if set, zero value otherwise.
func (o *JettonMetadata) GetWebsites() []string {
	if o == nil || IsNil(o.Websites) {
		var ret []string
		return ret
	}
	return o.Websites
}

// GetWebsitesOk returns a tuple with the Websites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonMetadata) GetWebsitesOk() ([]string, bool) {
	if o == nil || IsNil(o.Websites) {
		return nil, false
	}
	return o.Websites, true
}

// HasWebsites returns a boolean if a field has been set.
func (o *JettonMetadata) HasWebsites() bool {
	if o != nil && !IsNil(o.Websites) {
		return true
	}

	return false
}

// SetWebsites gets a reference to the given []string and assigns it to the Websites field.
func (o *JettonMetadata) SetWebsites(v []string) {
	o.Websites = v
}

// GetCatalogs returns the Catalogs field value if set, zero value otherwise.
func (o *JettonMetadata) GetCatalogs() []string {
	if o == nil || IsNil(o.Catalogs) {
		var ret []string
		return ret
	}
	return o.Catalogs
}

// GetCatalogsOk returns a tuple with the Catalogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonMetadata) GetCatalogsOk() ([]string, bool) {
	if o == nil || IsNil(o.Catalogs) {
		return nil, false
	}
	return o.Catalogs, true
}

// HasCatalogs returns a boolean if a field has been set.
func (o *JettonMetadata) HasCatalogs() bool {
	if o != nil && !IsNil(o.Catalogs) {
		return true
	}

	return false
}

// SetCatalogs gets a reference to the given []string and assigns it to the Catalogs field.
func (o *JettonMetadata) SetCatalogs(v []string) {
	o.Catalogs = v
}

func (o JettonMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["name"] = o.Name
	toSerialize["symbol"] = o.Symbol
	toSerialize["decimals"] = o.Decimals
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Social) {
		toSerialize["social"] = o.Social
	}
	if !IsNil(o.Websites) {
		toSerialize["websites"] = o.Websites
	}
	if !IsNil(o.Catalogs) {
		toSerialize["catalogs"] = o.Catalogs
	}
	return toSerialize, nil
}

func (o *JettonMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"name",
		"symbol",
		"decimals",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonMetadata := _JettonMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonMetadata)

	if err != nil {
		return err
	}

	*o = JettonMetadata(varJettonMetadata)

	return err
}

type NullableJettonMetadata struct {
	value *JettonMetadata
	isSet bool
}

func (v NullableJettonMetadata) Get() *JettonMetadata {
	return v.value
}

func (v *NullableJettonMetadata) Set(val *JettonMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonMetadata(val *JettonMetadata) *NullableJettonMetadata {
	return &NullableJettonMetadata{value: val, isSet: true}
}

func (v NullableJettonMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


