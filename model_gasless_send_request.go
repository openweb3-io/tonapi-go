/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GaslessSendRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GaslessSendRequest{}

// GaslessSendRequest struct for GaslessSendRequest
type GaslessSendRequest struct {
	// hex encoded public key
	WalletPublicKey string `json:"wallet_public_key"`
	Boc string `json:"boc"`
}

type _GaslessSendRequest GaslessSendRequest

// NewGaslessSendRequest instantiates a new GaslessSendRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGaslessSendRequest(walletPublicKey string, boc string) *GaslessSendRequest {
	this := GaslessSendRequest{}
	this.WalletPublicKey = walletPublicKey
	this.Boc = boc
	return &this
}

// NewGaslessSendRequestWithDefaults instantiates a new GaslessSendRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGaslessSendRequestWithDefaults() *GaslessSendRequest {
	this := GaslessSendRequest{}
	return &this
}

// GetWalletPublicKey returns the WalletPublicKey field value
func (o *GaslessSendRequest) GetWalletPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletPublicKey
}

// GetWalletPublicKeyOk returns a tuple with the WalletPublicKey field value
// and a boolean to check if the value has been set.
func (o *GaslessSendRequest) GetWalletPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletPublicKey, true
}

// SetWalletPublicKey sets field value
func (o *GaslessSendRequest) SetWalletPublicKey(v string) {
	o.WalletPublicKey = v
}

// GetBoc returns the Boc field value
func (o *GaslessSendRequest) GetBoc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Boc
}

// GetBocOk returns a tuple with the Boc field value
// and a boolean to check if the value has been set.
func (o *GaslessSendRequest) GetBocOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Boc, true
}

// SetBoc sets field value
func (o *GaslessSendRequest) SetBoc(v string) {
	o.Boc = v
}

func (o GaslessSendRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GaslessSendRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet_public_key"] = o.WalletPublicKey
	toSerialize["boc"] = o.Boc
	return toSerialize, nil
}

func (o *GaslessSendRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_public_key",
		"boc",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGaslessSendRequest := _GaslessSendRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGaslessSendRequest)

	if err != nil {
		return err
	}

	*o = GaslessSendRequest(varGaslessSendRequest)

	return err
}

type NullableGaslessSendRequest struct {
	value *GaslessSendRequest
	isSet bool
}

func (v NullableGaslessSendRequest) Get() *GaslessSendRequest {
	return v.value
}

func (v *NullableGaslessSendRequest) Set(val *GaslessSendRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGaslessSendRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGaslessSendRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaslessSendRequest(val *GaslessSendRequest) *NullableGaslessSendRequest {
	return &NullableGaslessSendRequest{value: val, isSet: true}
}

func (v NullableGaslessSendRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaslessSendRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


