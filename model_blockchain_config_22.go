/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig22 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig22{}

// BlockchainConfig22 The limits on the block in the masterchain, upon reaching which the block is finalized and the callback of the remaining messages (if any) is carried over to the next block.
type BlockchainConfig22 struct {
	BlockLimits BlockLimits `json:"block_limits"`
}

type _BlockchainConfig22 BlockchainConfig22

// NewBlockchainConfig22 instantiates a new BlockchainConfig22 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig22(blockLimits BlockLimits) *BlockchainConfig22 {
	this := BlockchainConfig22{}
	this.BlockLimits = blockLimits
	return &this
}

// NewBlockchainConfig22WithDefaults instantiates a new BlockchainConfig22 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig22WithDefaults() *BlockchainConfig22 {
	this := BlockchainConfig22{}
	return &this
}

// GetBlockLimits returns the BlockLimits field value
func (o *BlockchainConfig22) GetBlockLimits() BlockLimits {
	if o == nil {
		var ret BlockLimits
		return ret
	}

	return o.BlockLimits
}

// GetBlockLimitsOk returns a tuple with the BlockLimits field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig22) GetBlockLimitsOk() (*BlockLimits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockLimits, true
}

// SetBlockLimits sets field value
func (o *BlockchainConfig22) SetBlockLimits(v BlockLimits) {
	o.BlockLimits = v
}

func (o BlockchainConfig22) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig22) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["block_limits"] = o.BlockLimits
	return toSerialize, nil
}

func (o *BlockchainConfig22) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"block_limits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig22 := _BlockchainConfig22{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig22)

	if err != nil {
		return err
	}

	*o = BlockchainConfig22(varBlockchainConfig22)

	return err
}

type NullableBlockchainConfig22 struct {
	value *BlockchainConfig22
	isSet bool
}

func (v NullableBlockchainConfig22) Get() *BlockchainConfig22 {
	return v.value
}

func (v *NullableBlockchainConfig22) Set(val *BlockchainConfig22) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig22) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig22) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig22(val *BlockchainConfig22) *NullableBlockchainConfig22 {
	return &NullableBlockchainConfig22{value: val, isSet: true}
}

func (v NullableBlockchainConfig22) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig22) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


