/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Action type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Action{}

// Action struct for Action
type Action struct {
	Type string `json:"type"`
	Status string `json:"status"`
	TonTransfer *TonTransferAction `json:"TonTransfer,omitempty"`
	ContractDeploy *ContractDeployAction `json:"ContractDeploy,omitempty"`
	JettonTransfer *JettonTransferAction `json:"JettonTransfer,omitempty"`
	JettonBurn *JettonBurnAction `json:"JettonBurn,omitempty"`
	JettonMint *JettonMintAction `json:"JettonMint,omitempty"`
	NftItemTransfer *NftItemTransferAction `json:"NftItemTransfer,omitempty"`
	Subscribe *SubscriptionAction `json:"Subscribe,omitempty"`
	UnSubscribe *UnSubscriptionAction `json:"UnSubscribe,omitempty"`
	AuctionBid *AuctionBidAction `json:"AuctionBid,omitempty"`
	NftPurchase *NftPurchaseAction `json:"NftPurchase,omitempty"`
	DepositStake *DepositStakeAction `json:"DepositStake,omitempty"`
	WithdrawStake *WithdrawStakeAction `json:"WithdrawStake,omitempty"`
	WithdrawStakeRequest *WithdrawStakeRequestAction `json:"WithdrawStakeRequest,omitempty"`
	ElectionsDepositStake *ElectionsDepositStakeAction `json:"ElectionsDepositStake,omitempty"`
	ElectionsRecoverStake *ElectionsRecoverStakeAction `json:"ElectionsRecoverStake,omitempty"`
	JettonSwap *JettonSwapAction `json:"JettonSwap,omitempty"`
	SmartContractExec *SmartContractAction `json:"SmartContractExec,omitempty"`
	DomainRenew *DomainRenewAction `json:"DomainRenew,omitempty"`
	InscriptionTransfer *InscriptionTransferAction `json:"InscriptionTransfer,omitempty"`
	InscriptionMint *InscriptionMintAction `json:"InscriptionMint,omitempty"`
	SimplePreview ActionSimplePreview `json:"simple_preview"`
	BaseTransactions []string `json:"base_transactions"`
}

type _Action Action

// NewAction instantiates a new Action object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAction(type_ string, status string, simplePreview ActionSimplePreview, baseTransactions []string) *Action {
	this := Action{}
	this.Type = type_
	this.Status = status
	this.SimplePreview = simplePreview
	this.BaseTransactions = baseTransactions
	return &this
}

// NewActionWithDefaults instantiates a new Action object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionWithDefaults() *Action {
	this := Action{}
	return &this
}

// GetType returns the Type field value
func (o *Action) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Action) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Action) SetType(v string) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *Action) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Action) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Action) SetStatus(v string) {
	o.Status = v
}

// GetTonTransfer returns the TonTransfer field value if set, zero value otherwise.
func (o *Action) GetTonTransfer() TonTransferAction {
	if o == nil || IsNil(o.TonTransfer) {
		var ret TonTransferAction
		return ret
	}
	return *o.TonTransfer
}

// GetTonTransferOk returns a tuple with the TonTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetTonTransferOk() (*TonTransferAction, bool) {
	if o == nil || IsNil(o.TonTransfer) {
		return nil, false
	}
	return o.TonTransfer, true
}

// HasTonTransfer returns a boolean if a field has been set.
func (o *Action) HasTonTransfer() bool {
	if o != nil && !IsNil(o.TonTransfer) {
		return true
	}

	return false
}

// SetTonTransfer gets a reference to the given TonTransferAction and assigns it to the TonTransfer field.
func (o *Action) SetTonTransfer(v TonTransferAction) {
	o.TonTransfer = &v
}

// GetContractDeploy returns the ContractDeploy field value if set, zero value otherwise.
func (o *Action) GetContractDeploy() ContractDeployAction {
	if o == nil || IsNil(o.ContractDeploy) {
		var ret ContractDeployAction
		return ret
	}
	return *o.ContractDeploy
}

// GetContractDeployOk returns a tuple with the ContractDeploy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetContractDeployOk() (*ContractDeployAction, bool) {
	if o == nil || IsNil(o.ContractDeploy) {
		return nil, false
	}
	return o.ContractDeploy, true
}

// HasContractDeploy returns a boolean if a field has been set.
func (o *Action) HasContractDeploy() bool {
	if o != nil && !IsNil(o.ContractDeploy) {
		return true
	}

	return false
}

// SetContractDeploy gets a reference to the given ContractDeployAction and assigns it to the ContractDeploy field.
func (o *Action) SetContractDeploy(v ContractDeployAction) {
	o.ContractDeploy = &v
}

// GetJettonTransfer returns the JettonTransfer field value if set, zero value otherwise.
func (o *Action) GetJettonTransfer() JettonTransferAction {
	if o == nil || IsNil(o.JettonTransfer) {
		var ret JettonTransferAction
		return ret
	}
	return *o.JettonTransfer
}

// GetJettonTransferOk returns a tuple with the JettonTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetJettonTransferOk() (*JettonTransferAction, bool) {
	if o == nil || IsNil(o.JettonTransfer) {
		return nil, false
	}
	return o.JettonTransfer, true
}

// HasJettonTransfer returns a boolean if a field has been set.
func (o *Action) HasJettonTransfer() bool {
	if o != nil && !IsNil(o.JettonTransfer) {
		return true
	}

	return false
}

// SetJettonTransfer gets a reference to the given JettonTransferAction and assigns it to the JettonTransfer field.
func (o *Action) SetJettonTransfer(v JettonTransferAction) {
	o.JettonTransfer = &v
}

// GetJettonBurn returns the JettonBurn field value if set, zero value otherwise.
func (o *Action) GetJettonBurn() JettonBurnAction {
	if o == nil || IsNil(o.JettonBurn) {
		var ret JettonBurnAction
		return ret
	}
	return *o.JettonBurn
}

// GetJettonBurnOk returns a tuple with the JettonBurn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetJettonBurnOk() (*JettonBurnAction, bool) {
	if o == nil || IsNil(o.JettonBurn) {
		return nil, false
	}
	return o.JettonBurn, true
}

// HasJettonBurn returns a boolean if a field has been set.
func (o *Action) HasJettonBurn() bool {
	if o != nil && !IsNil(o.JettonBurn) {
		return true
	}

	return false
}

// SetJettonBurn gets a reference to the given JettonBurnAction and assigns it to the JettonBurn field.
func (o *Action) SetJettonBurn(v JettonBurnAction) {
	o.JettonBurn = &v
}

// GetJettonMint returns the JettonMint field value if set, zero value otherwise.
func (o *Action) GetJettonMint() JettonMintAction {
	if o == nil || IsNil(o.JettonMint) {
		var ret JettonMintAction
		return ret
	}
	return *o.JettonMint
}

// GetJettonMintOk returns a tuple with the JettonMint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetJettonMintOk() (*JettonMintAction, bool) {
	if o == nil || IsNil(o.JettonMint) {
		return nil, false
	}
	return o.JettonMint, true
}

// HasJettonMint returns a boolean if a field has been set.
func (o *Action) HasJettonMint() bool {
	if o != nil && !IsNil(o.JettonMint) {
		return true
	}

	return false
}

// SetJettonMint gets a reference to the given JettonMintAction and assigns it to the JettonMint field.
func (o *Action) SetJettonMint(v JettonMintAction) {
	o.JettonMint = &v
}

// GetNftItemTransfer returns the NftItemTransfer field value if set, zero value otherwise.
func (o *Action) GetNftItemTransfer() NftItemTransferAction {
	if o == nil || IsNil(o.NftItemTransfer) {
		var ret NftItemTransferAction
		return ret
	}
	return *o.NftItemTransfer
}

// GetNftItemTransferOk returns a tuple with the NftItemTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetNftItemTransferOk() (*NftItemTransferAction, bool) {
	if o == nil || IsNil(o.NftItemTransfer) {
		return nil, false
	}
	return o.NftItemTransfer, true
}

// HasNftItemTransfer returns a boolean if a field has been set.
func (o *Action) HasNftItemTransfer() bool {
	if o != nil && !IsNil(o.NftItemTransfer) {
		return true
	}

	return false
}

// SetNftItemTransfer gets a reference to the given NftItemTransferAction and assigns it to the NftItemTransfer field.
func (o *Action) SetNftItemTransfer(v NftItemTransferAction) {
	o.NftItemTransfer = &v
}

// GetSubscribe returns the Subscribe field value if set, zero value otherwise.
func (o *Action) GetSubscribe() SubscriptionAction {
	if o == nil || IsNil(o.Subscribe) {
		var ret SubscriptionAction
		return ret
	}
	return *o.Subscribe
}

// GetSubscribeOk returns a tuple with the Subscribe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetSubscribeOk() (*SubscriptionAction, bool) {
	if o == nil || IsNil(o.Subscribe) {
		return nil, false
	}
	return o.Subscribe, true
}

// HasSubscribe returns a boolean if a field has been set.
func (o *Action) HasSubscribe() bool {
	if o != nil && !IsNil(o.Subscribe) {
		return true
	}

	return false
}

// SetSubscribe gets a reference to the given SubscriptionAction and assigns it to the Subscribe field.
func (o *Action) SetSubscribe(v SubscriptionAction) {
	o.Subscribe = &v
}

// GetUnSubscribe returns the UnSubscribe field value if set, zero value otherwise.
func (o *Action) GetUnSubscribe() UnSubscriptionAction {
	if o == nil || IsNil(o.UnSubscribe) {
		var ret UnSubscriptionAction
		return ret
	}
	return *o.UnSubscribe
}

// GetUnSubscribeOk returns a tuple with the UnSubscribe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetUnSubscribeOk() (*UnSubscriptionAction, bool) {
	if o == nil || IsNil(o.UnSubscribe) {
		return nil, false
	}
	return o.UnSubscribe, true
}

// HasUnSubscribe returns a boolean if a field has been set.
func (o *Action) HasUnSubscribe() bool {
	if o != nil && !IsNil(o.UnSubscribe) {
		return true
	}

	return false
}

// SetUnSubscribe gets a reference to the given UnSubscriptionAction and assigns it to the UnSubscribe field.
func (o *Action) SetUnSubscribe(v UnSubscriptionAction) {
	o.UnSubscribe = &v
}

// GetAuctionBid returns the AuctionBid field value if set, zero value otherwise.
func (o *Action) GetAuctionBid() AuctionBidAction {
	if o == nil || IsNil(o.AuctionBid) {
		var ret AuctionBidAction
		return ret
	}
	return *o.AuctionBid
}

// GetAuctionBidOk returns a tuple with the AuctionBid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetAuctionBidOk() (*AuctionBidAction, bool) {
	if o == nil || IsNil(o.AuctionBid) {
		return nil, false
	}
	return o.AuctionBid, true
}

// HasAuctionBid returns a boolean if a field has been set.
func (o *Action) HasAuctionBid() bool {
	if o != nil && !IsNil(o.AuctionBid) {
		return true
	}

	return false
}

// SetAuctionBid gets a reference to the given AuctionBidAction and assigns it to the AuctionBid field.
func (o *Action) SetAuctionBid(v AuctionBidAction) {
	o.AuctionBid = &v
}

// GetNftPurchase returns the NftPurchase field value if set, zero value otherwise.
func (o *Action) GetNftPurchase() NftPurchaseAction {
	if o == nil || IsNil(o.NftPurchase) {
		var ret NftPurchaseAction
		return ret
	}
	return *o.NftPurchase
}

// GetNftPurchaseOk returns a tuple with the NftPurchase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetNftPurchaseOk() (*NftPurchaseAction, bool) {
	if o == nil || IsNil(o.NftPurchase) {
		return nil, false
	}
	return o.NftPurchase, true
}

// HasNftPurchase returns a boolean if a field has been set.
func (o *Action) HasNftPurchase() bool {
	if o != nil && !IsNil(o.NftPurchase) {
		return true
	}

	return false
}

// SetNftPurchase gets a reference to the given NftPurchaseAction and assigns it to the NftPurchase field.
func (o *Action) SetNftPurchase(v NftPurchaseAction) {
	o.NftPurchase = &v
}

// GetDepositStake returns the DepositStake field value if set, zero value otherwise.
func (o *Action) GetDepositStake() DepositStakeAction {
	if o == nil || IsNil(o.DepositStake) {
		var ret DepositStakeAction
		return ret
	}
	return *o.DepositStake
}

// GetDepositStakeOk returns a tuple with the DepositStake field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetDepositStakeOk() (*DepositStakeAction, bool) {
	if o == nil || IsNil(o.DepositStake) {
		return nil, false
	}
	return o.DepositStake, true
}

// HasDepositStake returns a boolean if a field has been set.
func (o *Action) HasDepositStake() bool {
	if o != nil && !IsNil(o.DepositStake) {
		return true
	}

	return false
}

// SetDepositStake gets a reference to the given DepositStakeAction and assigns it to the DepositStake field.
func (o *Action) SetDepositStake(v DepositStakeAction) {
	o.DepositStake = &v
}

// GetWithdrawStake returns the WithdrawStake field value if set, zero value otherwise.
func (o *Action) GetWithdrawStake() WithdrawStakeAction {
	if o == nil || IsNil(o.WithdrawStake) {
		var ret WithdrawStakeAction
		return ret
	}
	return *o.WithdrawStake
}

// GetWithdrawStakeOk returns a tuple with the WithdrawStake field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetWithdrawStakeOk() (*WithdrawStakeAction, bool) {
	if o == nil || IsNil(o.WithdrawStake) {
		return nil, false
	}
	return o.WithdrawStake, true
}

// HasWithdrawStake returns a boolean if a field has been set.
func (o *Action) HasWithdrawStake() bool {
	if o != nil && !IsNil(o.WithdrawStake) {
		return true
	}

	return false
}

// SetWithdrawStake gets a reference to the given WithdrawStakeAction and assigns it to the WithdrawStake field.
func (o *Action) SetWithdrawStake(v WithdrawStakeAction) {
	o.WithdrawStake = &v
}

// GetWithdrawStakeRequest returns the WithdrawStakeRequest field value if set, zero value otherwise.
func (o *Action) GetWithdrawStakeRequest() WithdrawStakeRequestAction {
	if o == nil || IsNil(o.WithdrawStakeRequest) {
		var ret WithdrawStakeRequestAction
		return ret
	}
	return *o.WithdrawStakeRequest
}

// GetWithdrawStakeRequestOk returns a tuple with the WithdrawStakeRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetWithdrawStakeRequestOk() (*WithdrawStakeRequestAction, bool) {
	if o == nil || IsNil(o.WithdrawStakeRequest) {
		return nil, false
	}
	return o.WithdrawStakeRequest, true
}

// HasWithdrawStakeRequest returns a boolean if a field has been set.
func (o *Action) HasWithdrawStakeRequest() bool {
	if o != nil && !IsNil(o.WithdrawStakeRequest) {
		return true
	}

	return false
}

// SetWithdrawStakeRequest gets a reference to the given WithdrawStakeRequestAction and assigns it to the WithdrawStakeRequest field.
func (o *Action) SetWithdrawStakeRequest(v WithdrawStakeRequestAction) {
	o.WithdrawStakeRequest = &v
}

// GetElectionsDepositStake returns the ElectionsDepositStake field value if set, zero value otherwise.
func (o *Action) GetElectionsDepositStake() ElectionsDepositStakeAction {
	if o == nil || IsNil(o.ElectionsDepositStake) {
		var ret ElectionsDepositStakeAction
		return ret
	}
	return *o.ElectionsDepositStake
}

// GetElectionsDepositStakeOk returns a tuple with the ElectionsDepositStake field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetElectionsDepositStakeOk() (*ElectionsDepositStakeAction, bool) {
	if o == nil || IsNil(o.ElectionsDepositStake) {
		return nil, false
	}
	return o.ElectionsDepositStake, true
}

// HasElectionsDepositStake returns a boolean if a field has been set.
func (o *Action) HasElectionsDepositStake() bool {
	if o != nil && !IsNil(o.ElectionsDepositStake) {
		return true
	}

	return false
}

// SetElectionsDepositStake gets a reference to the given ElectionsDepositStakeAction and assigns it to the ElectionsDepositStake field.
func (o *Action) SetElectionsDepositStake(v ElectionsDepositStakeAction) {
	o.ElectionsDepositStake = &v
}

// GetElectionsRecoverStake returns the ElectionsRecoverStake field value if set, zero value otherwise.
func (o *Action) GetElectionsRecoverStake() ElectionsRecoverStakeAction {
	if o == nil || IsNil(o.ElectionsRecoverStake) {
		var ret ElectionsRecoverStakeAction
		return ret
	}
	return *o.ElectionsRecoverStake
}

// GetElectionsRecoverStakeOk returns a tuple with the ElectionsRecoverStake field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetElectionsRecoverStakeOk() (*ElectionsRecoverStakeAction, bool) {
	if o == nil || IsNil(o.ElectionsRecoverStake) {
		return nil, false
	}
	return o.ElectionsRecoverStake, true
}

// HasElectionsRecoverStake returns a boolean if a field has been set.
func (o *Action) HasElectionsRecoverStake() bool {
	if o != nil && !IsNil(o.ElectionsRecoverStake) {
		return true
	}

	return false
}

// SetElectionsRecoverStake gets a reference to the given ElectionsRecoverStakeAction and assigns it to the ElectionsRecoverStake field.
func (o *Action) SetElectionsRecoverStake(v ElectionsRecoverStakeAction) {
	o.ElectionsRecoverStake = &v
}

// GetJettonSwap returns the JettonSwap field value if set, zero value otherwise.
func (o *Action) GetJettonSwap() JettonSwapAction {
	if o == nil || IsNil(o.JettonSwap) {
		var ret JettonSwapAction
		return ret
	}
	return *o.JettonSwap
}

// GetJettonSwapOk returns a tuple with the JettonSwap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetJettonSwapOk() (*JettonSwapAction, bool) {
	if o == nil || IsNil(o.JettonSwap) {
		return nil, false
	}
	return o.JettonSwap, true
}

// HasJettonSwap returns a boolean if a field has been set.
func (o *Action) HasJettonSwap() bool {
	if o != nil && !IsNil(o.JettonSwap) {
		return true
	}

	return false
}

// SetJettonSwap gets a reference to the given JettonSwapAction and assigns it to the JettonSwap field.
func (o *Action) SetJettonSwap(v JettonSwapAction) {
	o.JettonSwap = &v
}

// GetSmartContractExec returns the SmartContractExec field value if set, zero value otherwise.
func (o *Action) GetSmartContractExec() SmartContractAction {
	if o == nil || IsNil(o.SmartContractExec) {
		var ret SmartContractAction
		return ret
	}
	return *o.SmartContractExec
}

// GetSmartContractExecOk returns a tuple with the SmartContractExec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetSmartContractExecOk() (*SmartContractAction, bool) {
	if o == nil || IsNil(o.SmartContractExec) {
		return nil, false
	}
	return o.SmartContractExec, true
}

// HasSmartContractExec returns a boolean if a field has been set.
func (o *Action) HasSmartContractExec() bool {
	if o != nil && !IsNil(o.SmartContractExec) {
		return true
	}

	return false
}

// SetSmartContractExec gets a reference to the given SmartContractAction and assigns it to the SmartContractExec field.
func (o *Action) SetSmartContractExec(v SmartContractAction) {
	o.SmartContractExec = &v
}

// GetDomainRenew returns the DomainRenew field value if set, zero value otherwise.
func (o *Action) GetDomainRenew() DomainRenewAction {
	if o == nil || IsNil(o.DomainRenew) {
		var ret DomainRenewAction
		return ret
	}
	return *o.DomainRenew
}

// GetDomainRenewOk returns a tuple with the DomainRenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetDomainRenewOk() (*DomainRenewAction, bool) {
	if o == nil || IsNil(o.DomainRenew) {
		return nil, false
	}
	return o.DomainRenew, true
}

// HasDomainRenew returns a boolean if a field has been set.
func (o *Action) HasDomainRenew() bool {
	if o != nil && !IsNil(o.DomainRenew) {
		return true
	}

	return false
}

// SetDomainRenew gets a reference to the given DomainRenewAction and assigns it to the DomainRenew field.
func (o *Action) SetDomainRenew(v DomainRenewAction) {
	o.DomainRenew = &v
}

// GetInscriptionTransfer returns the InscriptionTransfer field value if set, zero value otherwise.
func (o *Action) GetInscriptionTransfer() InscriptionTransferAction {
	if o == nil || IsNil(o.InscriptionTransfer) {
		var ret InscriptionTransferAction
		return ret
	}
	return *o.InscriptionTransfer
}

// GetInscriptionTransferOk returns a tuple with the InscriptionTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetInscriptionTransferOk() (*InscriptionTransferAction, bool) {
	if o == nil || IsNil(o.InscriptionTransfer) {
		return nil, false
	}
	return o.InscriptionTransfer, true
}

// HasInscriptionTransfer returns a boolean if a field has been set.
func (o *Action) HasInscriptionTransfer() bool {
	if o != nil && !IsNil(o.InscriptionTransfer) {
		return true
	}

	return false
}

// SetInscriptionTransfer gets a reference to the given InscriptionTransferAction and assigns it to the InscriptionTransfer field.
func (o *Action) SetInscriptionTransfer(v InscriptionTransferAction) {
	o.InscriptionTransfer = &v
}

// GetInscriptionMint returns the InscriptionMint field value if set, zero value otherwise.
func (o *Action) GetInscriptionMint() InscriptionMintAction {
	if o == nil || IsNil(o.InscriptionMint) {
		var ret InscriptionMintAction
		return ret
	}
	return *o.InscriptionMint
}

// GetInscriptionMintOk returns a tuple with the InscriptionMint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetInscriptionMintOk() (*InscriptionMintAction, bool) {
	if o == nil || IsNil(o.InscriptionMint) {
		return nil, false
	}
	return o.InscriptionMint, true
}

// HasInscriptionMint returns a boolean if a field has been set.
func (o *Action) HasInscriptionMint() bool {
	if o != nil && !IsNil(o.InscriptionMint) {
		return true
	}

	return false
}

// SetInscriptionMint gets a reference to the given InscriptionMintAction and assigns it to the InscriptionMint field.
func (o *Action) SetInscriptionMint(v InscriptionMintAction) {
	o.InscriptionMint = &v
}

// GetSimplePreview returns the SimplePreview field value
func (o *Action) GetSimplePreview() ActionSimplePreview {
	if o == nil {
		var ret ActionSimplePreview
		return ret
	}

	return o.SimplePreview
}

// GetSimplePreviewOk returns a tuple with the SimplePreview field value
// and a boolean to check if the value has been set.
func (o *Action) GetSimplePreviewOk() (*ActionSimplePreview, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SimplePreview, true
}

// SetSimplePreview sets field value
func (o *Action) SetSimplePreview(v ActionSimplePreview) {
	o.SimplePreview = v
}

// GetBaseTransactions returns the BaseTransactions field value
func (o *Action) GetBaseTransactions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BaseTransactions
}

// GetBaseTransactionsOk returns a tuple with the BaseTransactions field value
// and a boolean to check if the value has been set.
func (o *Action) GetBaseTransactionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseTransactions, true
}

// SetBaseTransactions sets field value
func (o *Action) SetBaseTransactions(v []string) {
	o.BaseTransactions = v
}

func (o Action) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Action) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	if !IsNil(o.TonTransfer) {
		toSerialize["TonTransfer"] = o.TonTransfer
	}
	if !IsNil(o.ContractDeploy) {
		toSerialize["ContractDeploy"] = o.ContractDeploy
	}
	if !IsNil(o.JettonTransfer) {
		toSerialize["JettonTransfer"] = o.JettonTransfer
	}
	if !IsNil(o.JettonBurn) {
		toSerialize["JettonBurn"] = o.JettonBurn
	}
	if !IsNil(o.JettonMint) {
		toSerialize["JettonMint"] = o.JettonMint
	}
	if !IsNil(o.NftItemTransfer) {
		toSerialize["NftItemTransfer"] = o.NftItemTransfer
	}
	if !IsNil(o.Subscribe) {
		toSerialize["Subscribe"] = o.Subscribe
	}
	if !IsNil(o.UnSubscribe) {
		toSerialize["UnSubscribe"] = o.UnSubscribe
	}
	if !IsNil(o.AuctionBid) {
		toSerialize["AuctionBid"] = o.AuctionBid
	}
	if !IsNil(o.NftPurchase) {
		toSerialize["NftPurchase"] = o.NftPurchase
	}
	if !IsNil(o.DepositStake) {
		toSerialize["DepositStake"] = o.DepositStake
	}
	if !IsNil(o.WithdrawStake) {
		toSerialize["WithdrawStake"] = o.WithdrawStake
	}
	if !IsNil(o.WithdrawStakeRequest) {
		toSerialize["WithdrawStakeRequest"] = o.WithdrawStakeRequest
	}
	if !IsNil(o.ElectionsDepositStake) {
		toSerialize["ElectionsDepositStake"] = o.ElectionsDepositStake
	}
	if !IsNil(o.ElectionsRecoverStake) {
		toSerialize["ElectionsRecoverStake"] = o.ElectionsRecoverStake
	}
	if !IsNil(o.JettonSwap) {
		toSerialize["JettonSwap"] = o.JettonSwap
	}
	if !IsNil(o.SmartContractExec) {
		toSerialize["SmartContractExec"] = o.SmartContractExec
	}
	if !IsNil(o.DomainRenew) {
		toSerialize["DomainRenew"] = o.DomainRenew
	}
	if !IsNil(o.InscriptionTransfer) {
		toSerialize["InscriptionTransfer"] = o.InscriptionTransfer
	}
	if !IsNil(o.InscriptionMint) {
		toSerialize["InscriptionMint"] = o.InscriptionMint
	}
	toSerialize["simple_preview"] = o.SimplePreview
	toSerialize["base_transactions"] = o.BaseTransactions
	return toSerialize, nil
}

func (o *Action) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"status",
		"simple_preview",
		"base_transactions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAction := _Action{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAction)

	if err != nil {
		return err
	}

	*o = Action(varAction)

	return err
}

type NullableAction struct {
	value *Action
	isSet bool
}

func (v NullableAction) Get() *Action {
	return v.value
}

func (v *NullableAction) Set(val *Action) {
	v.value = val
	v.isSet = true
}

func (v NullableAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAction(val *Action) *NullableAction {
	return &NullableAction{value: val, isSet: true}
}

func (v NullableAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


