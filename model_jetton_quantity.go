/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonQuantity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonQuantity{}

// JettonQuantity struct for JettonQuantity
type JettonQuantity struct {
	Quantity string `json:"quantity"`
	WalletAddress AccountAddress `json:"wallet_address"`
	Jetton JettonPreview `json:"jetton"`
}

type _JettonQuantity JettonQuantity

// NewJettonQuantity instantiates a new JettonQuantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonQuantity(quantity string, walletAddress AccountAddress, jetton JettonPreview) *JettonQuantity {
	this := JettonQuantity{}
	this.Quantity = quantity
	this.WalletAddress = walletAddress
	this.Jetton = jetton
	return &this
}

// NewJettonQuantityWithDefaults instantiates a new JettonQuantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonQuantityWithDefaults() *JettonQuantity {
	this := JettonQuantity{}
	return &this
}

// GetQuantity returns the Quantity field value
func (o *JettonQuantity) GetQuantity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *JettonQuantity) GetQuantityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *JettonQuantity) SetQuantity(v string) {
	o.Quantity = v
}

// GetWalletAddress returns the WalletAddress field value
func (o *JettonQuantity) GetWalletAddress() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.WalletAddress
}

// GetWalletAddressOk returns a tuple with the WalletAddress field value
// and a boolean to check if the value has been set.
func (o *JettonQuantity) GetWalletAddressOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletAddress, true
}

// SetWalletAddress sets field value
func (o *JettonQuantity) SetWalletAddress(v AccountAddress) {
	o.WalletAddress = v
}

// GetJetton returns the Jetton field value
func (o *JettonQuantity) GetJetton() JettonPreview {
	if o == nil {
		var ret JettonPreview
		return ret
	}

	return o.Jetton
}

// GetJettonOk returns a tuple with the Jetton field value
// and a boolean to check if the value has been set.
func (o *JettonQuantity) GetJettonOk() (*JettonPreview, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jetton, true
}

// SetJetton sets field value
func (o *JettonQuantity) SetJetton(v JettonPreview) {
	o.Jetton = v
}

func (o JettonQuantity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonQuantity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quantity"] = o.Quantity
	toSerialize["wallet_address"] = o.WalletAddress
	toSerialize["jetton"] = o.Jetton
	return toSerialize, nil
}

func (o *JettonQuantity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
		"wallet_address",
		"jetton",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonQuantity := _JettonQuantity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonQuantity)

	if err != nil {
		return err
	}

	*o = JettonQuantity(varJettonQuantity)

	return err
}

type NullableJettonQuantity struct {
	value *JettonQuantity
	isSet bool
}

func (v NullableJettonQuantity) Get() *JettonQuantity {
	return v.value
}

func (v *NullableJettonQuantity) Set(val *JettonQuantity) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonQuantity(val *JettonQuantity) *NullableJettonQuantity {
	return &NullableJettonQuantity{value: val, isSet: true}
}

func (v NullableJettonQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


