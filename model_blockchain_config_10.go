/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig10 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig10{}

// BlockchainConfig10 List of critical TON parameters, the change of which significantly affects the network, so more voting rounds are held.
type BlockchainConfig10 struct {
	CriticalParams []int32 `json:"critical_params"`
}

type _BlockchainConfig10 BlockchainConfig10

// NewBlockchainConfig10 instantiates a new BlockchainConfig10 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig10(criticalParams []int32) *BlockchainConfig10 {
	this := BlockchainConfig10{}
	this.CriticalParams = criticalParams
	return &this
}

// NewBlockchainConfig10WithDefaults instantiates a new BlockchainConfig10 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig10WithDefaults() *BlockchainConfig10 {
	this := BlockchainConfig10{}
	return &this
}

// GetCriticalParams returns the CriticalParams field value
func (o *BlockchainConfig10) GetCriticalParams() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.CriticalParams
}

// GetCriticalParamsOk returns a tuple with the CriticalParams field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig10) GetCriticalParamsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CriticalParams, true
}

// SetCriticalParams sets field value
func (o *BlockchainConfig10) SetCriticalParams(v []int32) {
	o.CriticalParams = v
}

func (o BlockchainConfig10) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig10) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["critical_params"] = o.CriticalParams
	return toSerialize, nil
}

func (o *BlockchainConfig10) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"critical_params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig10 := _BlockchainConfig10{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig10)

	if err != nil {
		return err
	}

	*o = BlockchainConfig10(varBlockchainConfig10)

	return err
}

type NullableBlockchainConfig10 struct {
	value *BlockchainConfig10
	isSet bool
}

func (v NullableBlockchainConfig10) Get() *BlockchainConfig10 {
	return v.value
}

func (v *NullableBlockchainConfig10) Set(val *BlockchainConfig10) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig10) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig10) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig10(val *BlockchainConfig10) *NullableBlockchainConfig10 {
	return &NullableBlockchainConfig10{value: val, isSet: true}
}

func (v NullableBlockchainConfig10) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig10) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


