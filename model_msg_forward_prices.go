/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MsgForwardPrices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MsgForwardPrices{}

// MsgForwardPrices struct for MsgForwardPrices
type MsgForwardPrices struct {
	LumpPrice int64 `json:"lump_price"`
	BitPrice int64 `json:"bit_price"`
	CellPrice int64 `json:"cell_price"`
	IhrPriceFactor int64 `json:"ihr_price_factor"`
	FirstFrac int64 `json:"first_frac"`
	NextFrac int64 `json:"next_frac"`
}

type _MsgForwardPrices MsgForwardPrices

// NewMsgForwardPrices instantiates a new MsgForwardPrices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMsgForwardPrices(lumpPrice int64, bitPrice int64, cellPrice int64, ihrPriceFactor int64, firstFrac int64, nextFrac int64) *MsgForwardPrices {
	this := MsgForwardPrices{}
	this.LumpPrice = lumpPrice
	this.BitPrice = bitPrice
	this.CellPrice = cellPrice
	this.IhrPriceFactor = ihrPriceFactor
	this.FirstFrac = firstFrac
	this.NextFrac = nextFrac
	return &this
}

// NewMsgForwardPricesWithDefaults instantiates a new MsgForwardPrices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMsgForwardPricesWithDefaults() *MsgForwardPrices {
	this := MsgForwardPrices{}
	return &this
}

// GetLumpPrice returns the LumpPrice field value
func (o *MsgForwardPrices) GetLumpPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LumpPrice
}

// GetLumpPriceOk returns a tuple with the LumpPrice field value
// and a boolean to check if the value has been set.
func (o *MsgForwardPrices) GetLumpPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LumpPrice, true
}

// SetLumpPrice sets field value
func (o *MsgForwardPrices) SetLumpPrice(v int64) {
	o.LumpPrice = v
}

// GetBitPrice returns the BitPrice field value
func (o *MsgForwardPrices) GetBitPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BitPrice
}

// GetBitPriceOk returns a tuple with the BitPrice field value
// and a boolean to check if the value has been set.
func (o *MsgForwardPrices) GetBitPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BitPrice, true
}

// SetBitPrice sets field value
func (o *MsgForwardPrices) SetBitPrice(v int64) {
	o.BitPrice = v
}

// GetCellPrice returns the CellPrice field value
func (o *MsgForwardPrices) GetCellPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CellPrice
}

// GetCellPriceOk returns a tuple with the CellPrice field value
// and a boolean to check if the value has been set.
func (o *MsgForwardPrices) GetCellPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CellPrice, true
}

// SetCellPrice sets field value
func (o *MsgForwardPrices) SetCellPrice(v int64) {
	o.CellPrice = v
}

// GetIhrPriceFactor returns the IhrPriceFactor field value
func (o *MsgForwardPrices) GetIhrPriceFactor() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IhrPriceFactor
}

// GetIhrPriceFactorOk returns a tuple with the IhrPriceFactor field value
// and a boolean to check if the value has been set.
func (o *MsgForwardPrices) GetIhrPriceFactorOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IhrPriceFactor, true
}

// SetIhrPriceFactor sets field value
func (o *MsgForwardPrices) SetIhrPriceFactor(v int64) {
	o.IhrPriceFactor = v
}

// GetFirstFrac returns the FirstFrac field value
func (o *MsgForwardPrices) GetFirstFrac() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FirstFrac
}

// GetFirstFracOk returns a tuple with the FirstFrac field value
// and a boolean to check if the value has been set.
func (o *MsgForwardPrices) GetFirstFracOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstFrac, true
}

// SetFirstFrac sets field value
func (o *MsgForwardPrices) SetFirstFrac(v int64) {
	o.FirstFrac = v
}

// GetNextFrac returns the NextFrac field value
func (o *MsgForwardPrices) GetNextFrac() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NextFrac
}

// GetNextFracOk returns a tuple with the NextFrac field value
// and a boolean to check if the value has been set.
func (o *MsgForwardPrices) GetNextFracOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextFrac, true
}

// SetNextFrac sets field value
func (o *MsgForwardPrices) SetNextFrac(v int64) {
	o.NextFrac = v
}

func (o MsgForwardPrices) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MsgForwardPrices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lump_price"] = o.LumpPrice
	toSerialize["bit_price"] = o.BitPrice
	toSerialize["cell_price"] = o.CellPrice
	toSerialize["ihr_price_factor"] = o.IhrPriceFactor
	toSerialize["first_frac"] = o.FirstFrac
	toSerialize["next_frac"] = o.NextFrac
	return toSerialize, nil
}

func (o *MsgForwardPrices) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lump_price",
		"bit_price",
		"cell_price",
		"ihr_price_factor",
		"first_frac",
		"next_frac",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMsgForwardPrices := _MsgForwardPrices{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMsgForwardPrices)

	if err != nil {
		return err
	}

	*o = MsgForwardPrices(varMsgForwardPrices)

	return err
}

type NullableMsgForwardPrices struct {
	value *MsgForwardPrices
	isSet bool
}

func (v NullableMsgForwardPrices) Get() *MsgForwardPrices {
	return v.value
}

func (v *NullableMsgForwardPrices) Set(val *MsgForwardPrices) {
	v.value = val
	v.isSet = true
}

func (v NullableMsgForwardPrices) IsSet() bool {
	return v.isSet
}

func (v *NullableMsgForwardPrices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMsgForwardPrices(val *MsgForwardPrices) *NullableMsgForwardPrices {
	return &NullableMsgForwardPrices{value: val, isSet: true}
}

func (v NullableMsgForwardPrices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMsgForwardPrices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


