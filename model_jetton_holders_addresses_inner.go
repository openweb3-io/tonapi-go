/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonHoldersAddressesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonHoldersAddressesInner{}

// JettonHoldersAddressesInner struct for JettonHoldersAddressesInner
type JettonHoldersAddressesInner struct {
	Address string `json:"address"`
	Owner AccountAddress `json:"owner"`
	Balance string `json:"balance"`
}

type _JettonHoldersAddressesInner JettonHoldersAddressesInner

// NewJettonHoldersAddressesInner instantiates a new JettonHoldersAddressesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonHoldersAddressesInner(address string, owner AccountAddress, balance string) *JettonHoldersAddressesInner {
	this := JettonHoldersAddressesInner{}
	this.Address = address
	this.Owner = owner
	this.Balance = balance
	return &this
}

// NewJettonHoldersAddressesInnerWithDefaults instantiates a new JettonHoldersAddressesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonHoldersAddressesInnerWithDefaults() *JettonHoldersAddressesInner {
	this := JettonHoldersAddressesInner{}
	return &this
}

// GetAddress returns the Address field value
func (o *JettonHoldersAddressesInner) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *JettonHoldersAddressesInner) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *JettonHoldersAddressesInner) SetAddress(v string) {
	o.Address = v
}

// GetOwner returns the Owner field value
func (o *JettonHoldersAddressesInner) GetOwner() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *JettonHoldersAddressesInner) GetOwnerOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *JettonHoldersAddressesInner) SetOwner(v AccountAddress) {
	o.Owner = v
}

// GetBalance returns the Balance field value
func (o *JettonHoldersAddressesInner) GetBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *JettonHoldersAddressesInner) GetBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *JettonHoldersAddressesInner) SetBalance(v string) {
	o.Balance = v
}

func (o JettonHoldersAddressesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonHoldersAddressesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["owner"] = o.Owner
	toSerialize["balance"] = o.Balance
	return toSerialize, nil
}

func (o *JettonHoldersAddressesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"owner",
		"balance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonHoldersAddressesInner := _JettonHoldersAddressesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonHoldersAddressesInner)

	if err != nil {
		return err
	}

	*o = JettonHoldersAddressesInner(varJettonHoldersAddressesInner)

	return err
}

type NullableJettonHoldersAddressesInner struct {
	value *JettonHoldersAddressesInner
	isSet bool
}

func (v NullableJettonHoldersAddressesInner) Get() *JettonHoldersAddressesInner {
	return v.value
}

func (v *NullableJettonHoldersAddressesInner) Set(val *JettonHoldersAddressesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonHoldersAddressesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonHoldersAddressesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonHoldersAddressesInner(val *JettonHoldersAddressesInner) *NullableJettonHoldersAddressesInner {
	return &NullableJettonHoldersAddressesInner{value: val, isSet: true}
}

func (v NullableJettonHoldersAddressesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonHoldersAddressesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


