/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig11 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig11{}

// BlockchainConfig11 This parameter indicates under what conditions proposals to change the TON configuration are accepted.
type BlockchainConfig11 struct {
	NormalParams ConfigProposalSetup `json:"normal_params"`
	CriticalParams ConfigProposalSetup `json:"critical_params"`
}

type _BlockchainConfig11 BlockchainConfig11

// NewBlockchainConfig11 instantiates a new BlockchainConfig11 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig11(normalParams ConfigProposalSetup, criticalParams ConfigProposalSetup) *BlockchainConfig11 {
	this := BlockchainConfig11{}
	this.NormalParams = normalParams
	this.CriticalParams = criticalParams
	return &this
}

// NewBlockchainConfig11WithDefaults instantiates a new BlockchainConfig11 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig11WithDefaults() *BlockchainConfig11 {
	this := BlockchainConfig11{}
	return &this
}

// GetNormalParams returns the NormalParams field value
func (o *BlockchainConfig11) GetNormalParams() ConfigProposalSetup {
	if o == nil {
		var ret ConfigProposalSetup
		return ret
	}

	return o.NormalParams
}

// GetNormalParamsOk returns a tuple with the NormalParams field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig11) GetNormalParamsOk() (*ConfigProposalSetup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NormalParams, true
}

// SetNormalParams sets field value
func (o *BlockchainConfig11) SetNormalParams(v ConfigProposalSetup) {
	o.NormalParams = v
}

// GetCriticalParams returns the CriticalParams field value
func (o *BlockchainConfig11) GetCriticalParams() ConfigProposalSetup {
	if o == nil {
		var ret ConfigProposalSetup
		return ret
	}

	return o.CriticalParams
}

// GetCriticalParamsOk returns a tuple with the CriticalParams field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig11) GetCriticalParamsOk() (*ConfigProposalSetup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CriticalParams, true
}

// SetCriticalParams sets field value
func (o *BlockchainConfig11) SetCriticalParams(v ConfigProposalSetup) {
	o.CriticalParams = v
}

func (o BlockchainConfig11) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig11) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["normal_params"] = o.NormalParams
	toSerialize["critical_params"] = o.CriticalParams
	return toSerialize, nil
}

func (o *BlockchainConfig11) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"normal_params",
		"critical_params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig11 := _BlockchainConfig11{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig11)

	if err != nil {
		return err
	}

	*o = BlockchainConfig11(varBlockchainConfig11)

	return err
}

type NullableBlockchainConfig11 struct {
	value *BlockchainConfig11
	isSet bool
}

func (v NullableBlockchainConfig11) Get() *BlockchainConfig11 {
	return v.value
}

func (v *NullableBlockchainConfig11) Set(val *BlockchainConfig11) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig11) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig11) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig11(val *BlockchainConfig11) *NullableBlockchainConfig11 {
	return &NullableBlockchainConfig11{value: val, isSet: true}
}

func (v NullableBlockchainConfig11) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig11) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


