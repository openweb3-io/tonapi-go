/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActionSimplePreview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionSimplePreview{}

// ActionSimplePreview shortly describes what this action is about.
type ActionSimplePreview struct {
	Name string `json:"name"`
	Description string `json:"description"`
	// a link to an image for this particular action.
	ActionImage *string `json:"action_image,omitempty"`
	Value *string `json:"value,omitempty"`
	// a link to an image that depicts this action's asset.
	ValueImage *string `json:"value_image,omitempty"`
	Accounts []AccountAddress `json:"accounts"`
}

type _ActionSimplePreview ActionSimplePreview

// NewActionSimplePreview instantiates a new ActionSimplePreview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionSimplePreview(name string, description string, accounts []AccountAddress) *ActionSimplePreview {
	this := ActionSimplePreview{}
	this.Name = name
	this.Description = description
	this.Accounts = accounts
	return &this
}

// NewActionSimplePreviewWithDefaults instantiates a new ActionSimplePreview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionSimplePreviewWithDefaults() *ActionSimplePreview {
	this := ActionSimplePreview{}
	return &this
}

// GetName returns the Name field value
func (o *ActionSimplePreview) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ActionSimplePreview) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ActionSimplePreview) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *ActionSimplePreview) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ActionSimplePreview) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ActionSimplePreview) SetDescription(v string) {
	o.Description = v
}

// GetActionImage returns the ActionImage field value if set, zero value otherwise.
func (o *ActionSimplePreview) GetActionImage() string {
	if o == nil || IsNil(o.ActionImage) {
		var ret string
		return ret
	}
	return *o.ActionImage
}

// GetActionImageOk returns a tuple with the ActionImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionSimplePreview) GetActionImageOk() (*string, bool) {
	if o == nil || IsNil(o.ActionImage) {
		return nil, false
	}
	return o.ActionImage, true
}

// HasActionImage returns a boolean if a field has been set.
func (o *ActionSimplePreview) HasActionImage() bool {
	if o != nil && !IsNil(o.ActionImage) {
		return true
	}

	return false
}

// SetActionImage gets a reference to the given string and assigns it to the ActionImage field.
func (o *ActionSimplePreview) SetActionImage(v string) {
	o.ActionImage = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ActionSimplePreview) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionSimplePreview) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ActionSimplePreview) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ActionSimplePreview) SetValue(v string) {
	o.Value = &v
}

// GetValueImage returns the ValueImage field value if set, zero value otherwise.
func (o *ActionSimplePreview) GetValueImage() string {
	if o == nil || IsNil(o.ValueImage) {
		var ret string
		return ret
	}
	return *o.ValueImage
}

// GetValueImageOk returns a tuple with the ValueImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionSimplePreview) GetValueImageOk() (*string, bool) {
	if o == nil || IsNil(o.ValueImage) {
		return nil, false
	}
	return o.ValueImage, true
}

// HasValueImage returns a boolean if a field has been set.
func (o *ActionSimplePreview) HasValueImage() bool {
	if o != nil && !IsNil(o.ValueImage) {
		return true
	}

	return false
}

// SetValueImage gets a reference to the given string and assigns it to the ValueImage field.
func (o *ActionSimplePreview) SetValueImage(v string) {
	o.ValueImage = &v
}

// GetAccounts returns the Accounts field value
func (o *ActionSimplePreview) GetAccounts() []AccountAddress {
	if o == nil {
		var ret []AccountAddress
		return ret
	}

	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value
// and a boolean to check if the value has been set.
func (o *ActionSimplePreview) GetAccountsOk() ([]AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.Accounts, true
}

// SetAccounts sets field value
func (o *ActionSimplePreview) SetAccounts(v []AccountAddress) {
	o.Accounts = v
}

func (o ActionSimplePreview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionSimplePreview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.ActionImage) {
		toSerialize["action_image"] = o.ActionImage
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ValueImage) {
		toSerialize["value_image"] = o.ValueImage
	}
	toSerialize["accounts"] = o.Accounts
	return toSerialize, nil
}

func (o *ActionSimplePreview) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"accounts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActionSimplePreview := _ActionSimplePreview{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActionSimplePreview)

	if err != nil {
		return err
	}

	*o = ActionSimplePreview(varActionSimplePreview)

	return err
}

type NullableActionSimplePreview struct {
	value *ActionSimplePreview
	isSet bool
}

func (v NullableActionSimplePreview) Get() *ActionSimplePreview {
	return v.value
}

func (v *NullableActionSimplePreview) Set(val *ActionSimplePreview) {
	v.value = val
	v.isSet = true
}

func (v NullableActionSimplePreview) IsSet() bool {
	return v.isSet
}

func (v *NullableActionSimplePreview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionSimplePreview(val *ActionSimplePreview) *NullableActionSimplePreview {
	return &NullableActionSimplePreview{value: val, isSet: true}
}

func (v NullableActionSimplePreview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionSimplePreview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


