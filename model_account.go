/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account struct for Account
type Account struct {
	Address string `json:"address"`
	Balance int64 `json:"balance"`
	// {'USD': 1, 'IDR': 1000}
	CurrenciesBalance map[string]interface{} `json:"currencies_balance,omitempty"`
	// unix timestamp
	LastActivity int64 `json:"last_activity"`
	Status AccountStatus `json:"status"`
	Interfaces []string `json:"interfaces,omitempty"`
	Name *string `json:"name,omitempty"`
	IsScam *bool `json:"is_scam,omitempty"`
	Icon *string `json:"icon,omitempty"`
	MemoRequired *bool `json:"memo_required,omitempty"`
	GetMethods []string `json:"get_methods"`
	IsSuspended *bool `json:"is_suspended,omitempty"`
	IsWallet bool `json:"is_wallet"`
}

type _Account Account

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount(address string, balance int64, lastActivity int64, status AccountStatus, getMethods []string, isWallet bool) *Account {
	this := Account{}
	this.Address = address
	this.Balance = balance
	this.LastActivity = lastActivity
	this.Status = status
	this.GetMethods = getMethods
	this.IsWallet = isWallet
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetAddress returns the Address field value
func (o *Account) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Account) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Account) SetAddress(v string) {
	o.Address = v
}

// GetBalance returns the Balance field value
func (o *Account) GetBalance() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *Account) GetBalanceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *Account) SetBalance(v int64) {
	o.Balance = v
}

// GetCurrenciesBalance returns the CurrenciesBalance field value if set, zero value otherwise.
func (o *Account) GetCurrenciesBalance() map[string]interface{} {
	if o == nil || IsNil(o.CurrenciesBalance) {
		var ret map[string]interface{}
		return ret
	}
	return o.CurrenciesBalance
}

// GetCurrenciesBalanceOk returns a tuple with the CurrenciesBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCurrenciesBalanceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CurrenciesBalance) {
		return map[string]interface{}{}, false
	}
	return o.CurrenciesBalance, true
}

// HasCurrenciesBalance returns a boolean if a field has been set.
func (o *Account) HasCurrenciesBalance() bool {
	if o != nil && !IsNil(o.CurrenciesBalance) {
		return true
	}

	return false
}

// SetCurrenciesBalance gets a reference to the given map[string]interface{} and assigns it to the CurrenciesBalance field.
func (o *Account) SetCurrenciesBalance(v map[string]interface{}) {
	o.CurrenciesBalance = v
}

// GetLastActivity returns the LastActivity field value
func (o *Account) GetLastActivity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastActivity
}

// GetLastActivityOk returns a tuple with the LastActivity field value
// and a boolean to check if the value has been set.
func (o *Account) GetLastActivityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastActivity, true
}

// SetLastActivity sets field value
func (o *Account) SetLastActivity(v int64) {
	o.LastActivity = v
}

// GetStatus returns the Status field value
func (o *Account) GetStatus() AccountStatus {
	if o == nil {
		var ret AccountStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Account) GetStatusOk() (*AccountStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Account) SetStatus(v AccountStatus) {
	o.Status = v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *Account) GetInterfaces() []string {
	if o == nil || IsNil(o.Interfaces) {
		var ret []string
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetInterfacesOk() ([]string, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *Account) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []string and assigns it to the Interfaces field.
func (o *Account) SetInterfaces(v []string) {
	o.Interfaces = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Account) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Account) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Account) SetName(v string) {
	o.Name = &v
}

// GetIsScam returns the IsScam field value if set, zero value otherwise.
func (o *Account) GetIsScam() bool {
	if o == nil || IsNil(o.IsScam) {
		var ret bool
		return ret
	}
	return *o.IsScam
}

// GetIsScamOk returns a tuple with the IsScam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIsScamOk() (*bool, bool) {
	if o == nil || IsNil(o.IsScam) {
		return nil, false
	}
	return o.IsScam, true
}

// HasIsScam returns a boolean if a field has been set.
func (o *Account) HasIsScam() bool {
	if o != nil && !IsNil(o.IsScam) {
		return true
	}

	return false
}

// SetIsScam gets a reference to the given bool and assigns it to the IsScam field.
func (o *Account) SetIsScam(v bool) {
	o.IsScam = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *Account) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *Account) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *Account) SetIcon(v string) {
	o.Icon = &v
}

// GetMemoRequired returns the MemoRequired field value if set, zero value otherwise.
func (o *Account) GetMemoRequired() bool {
	if o == nil || IsNil(o.MemoRequired) {
		var ret bool
		return ret
	}
	return *o.MemoRequired
}

// GetMemoRequiredOk returns a tuple with the MemoRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetMemoRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.MemoRequired) {
		return nil, false
	}
	return o.MemoRequired, true
}

// HasMemoRequired returns a boolean if a field has been set.
func (o *Account) HasMemoRequired() bool {
	if o != nil && !IsNil(o.MemoRequired) {
		return true
	}

	return false
}

// SetMemoRequired gets a reference to the given bool and assigns it to the MemoRequired field.
func (o *Account) SetMemoRequired(v bool) {
	o.MemoRequired = &v
}

// GetGetMethods returns the GetMethods field value
func (o *Account) GetGetMethods() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.GetMethods
}

// GetGetMethodsOk returns a tuple with the GetMethods field value
// and a boolean to check if the value has been set.
func (o *Account) GetGetMethodsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GetMethods, true
}

// SetGetMethods sets field value
func (o *Account) SetGetMethods(v []string) {
	o.GetMethods = v
}

// GetIsSuspended returns the IsSuspended field value if set, zero value otherwise.
func (o *Account) GetIsSuspended() bool {
	if o == nil || IsNil(o.IsSuspended) {
		var ret bool
		return ret
	}
	return *o.IsSuspended
}

// GetIsSuspendedOk returns a tuple with the IsSuspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIsSuspendedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuspended) {
		return nil, false
	}
	return o.IsSuspended, true
}

// HasIsSuspended returns a boolean if a field has been set.
func (o *Account) HasIsSuspended() bool {
	if o != nil && !IsNil(o.IsSuspended) {
		return true
	}

	return false
}

// SetIsSuspended gets a reference to the given bool and assigns it to the IsSuspended field.
func (o *Account) SetIsSuspended(v bool) {
	o.IsSuspended = &v
}

// GetIsWallet returns the IsWallet field value
func (o *Account) GetIsWallet() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsWallet
}

// GetIsWalletOk returns a tuple with the IsWallet field value
// and a boolean to check if the value has been set.
func (o *Account) GetIsWalletOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsWallet, true
}

// SetIsWallet sets field value
func (o *Account) SetIsWallet(v bool) {
	o.IsWallet = v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["balance"] = o.Balance
	if !IsNil(o.CurrenciesBalance) {
		toSerialize["currencies_balance"] = o.CurrenciesBalance
	}
	toSerialize["last_activity"] = o.LastActivity
	toSerialize["status"] = o.Status
	if !IsNil(o.Interfaces) {
		toSerialize["interfaces"] = o.Interfaces
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsScam) {
		toSerialize["is_scam"] = o.IsScam
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.MemoRequired) {
		toSerialize["memo_required"] = o.MemoRequired
	}
	toSerialize["get_methods"] = o.GetMethods
	if !IsNil(o.IsSuspended) {
		toSerialize["is_suspended"] = o.IsSuspended
	}
	toSerialize["is_wallet"] = o.IsWallet
	return toSerialize, nil
}

func (o *Account) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"balance",
		"last_activity",
		"status",
		"get_methods",
		"is_wallet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccount := _Account{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccount)

	if err != nil {
		return err
	}

	*o = Account(varAccount)

	return err
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


