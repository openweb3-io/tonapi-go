/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MarketTonRates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketTonRates{}

// MarketTonRates struct for MarketTonRates
type MarketTonRates struct {
	Market string `json:"market"`
	UsdPrice float32 `json:"usd_price"`
	LastDateUpdate int64 `json:"last_date_update"`
}

type _MarketTonRates MarketTonRates

// NewMarketTonRates instantiates a new MarketTonRates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketTonRates(market string, usdPrice float32, lastDateUpdate int64) *MarketTonRates {
	this := MarketTonRates{}
	this.Market = market
	this.UsdPrice = usdPrice
	this.LastDateUpdate = lastDateUpdate
	return &this
}

// NewMarketTonRatesWithDefaults instantiates a new MarketTonRates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketTonRatesWithDefaults() *MarketTonRates {
	this := MarketTonRates{}
	return &this
}

// GetMarket returns the Market field value
func (o *MarketTonRates) GetMarket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Market
}

// GetMarketOk returns a tuple with the Market field value
// and a boolean to check if the value has been set.
func (o *MarketTonRates) GetMarketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Market, true
}

// SetMarket sets field value
func (o *MarketTonRates) SetMarket(v string) {
	o.Market = v
}

// GetUsdPrice returns the UsdPrice field value
func (o *MarketTonRates) GetUsdPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UsdPrice
}

// GetUsdPriceOk returns a tuple with the UsdPrice field value
// and a boolean to check if the value has been set.
func (o *MarketTonRates) GetUsdPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsdPrice, true
}

// SetUsdPrice sets field value
func (o *MarketTonRates) SetUsdPrice(v float32) {
	o.UsdPrice = v
}

// GetLastDateUpdate returns the LastDateUpdate field value
func (o *MarketTonRates) GetLastDateUpdate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastDateUpdate
}

// GetLastDateUpdateOk returns a tuple with the LastDateUpdate field value
// and a boolean to check if the value has been set.
func (o *MarketTonRates) GetLastDateUpdateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastDateUpdate, true
}

// SetLastDateUpdate sets field value
func (o *MarketTonRates) SetLastDateUpdate(v int64) {
	o.LastDateUpdate = v
}

func (o MarketTonRates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketTonRates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["market"] = o.Market
	toSerialize["usd_price"] = o.UsdPrice
	toSerialize["last_date_update"] = o.LastDateUpdate
	return toSerialize, nil
}

func (o *MarketTonRates) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"market",
		"usd_price",
		"last_date_update",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMarketTonRates := _MarketTonRates{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMarketTonRates)

	if err != nil {
		return err
	}

	*o = MarketTonRates(varMarketTonRates)

	return err
}

type NullableMarketTonRates struct {
	value *MarketTonRates
	isSet bool
}

func (v NullableMarketTonRates) Get() *MarketTonRates {
	return v.value
}

func (v *NullableMarketTonRates) Set(val *MarketTonRates) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketTonRates) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketTonRates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketTonRates(val *MarketTonRates) *NullableMarketTonRates {
	return &NullableMarketTonRates{value: val, isSet: true}
}

func (v NullableMarketTonRates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketTonRates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


