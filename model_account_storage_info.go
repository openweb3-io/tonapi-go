/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountStorageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountStorageInfo{}

// AccountStorageInfo struct for AccountStorageInfo
type AccountStorageInfo struct {
	UsedCells int64 `json:"used_cells"`
	UsedBits int64 `json:"used_bits"`
	UsedPublicCells int64 `json:"used_public_cells"`
	LastPaid int64 `json:"last_paid"`
	DuePayment int64 `json:"due_payment"`
}

type _AccountStorageInfo AccountStorageInfo

// NewAccountStorageInfo instantiates a new AccountStorageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountStorageInfo(usedCells int64, usedBits int64, usedPublicCells int64, lastPaid int64, duePayment int64) *AccountStorageInfo {
	this := AccountStorageInfo{}
	this.UsedCells = usedCells
	this.UsedBits = usedBits
	this.UsedPublicCells = usedPublicCells
	this.LastPaid = lastPaid
	this.DuePayment = duePayment
	return &this
}

// NewAccountStorageInfoWithDefaults instantiates a new AccountStorageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountStorageInfoWithDefaults() *AccountStorageInfo {
	this := AccountStorageInfo{}
	return &this
}

// GetUsedCells returns the UsedCells field value
func (o *AccountStorageInfo) GetUsedCells() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UsedCells
}

// GetUsedCellsOk returns a tuple with the UsedCells field value
// and a boolean to check if the value has been set.
func (o *AccountStorageInfo) GetUsedCellsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedCells, true
}

// SetUsedCells sets field value
func (o *AccountStorageInfo) SetUsedCells(v int64) {
	o.UsedCells = v
}

// GetUsedBits returns the UsedBits field value
func (o *AccountStorageInfo) GetUsedBits() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UsedBits
}

// GetUsedBitsOk returns a tuple with the UsedBits field value
// and a boolean to check if the value has been set.
func (o *AccountStorageInfo) GetUsedBitsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedBits, true
}

// SetUsedBits sets field value
func (o *AccountStorageInfo) SetUsedBits(v int64) {
	o.UsedBits = v
}

// GetUsedPublicCells returns the UsedPublicCells field value
func (o *AccountStorageInfo) GetUsedPublicCells() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UsedPublicCells
}

// GetUsedPublicCellsOk returns a tuple with the UsedPublicCells field value
// and a boolean to check if the value has been set.
func (o *AccountStorageInfo) GetUsedPublicCellsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedPublicCells, true
}

// SetUsedPublicCells sets field value
func (o *AccountStorageInfo) SetUsedPublicCells(v int64) {
	o.UsedPublicCells = v
}

// GetLastPaid returns the LastPaid field value
func (o *AccountStorageInfo) GetLastPaid() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastPaid
}

// GetLastPaidOk returns a tuple with the LastPaid field value
// and a boolean to check if the value has been set.
func (o *AccountStorageInfo) GetLastPaidOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastPaid, true
}

// SetLastPaid sets field value
func (o *AccountStorageInfo) SetLastPaid(v int64) {
	o.LastPaid = v
}

// GetDuePayment returns the DuePayment field value
func (o *AccountStorageInfo) GetDuePayment() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DuePayment
}

// GetDuePaymentOk returns a tuple with the DuePayment field value
// and a boolean to check if the value has been set.
func (o *AccountStorageInfo) GetDuePaymentOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DuePayment, true
}

// SetDuePayment sets field value
func (o *AccountStorageInfo) SetDuePayment(v int64) {
	o.DuePayment = v
}

func (o AccountStorageInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountStorageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["used_cells"] = o.UsedCells
	toSerialize["used_bits"] = o.UsedBits
	toSerialize["used_public_cells"] = o.UsedPublicCells
	toSerialize["last_paid"] = o.LastPaid
	toSerialize["due_payment"] = o.DuePayment
	return toSerialize, nil
}

func (o *AccountStorageInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"used_cells",
		"used_bits",
		"used_public_cells",
		"last_paid",
		"due_payment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountStorageInfo := _AccountStorageInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountStorageInfo)

	if err != nil {
		return err
	}

	*o = AccountStorageInfo(varAccountStorageInfo)

	return err
}

type NullableAccountStorageInfo struct {
	value *AccountStorageInfo
	isSet bool
}

func (v NullableAccountStorageInfo) Get() *AccountStorageInfo {
	return v.value
}

func (v *NullableAccountStorageInfo) Set(val *AccountStorageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountStorageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountStorageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountStorageInfo(val *AccountStorageInfo) *NullableAccountStorageInfo {
	return &NullableAccountStorageInfo{value: val, isSet: true}
}

func (v NullableAccountStorageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountStorageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


