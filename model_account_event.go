/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountEvent{}

// AccountEvent An event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
type AccountEvent struct {
	EventId string `json:"event_id"`
	Account AccountAddress `json:"account"`
	Timestamp int64 `json:"timestamp"`
	Actions []Action `json:"actions"`
	// scam
	IsScam bool `json:"is_scam"`
	Lt int64 `json:"lt"`
	// Event is not finished yet. Transactions still happening
	InProgress bool `json:"in_progress"`
	// TODO
	Extra int64 `json:"extra"`
}

type _AccountEvent AccountEvent

// NewAccountEvent instantiates a new AccountEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountEvent(eventId string, account AccountAddress, timestamp int64, actions []Action, isScam bool, lt int64, inProgress bool, extra int64) *AccountEvent {
	this := AccountEvent{}
	this.EventId = eventId
	this.Account = account
	this.Timestamp = timestamp
	this.Actions = actions
	this.IsScam = isScam
	this.Lt = lt
	this.InProgress = inProgress
	this.Extra = extra
	return &this
}

// NewAccountEventWithDefaults instantiates a new AccountEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountEventWithDefaults() *AccountEvent {
	this := AccountEvent{}
	return &this
}

// GetEventId returns the EventId field value
func (o *AccountEvent) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *AccountEvent) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *AccountEvent) SetEventId(v string) {
	o.EventId = v
}

// GetAccount returns the Account field value
func (o *AccountEvent) GetAccount() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *AccountEvent) GetAccountOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *AccountEvent) SetAccount(v AccountAddress) {
	o.Account = v
}

// GetTimestamp returns the Timestamp field value
func (o *AccountEvent) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *AccountEvent) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *AccountEvent) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetActions returns the Actions field value
func (o *AccountEvent) GetActions() []Action {
	if o == nil {
		var ret []Action
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *AccountEvent) GetActionsOk() ([]Action, bool) {
	if o == nil {
		return nil, false
	}
	return o.Actions, true
}

// SetActions sets field value
func (o *AccountEvent) SetActions(v []Action) {
	o.Actions = v
}

// GetIsScam returns the IsScam field value
func (o *AccountEvent) GetIsScam() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsScam
}

// GetIsScamOk returns a tuple with the IsScam field value
// and a boolean to check if the value has been set.
func (o *AccountEvent) GetIsScamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsScam, true
}

// SetIsScam sets field value
func (o *AccountEvent) SetIsScam(v bool) {
	o.IsScam = v
}

// GetLt returns the Lt field value
func (o *AccountEvent) GetLt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Lt
}

// GetLtOk returns a tuple with the Lt field value
// and a boolean to check if the value has been set.
func (o *AccountEvent) GetLtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lt, true
}

// SetLt sets field value
func (o *AccountEvent) SetLt(v int64) {
	o.Lt = v
}

// GetInProgress returns the InProgress field value
func (o *AccountEvent) GetInProgress() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InProgress
}

// GetInProgressOk returns a tuple with the InProgress field value
// and a boolean to check if the value has been set.
func (o *AccountEvent) GetInProgressOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InProgress, true
}

// SetInProgress sets field value
func (o *AccountEvent) SetInProgress(v bool) {
	o.InProgress = v
}

// GetExtra returns the Extra field value
func (o *AccountEvent) GetExtra() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value
// and a boolean to check if the value has been set.
func (o *AccountEvent) GetExtraOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extra, true
}

// SetExtra sets field value
func (o *AccountEvent) SetExtra(v int64) {
	o.Extra = v
}

func (o AccountEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["account"] = o.Account
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["actions"] = o.Actions
	toSerialize["is_scam"] = o.IsScam
	toSerialize["lt"] = o.Lt
	toSerialize["in_progress"] = o.InProgress
	toSerialize["extra"] = o.Extra
	return toSerialize, nil
}

func (o *AccountEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
		"account",
		"timestamp",
		"actions",
		"is_scam",
		"lt",
		"in_progress",
		"extra",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountEvent := _AccountEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountEvent)

	if err != nil {
		return err
	}

	*o = AccountEvent(varAccountEvent)

	return err
}

type NullableAccountEvent struct {
	value *AccountEvent
	isSet bool
}

func (v NullableAccountEvent) Get() *AccountEvent {
	return v.value
}

func (v *NullableAccountEvent) Set(val *AccountEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountEvent(val *AccountEvent) *NullableAccountEvent {
	return &NullableAccountEvent{value: val, isSet: true}
}

func (v NullableAccountEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


