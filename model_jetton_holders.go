/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonHolders type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonHolders{}

// JettonHolders struct for JettonHolders
type JettonHolders struct {
	Addresses []JettonHoldersAddressesInner `json:"addresses"`
	Total int64 `json:"total"`
}

type _JettonHolders JettonHolders

// NewJettonHolders instantiates a new JettonHolders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonHolders(addresses []JettonHoldersAddressesInner, total int64) *JettonHolders {
	this := JettonHolders{}
	this.Addresses = addresses
	this.Total = total
	return &this
}

// NewJettonHoldersWithDefaults instantiates a new JettonHolders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonHoldersWithDefaults() *JettonHolders {
	this := JettonHolders{}
	return &this
}

// GetAddresses returns the Addresses field value
func (o *JettonHolders) GetAddresses() []JettonHoldersAddressesInner {
	if o == nil {
		var ret []JettonHoldersAddressesInner
		return ret
	}

	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value
// and a boolean to check if the value has been set.
func (o *JettonHolders) GetAddressesOk() ([]JettonHoldersAddressesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Addresses, true
}

// SetAddresses sets field value
func (o *JettonHolders) SetAddresses(v []JettonHoldersAddressesInner) {
	o.Addresses = v
}

// GetTotal returns the Total field value
func (o *JettonHolders) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *JettonHolders) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *JettonHolders) SetTotal(v int64) {
	o.Total = v
}

func (o JettonHolders) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonHolders) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addresses"] = o.Addresses
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *JettonHolders) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"addresses",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonHolders := _JettonHolders{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonHolders)

	if err != nil {
		return err
	}

	*o = JettonHolders(varJettonHolders)

	return err
}

type NullableJettonHolders struct {
	value *JettonHolders
	isSet bool
}

func (v NullableJettonHolders) Get() *JettonHolders {
	return v.value
}

func (v *NullableJettonHolders) Set(val *JettonHolders) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonHolders) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonHolders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonHolders(val *JettonHolders) *NullableJettonHolders {
	return &NullableJettonHolders{value: val, isSet: true}
}

func (v NullableJettonHolders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonHolders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


