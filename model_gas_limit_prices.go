/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GasLimitPrices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GasLimitPrices{}

// GasLimitPrices struct for GasLimitPrices
type GasLimitPrices struct {
	SpecialGasLimit *int64 `json:"special_gas_limit,omitempty"`
	FlatGasLimit *int64 `json:"flat_gas_limit,omitempty"`
	FlatGasPrice *int64 `json:"flat_gas_price,omitempty"`
	GasPrice int64 `json:"gas_price"`
	GasLimit int64 `json:"gas_limit"`
	GasCredit int64 `json:"gas_credit"`
	BlockGasLimit int64 `json:"block_gas_limit"`
	FreezeDueLimit int64 `json:"freeze_due_limit"`
	DeleteDueLimit int64 `json:"delete_due_limit"`
}

type _GasLimitPrices GasLimitPrices

// NewGasLimitPrices instantiates a new GasLimitPrices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGasLimitPrices(gasPrice int64, gasLimit int64, gasCredit int64, blockGasLimit int64, freezeDueLimit int64, deleteDueLimit int64) *GasLimitPrices {
	this := GasLimitPrices{}
	this.GasPrice = gasPrice
	this.GasLimit = gasLimit
	this.GasCredit = gasCredit
	this.BlockGasLimit = blockGasLimit
	this.FreezeDueLimit = freezeDueLimit
	this.DeleteDueLimit = deleteDueLimit
	return &this
}

// NewGasLimitPricesWithDefaults instantiates a new GasLimitPrices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGasLimitPricesWithDefaults() *GasLimitPrices {
	this := GasLimitPrices{}
	return &this
}

// GetSpecialGasLimit returns the SpecialGasLimit field value if set, zero value otherwise.
func (o *GasLimitPrices) GetSpecialGasLimit() int64 {
	if o == nil || IsNil(o.SpecialGasLimit) {
		var ret int64
		return ret
	}
	return *o.SpecialGasLimit
}

// GetSpecialGasLimitOk returns a tuple with the SpecialGasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasLimitPrices) GetSpecialGasLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.SpecialGasLimit) {
		return nil, false
	}
	return o.SpecialGasLimit, true
}

// HasSpecialGasLimit returns a boolean if a field has been set.
func (o *GasLimitPrices) HasSpecialGasLimit() bool {
	if o != nil && !IsNil(o.SpecialGasLimit) {
		return true
	}

	return false
}

// SetSpecialGasLimit gets a reference to the given int64 and assigns it to the SpecialGasLimit field.
func (o *GasLimitPrices) SetSpecialGasLimit(v int64) {
	o.SpecialGasLimit = &v
}

// GetFlatGasLimit returns the FlatGasLimit field value if set, zero value otherwise.
func (o *GasLimitPrices) GetFlatGasLimit() int64 {
	if o == nil || IsNil(o.FlatGasLimit) {
		var ret int64
		return ret
	}
	return *o.FlatGasLimit
}

// GetFlatGasLimitOk returns a tuple with the FlatGasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasLimitPrices) GetFlatGasLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.FlatGasLimit) {
		return nil, false
	}
	return o.FlatGasLimit, true
}

// HasFlatGasLimit returns a boolean if a field has been set.
func (o *GasLimitPrices) HasFlatGasLimit() bool {
	if o != nil && !IsNil(o.FlatGasLimit) {
		return true
	}

	return false
}

// SetFlatGasLimit gets a reference to the given int64 and assigns it to the FlatGasLimit field.
func (o *GasLimitPrices) SetFlatGasLimit(v int64) {
	o.FlatGasLimit = &v
}

// GetFlatGasPrice returns the FlatGasPrice field value if set, zero value otherwise.
func (o *GasLimitPrices) GetFlatGasPrice() int64 {
	if o == nil || IsNil(o.FlatGasPrice) {
		var ret int64
		return ret
	}
	return *o.FlatGasPrice
}

// GetFlatGasPriceOk returns a tuple with the FlatGasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasLimitPrices) GetFlatGasPriceOk() (*int64, bool) {
	if o == nil || IsNil(o.FlatGasPrice) {
		return nil, false
	}
	return o.FlatGasPrice, true
}

// HasFlatGasPrice returns a boolean if a field has been set.
func (o *GasLimitPrices) HasFlatGasPrice() bool {
	if o != nil && !IsNil(o.FlatGasPrice) {
		return true
	}

	return false
}

// SetFlatGasPrice gets a reference to the given int64 and assigns it to the FlatGasPrice field.
func (o *GasLimitPrices) SetFlatGasPrice(v int64) {
	o.FlatGasPrice = &v
}

// GetGasPrice returns the GasPrice field value
func (o *GasLimitPrices) GetGasPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value
// and a boolean to check if the value has been set.
func (o *GasLimitPrices) GetGasPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasPrice, true
}

// SetGasPrice sets field value
func (o *GasLimitPrices) SetGasPrice(v int64) {
	o.GasPrice = v
}

// GetGasLimit returns the GasLimit field value
func (o *GasLimitPrices) GetGasLimit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value
// and a boolean to check if the value has been set.
func (o *GasLimitPrices) GetGasLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasLimit, true
}

// SetGasLimit sets field value
func (o *GasLimitPrices) SetGasLimit(v int64) {
	o.GasLimit = v
}

// GetGasCredit returns the GasCredit field value
func (o *GasLimitPrices) GetGasCredit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.GasCredit
}

// GetGasCreditOk returns a tuple with the GasCredit field value
// and a boolean to check if the value has been set.
func (o *GasLimitPrices) GetGasCreditOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasCredit, true
}

// SetGasCredit sets field value
func (o *GasLimitPrices) SetGasCredit(v int64) {
	o.GasCredit = v
}

// GetBlockGasLimit returns the BlockGasLimit field value
func (o *GasLimitPrices) GetBlockGasLimit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BlockGasLimit
}

// GetBlockGasLimitOk returns a tuple with the BlockGasLimit field value
// and a boolean to check if the value has been set.
func (o *GasLimitPrices) GetBlockGasLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockGasLimit, true
}

// SetBlockGasLimit sets field value
func (o *GasLimitPrices) SetBlockGasLimit(v int64) {
	o.BlockGasLimit = v
}

// GetFreezeDueLimit returns the FreezeDueLimit field value
func (o *GasLimitPrices) GetFreezeDueLimit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FreezeDueLimit
}

// GetFreezeDueLimitOk returns a tuple with the FreezeDueLimit field value
// and a boolean to check if the value has been set.
func (o *GasLimitPrices) GetFreezeDueLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FreezeDueLimit, true
}

// SetFreezeDueLimit sets field value
func (o *GasLimitPrices) SetFreezeDueLimit(v int64) {
	o.FreezeDueLimit = v
}

// GetDeleteDueLimit returns the DeleteDueLimit field value
func (o *GasLimitPrices) GetDeleteDueLimit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DeleteDueLimit
}

// GetDeleteDueLimitOk returns a tuple with the DeleteDueLimit field value
// and a boolean to check if the value has been set.
func (o *GasLimitPrices) GetDeleteDueLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeleteDueLimit, true
}

// SetDeleteDueLimit sets field value
func (o *GasLimitPrices) SetDeleteDueLimit(v int64) {
	o.DeleteDueLimit = v
}

func (o GasLimitPrices) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GasLimitPrices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SpecialGasLimit) {
		toSerialize["special_gas_limit"] = o.SpecialGasLimit
	}
	if !IsNil(o.FlatGasLimit) {
		toSerialize["flat_gas_limit"] = o.FlatGasLimit
	}
	if !IsNil(o.FlatGasPrice) {
		toSerialize["flat_gas_price"] = o.FlatGasPrice
	}
	toSerialize["gas_price"] = o.GasPrice
	toSerialize["gas_limit"] = o.GasLimit
	toSerialize["gas_credit"] = o.GasCredit
	toSerialize["block_gas_limit"] = o.BlockGasLimit
	toSerialize["freeze_due_limit"] = o.FreezeDueLimit
	toSerialize["delete_due_limit"] = o.DeleteDueLimit
	return toSerialize, nil
}

func (o *GasLimitPrices) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gas_price",
		"gas_limit",
		"gas_credit",
		"block_gas_limit",
		"freeze_due_limit",
		"delete_due_limit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGasLimitPrices := _GasLimitPrices{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGasLimitPrices)

	if err != nil {
		return err
	}

	*o = GasLimitPrices(varGasLimitPrices)

	return err
}

type NullableGasLimitPrices struct {
	value *GasLimitPrices
	isSet bool
}

func (v NullableGasLimitPrices) Get() *GasLimitPrices {
	return v.value
}

func (v *NullableGasLimitPrices) Set(val *GasLimitPrices) {
	v.value = val
	v.isSet = true
}

func (v NullableGasLimitPrices) IsSet() bool {
	return v.isSet
}

func (v *NullableGasLimitPrices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGasLimitPrices(val *GasLimitPrices) *NullableGasLimitPrices {
	return &NullableGasLimitPrices{value: val, isSet: true}
}

func (v NullableGasLimitPrices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGasLimitPrices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


