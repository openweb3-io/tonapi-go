/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServiceStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceStatus{}

// ServiceStatus struct for ServiceStatus
type ServiceStatus struct {
	RestOnline bool `json:"rest_online"`
	IndexingLatency int32 `json:"indexing_latency"`
}

type _ServiceStatus ServiceStatus

// NewServiceStatus instantiates a new ServiceStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceStatus(restOnline bool, indexingLatency int32) *ServiceStatus {
	this := ServiceStatus{}
	this.RestOnline = restOnline
	this.IndexingLatency = indexingLatency
	return &this
}

// NewServiceStatusWithDefaults instantiates a new ServiceStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceStatusWithDefaults() *ServiceStatus {
	this := ServiceStatus{}
	var restOnline bool = true
	this.RestOnline = restOnline
	return &this
}

// GetRestOnline returns the RestOnline field value
func (o *ServiceStatus) GetRestOnline() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RestOnline
}

// GetRestOnlineOk returns a tuple with the RestOnline field value
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetRestOnlineOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestOnline, true
}

// SetRestOnline sets field value
func (o *ServiceStatus) SetRestOnline(v bool) {
	o.RestOnline = v
}

// GetIndexingLatency returns the IndexingLatency field value
func (o *ServiceStatus) GetIndexingLatency() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IndexingLatency
}

// GetIndexingLatencyOk returns a tuple with the IndexingLatency field value
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetIndexingLatencyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexingLatency, true
}

// SetIndexingLatency sets field value
func (o *ServiceStatus) SetIndexingLatency(v int32) {
	o.IndexingLatency = v
}

func (o ServiceStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rest_online"] = o.RestOnline
	toSerialize["indexing_latency"] = o.IndexingLatency
	return toSerialize, nil
}

func (o *ServiceStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rest_online",
		"indexing_latency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceStatus := _ServiceStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceStatus)

	if err != nil {
		return err
	}

	*o = ServiceStatus(varServiceStatus)

	return err
}

type NullableServiceStatus struct {
	value *ServiceStatus
	isSet bool
}

func (v NullableServiceStatus) Get() *ServiceStatus {
	return v.value
}

func (v *NullableServiceStatus) Set(val *ServiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStatus(val *ServiceStatus) *NullableServiceStatus {
	return &NullableServiceStatus{value: val, isSet: true}
}

func (v NullableServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


