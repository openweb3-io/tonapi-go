/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NftItems type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NftItems{}

// NftItems struct for NftItems
type NftItems struct {
	NftItems []NftItem `json:"nft_items"`
}

type _NftItems NftItems

// NewNftItems instantiates a new NftItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftItems(nftItems []NftItem) *NftItems {
	this := NftItems{}
	this.NftItems = nftItems
	return &this
}

// NewNftItemsWithDefaults instantiates a new NftItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftItemsWithDefaults() *NftItems {
	this := NftItems{}
	return &this
}

// GetNftItems returns the NftItems field value
func (o *NftItems) GetNftItems() []NftItem {
	if o == nil {
		var ret []NftItem
		return ret
	}

	return o.NftItems
}

// GetNftItemsOk returns a tuple with the NftItems field value
// and a boolean to check if the value has been set.
func (o *NftItems) GetNftItemsOk() ([]NftItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.NftItems, true
}

// SetNftItems sets field value
func (o *NftItems) SetNftItems(v []NftItem) {
	o.NftItems = v
}

func (o NftItems) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NftItems) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nft_items"] = o.NftItems
	return toSerialize, nil
}

func (o *NftItems) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nft_items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNftItems := _NftItems{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNftItems)

	if err != nil {
		return err
	}

	*o = NftItems(varNftItems)

	return err
}

type NullableNftItems struct {
	value *NftItems
	isSet bool
}

func (v NullableNftItems) Get() *NftItems {
	return v.value
}

func (v *NullableNftItems) Set(val *NftItems) {
	v.value = val
	v.isSet = true
}

func (v NullableNftItems) IsSet() bool {
	return v.isSet
}

func (v *NullableNftItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftItems(val *NftItems) *NullableNftItems {
	return &NullableNftItems{value: val, isSet: true}
}

func (v NullableNftItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


