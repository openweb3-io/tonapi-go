/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonSwapAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonSwapAction{}

// JettonSwapAction struct for JettonSwapAction
type JettonSwapAction struct {
	Dex string `json:"dex"`
	AmountIn string `json:"amount_in"`
	AmountOut string `json:"amount_out"`
	TonIn *int64 `json:"ton_in,omitempty"`
	TonOut *int64 `json:"ton_out,omitempty"`
	UserWallet AccountAddress `json:"user_wallet"`
	Router AccountAddress `json:"router"`
	JettonMasterIn *JettonPreview `json:"jetton_master_in,omitempty"`
	JettonMasterOut *JettonPreview `json:"jetton_master_out,omitempty"`
}

type _JettonSwapAction JettonSwapAction

// NewJettonSwapAction instantiates a new JettonSwapAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonSwapAction(dex string, amountIn string, amountOut string, userWallet AccountAddress, router AccountAddress) *JettonSwapAction {
	this := JettonSwapAction{}
	this.Dex = dex
	this.AmountIn = amountIn
	this.AmountOut = amountOut
	this.UserWallet = userWallet
	this.Router = router
	return &this
}

// NewJettonSwapActionWithDefaults instantiates a new JettonSwapAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonSwapActionWithDefaults() *JettonSwapAction {
	this := JettonSwapAction{}
	return &this
}

// GetDex returns the Dex field value
func (o *JettonSwapAction) GetDex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dex
}

// GetDexOk returns a tuple with the Dex field value
// and a boolean to check if the value has been set.
func (o *JettonSwapAction) GetDexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dex, true
}

// SetDex sets field value
func (o *JettonSwapAction) SetDex(v string) {
	o.Dex = v
}

// GetAmountIn returns the AmountIn field value
func (o *JettonSwapAction) GetAmountIn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountIn
}

// GetAmountInOk returns a tuple with the AmountIn field value
// and a boolean to check if the value has been set.
func (o *JettonSwapAction) GetAmountInOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountIn, true
}

// SetAmountIn sets field value
func (o *JettonSwapAction) SetAmountIn(v string) {
	o.AmountIn = v
}

// GetAmountOut returns the AmountOut field value
func (o *JettonSwapAction) GetAmountOut() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountOut
}

// GetAmountOutOk returns a tuple with the AmountOut field value
// and a boolean to check if the value has been set.
func (o *JettonSwapAction) GetAmountOutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountOut, true
}

// SetAmountOut sets field value
func (o *JettonSwapAction) SetAmountOut(v string) {
	o.AmountOut = v
}

// GetTonIn returns the TonIn field value if set, zero value otherwise.
func (o *JettonSwapAction) GetTonIn() int64 {
	if o == nil || IsNil(o.TonIn) {
		var ret int64
		return ret
	}
	return *o.TonIn
}

// GetTonInOk returns a tuple with the TonIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonSwapAction) GetTonInOk() (*int64, bool) {
	if o == nil || IsNil(o.TonIn) {
		return nil, false
	}
	return o.TonIn, true
}

// HasTonIn returns a boolean if a field has been set.
func (o *JettonSwapAction) HasTonIn() bool {
	if o != nil && !IsNil(o.TonIn) {
		return true
	}

	return false
}

// SetTonIn gets a reference to the given int64 and assigns it to the TonIn field.
func (o *JettonSwapAction) SetTonIn(v int64) {
	o.TonIn = &v
}

// GetTonOut returns the TonOut field value if set, zero value otherwise.
func (o *JettonSwapAction) GetTonOut() int64 {
	if o == nil || IsNil(o.TonOut) {
		var ret int64
		return ret
	}
	return *o.TonOut
}

// GetTonOutOk returns a tuple with the TonOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonSwapAction) GetTonOutOk() (*int64, bool) {
	if o == nil || IsNil(o.TonOut) {
		return nil, false
	}
	return o.TonOut, true
}

// HasTonOut returns a boolean if a field has been set.
func (o *JettonSwapAction) HasTonOut() bool {
	if o != nil && !IsNil(o.TonOut) {
		return true
	}

	return false
}

// SetTonOut gets a reference to the given int64 and assigns it to the TonOut field.
func (o *JettonSwapAction) SetTonOut(v int64) {
	o.TonOut = &v
}

// GetUserWallet returns the UserWallet field value
func (o *JettonSwapAction) GetUserWallet() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.UserWallet
}

// GetUserWalletOk returns a tuple with the UserWallet field value
// and a boolean to check if the value has been set.
func (o *JettonSwapAction) GetUserWalletOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserWallet, true
}

// SetUserWallet sets field value
func (o *JettonSwapAction) SetUserWallet(v AccountAddress) {
	o.UserWallet = v
}

// GetRouter returns the Router field value
func (o *JettonSwapAction) GetRouter() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Router
}

// GetRouterOk returns a tuple with the Router field value
// and a boolean to check if the value has been set.
func (o *JettonSwapAction) GetRouterOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Router, true
}

// SetRouter sets field value
func (o *JettonSwapAction) SetRouter(v AccountAddress) {
	o.Router = v
}

// GetJettonMasterIn returns the JettonMasterIn field value if set, zero value otherwise.
func (o *JettonSwapAction) GetJettonMasterIn() JettonPreview {
	if o == nil || IsNil(o.JettonMasterIn) {
		var ret JettonPreview
		return ret
	}
	return *o.JettonMasterIn
}

// GetJettonMasterInOk returns a tuple with the JettonMasterIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonSwapAction) GetJettonMasterInOk() (*JettonPreview, bool) {
	if o == nil || IsNil(o.JettonMasterIn) {
		return nil, false
	}
	return o.JettonMasterIn, true
}

// HasJettonMasterIn returns a boolean if a field has been set.
func (o *JettonSwapAction) HasJettonMasterIn() bool {
	if o != nil && !IsNil(o.JettonMasterIn) {
		return true
	}

	return false
}

// SetJettonMasterIn gets a reference to the given JettonPreview and assigns it to the JettonMasterIn field.
func (o *JettonSwapAction) SetJettonMasterIn(v JettonPreview) {
	o.JettonMasterIn = &v
}

// GetJettonMasterOut returns the JettonMasterOut field value if set, zero value otherwise.
func (o *JettonSwapAction) GetJettonMasterOut() JettonPreview {
	if o == nil || IsNil(o.JettonMasterOut) {
		var ret JettonPreview
		return ret
	}
	return *o.JettonMasterOut
}

// GetJettonMasterOutOk returns a tuple with the JettonMasterOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonSwapAction) GetJettonMasterOutOk() (*JettonPreview, bool) {
	if o == nil || IsNil(o.JettonMasterOut) {
		return nil, false
	}
	return o.JettonMasterOut, true
}

// HasJettonMasterOut returns a boolean if a field has been set.
func (o *JettonSwapAction) HasJettonMasterOut() bool {
	if o != nil && !IsNil(o.JettonMasterOut) {
		return true
	}

	return false
}

// SetJettonMasterOut gets a reference to the given JettonPreview and assigns it to the JettonMasterOut field.
func (o *JettonSwapAction) SetJettonMasterOut(v JettonPreview) {
	o.JettonMasterOut = &v
}

func (o JettonSwapAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonSwapAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dex"] = o.Dex
	toSerialize["amount_in"] = o.AmountIn
	toSerialize["amount_out"] = o.AmountOut
	if !IsNil(o.TonIn) {
		toSerialize["ton_in"] = o.TonIn
	}
	if !IsNil(o.TonOut) {
		toSerialize["ton_out"] = o.TonOut
	}
	toSerialize["user_wallet"] = o.UserWallet
	toSerialize["router"] = o.Router
	if !IsNil(o.JettonMasterIn) {
		toSerialize["jetton_master_in"] = o.JettonMasterIn
	}
	if !IsNil(o.JettonMasterOut) {
		toSerialize["jetton_master_out"] = o.JettonMasterOut
	}
	return toSerialize, nil
}

func (o *JettonSwapAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dex",
		"amount_in",
		"amount_out",
		"user_wallet",
		"router",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonSwapAction := _JettonSwapAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonSwapAction)

	if err != nil {
		return err
	}

	*o = JettonSwapAction(varJettonSwapAction)

	return err
}

type NullableJettonSwapAction struct {
	value *JettonSwapAction
	isSet bool
}

func (v NullableJettonSwapAction) Get() *JettonSwapAction {
	return v.value
}

func (v *NullableJettonSwapAction) Set(val *JettonSwapAction) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonSwapAction) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonSwapAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonSwapAction(val *JettonSwapAction) *NullableJettonSwapAction {
	return &NullableJettonSwapAction{value: val, isSet: true}
}

func (v NullableJettonSwapAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonSwapAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


