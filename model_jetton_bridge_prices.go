/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonBridgePrices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonBridgePrices{}

// JettonBridgePrices struct for JettonBridgePrices
type JettonBridgePrices struct {
	BridgeBurnFee int64 `json:"bridge_burn_fee"`
	BridgeMintFee int64 `json:"bridge_mint_fee"`
	WalletMinTonsForStorage int64 `json:"wallet_min_tons_for_storage"`
	WalletGasConsumption int64 `json:"wallet_gas_consumption"`
	MinterMinTonsForStorage int64 `json:"minter_min_tons_for_storage"`
	DiscoverGasConsumption int64 `json:"discover_gas_consumption"`
}

type _JettonBridgePrices JettonBridgePrices

// NewJettonBridgePrices instantiates a new JettonBridgePrices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonBridgePrices(bridgeBurnFee int64, bridgeMintFee int64, walletMinTonsForStorage int64, walletGasConsumption int64, minterMinTonsForStorage int64, discoverGasConsumption int64) *JettonBridgePrices {
	this := JettonBridgePrices{}
	this.BridgeBurnFee = bridgeBurnFee
	this.BridgeMintFee = bridgeMintFee
	this.WalletMinTonsForStorage = walletMinTonsForStorage
	this.WalletGasConsumption = walletGasConsumption
	this.MinterMinTonsForStorage = minterMinTonsForStorage
	this.DiscoverGasConsumption = discoverGasConsumption
	return &this
}

// NewJettonBridgePricesWithDefaults instantiates a new JettonBridgePrices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonBridgePricesWithDefaults() *JettonBridgePrices {
	this := JettonBridgePrices{}
	return &this
}

// GetBridgeBurnFee returns the BridgeBurnFee field value
func (o *JettonBridgePrices) GetBridgeBurnFee() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BridgeBurnFee
}

// GetBridgeBurnFeeOk returns a tuple with the BridgeBurnFee field value
// and a boolean to check if the value has been set.
func (o *JettonBridgePrices) GetBridgeBurnFeeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BridgeBurnFee, true
}

// SetBridgeBurnFee sets field value
func (o *JettonBridgePrices) SetBridgeBurnFee(v int64) {
	o.BridgeBurnFee = v
}

// GetBridgeMintFee returns the BridgeMintFee field value
func (o *JettonBridgePrices) GetBridgeMintFee() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BridgeMintFee
}

// GetBridgeMintFeeOk returns a tuple with the BridgeMintFee field value
// and a boolean to check if the value has been set.
func (o *JettonBridgePrices) GetBridgeMintFeeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BridgeMintFee, true
}

// SetBridgeMintFee sets field value
func (o *JettonBridgePrices) SetBridgeMintFee(v int64) {
	o.BridgeMintFee = v
}

// GetWalletMinTonsForStorage returns the WalletMinTonsForStorage field value
func (o *JettonBridgePrices) GetWalletMinTonsForStorage() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.WalletMinTonsForStorage
}

// GetWalletMinTonsForStorageOk returns a tuple with the WalletMinTonsForStorage field value
// and a boolean to check if the value has been set.
func (o *JettonBridgePrices) GetWalletMinTonsForStorageOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletMinTonsForStorage, true
}

// SetWalletMinTonsForStorage sets field value
func (o *JettonBridgePrices) SetWalletMinTonsForStorage(v int64) {
	o.WalletMinTonsForStorage = v
}

// GetWalletGasConsumption returns the WalletGasConsumption field value
func (o *JettonBridgePrices) GetWalletGasConsumption() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.WalletGasConsumption
}

// GetWalletGasConsumptionOk returns a tuple with the WalletGasConsumption field value
// and a boolean to check if the value has been set.
func (o *JettonBridgePrices) GetWalletGasConsumptionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletGasConsumption, true
}

// SetWalletGasConsumption sets field value
func (o *JettonBridgePrices) SetWalletGasConsumption(v int64) {
	o.WalletGasConsumption = v
}

// GetMinterMinTonsForStorage returns the MinterMinTonsForStorage field value
func (o *JettonBridgePrices) GetMinterMinTonsForStorage() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinterMinTonsForStorage
}

// GetMinterMinTonsForStorageOk returns a tuple with the MinterMinTonsForStorage field value
// and a boolean to check if the value has been set.
func (o *JettonBridgePrices) GetMinterMinTonsForStorageOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinterMinTonsForStorage, true
}

// SetMinterMinTonsForStorage sets field value
func (o *JettonBridgePrices) SetMinterMinTonsForStorage(v int64) {
	o.MinterMinTonsForStorage = v
}

// GetDiscoverGasConsumption returns the DiscoverGasConsumption field value
func (o *JettonBridgePrices) GetDiscoverGasConsumption() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DiscoverGasConsumption
}

// GetDiscoverGasConsumptionOk returns a tuple with the DiscoverGasConsumption field value
// and a boolean to check if the value has been set.
func (o *JettonBridgePrices) GetDiscoverGasConsumptionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscoverGasConsumption, true
}

// SetDiscoverGasConsumption sets field value
func (o *JettonBridgePrices) SetDiscoverGasConsumption(v int64) {
	o.DiscoverGasConsumption = v
}

func (o JettonBridgePrices) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonBridgePrices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bridge_burn_fee"] = o.BridgeBurnFee
	toSerialize["bridge_mint_fee"] = o.BridgeMintFee
	toSerialize["wallet_min_tons_for_storage"] = o.WalletMinTonsForStorage
	toSerialize["wallet_gas_consumption"] = o.WalletGasConsumption
	toSerialize["minter_min_tons_for_storage"] = o.MinterMinTonsForStorage
	toSerialize["discover_gas_consumption"] = o.DiscoverGasConsumption
	return toSerialize, nil
}

func (o *JettonBridgePrices) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bridge_burn_fee",
		"bridge_mint_fee",
		"wallet_min_tons_for_storage",
		"wallet_gas_consumption",
		"minter_min_tons_for_storage",
		"discover_gas_consumption",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonBridgePrices := _JettonBridgePrices{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonBridgePrices)

	if err != nil {
		return err
	}

	*o = JettonBridgePrices(varJettonBridgePrices)

	return err
}

type NullableJettonBridgePrices struct {
	value *JettonBridgePrices
	isSet bool
}

func (v NullableJettonBridgePrices) Get() *JettonBridgePrices {
	return v.value
}

func (v *NullableJettonBridgePrices) Set(val *JettonBridgePrices) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonBridgePrices) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonBridgePrices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonBridgePrices(val *JettonBridgePrices) *NullableJettonBridgePrices {
	return &NullableJettonBridgePrices{value: val, isSet: true}
}

func (v NullableJettonBridgePrices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonBridgePrices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


