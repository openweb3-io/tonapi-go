/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonTransferAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonTransferAction{}

// JettonTransferAction struct for JettonTransferAction
type JettonTransferAction struct {
	Sender *AccountAddress `json:"sender,omitempty"`
	Recipient *AccountAddress `json:"recipient,omitempty"`
	SendersWallet string `json:"senders_wallet"`
	RecipientsWallet string `json:"recipients_wallet"`
	// amount in quanta of tokens
	Amount string `json:"amount"`
	Comment *string `json:"comment,omitempty"`
	EncryptedComment *EncryptedComment `json:"encrypted_comment,omitempty"`
	Refund *Refund `json:"refund,omitempty"`
	Jetton JettonPreview `json:"jetton"`
}

type _JettonTransferAction JettonTransferAction

// NewJettonTransferAction instantiates a new JettonTransferAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonTransferAction(sendersWallet string, recipientsWallet string, amount string, jetton JettonPreview) *JettonTransferAction {
	this := JettonTransferAction{}
	this.SendersWallet = sendersWallet
	this.RecipientsWallet = recipientsWallet
	this.Amount = amount
	this.Jetton = jetton
	return &this
}

// NewJettonTransferActionWithDefaults instantiates a new JettonTransferAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonTransferActionWithDefaults() *JettonTransferAction {
	this := JettonTransferAction{}
	return &this
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *JettonTransferAction) GetSender() AccountAddress {
	if o == nil || IsNil(o.Sender) {
		var ret AccountAddress
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonTransferAction) GetSenderOk() (*AccountAddress, bool) {
	if o == nil || IsNil(o.Sender) {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *JettonTransferAction) HasSender() bool {
	if o != nil && !IsNil(o.Sender) {
		return true
	}

	return false
}

// SetSender gets a reference to the given AccountAddress and assigns it to the Sender field.
func (o *JettonTransferAction) SetSender(v AccountAddress) {
	o.Sender = &v
}

// GetRecipient returns the Recipient field value if set, zero value otherwise.
func (o *JettonTransferAction) GetRecipient() AccountAddress {
	if o == nil || IsNil(o.Recipient) {
		var ret AccountAddress
		return ret
	}
	return *o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonTransferAction) GetRecipientOk() (*AccountAddress, bool) {
	if o == nil || IsNil(o.Recipient) {
		return nil, false
	}
	return o.Recipient, true
}

// HasRecipient returns a boolean if a field has been set.
func (o *JettonTransferAction) HasRecipient() bool {
	if o != nil && !IsNil(o.Recipient) {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given AccountAddress and assigns it to the Recipient field.
func (o *JettonTransferAction) SetRecipient(v AccountAddress) {
	o.Recipient = &v
}

// GetSendersWallet returns the SendersWallet field value
func (o *JettonTransferAction) GetSendersWallet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SendersWallet
}

// GetSendersWalletOk returns a tuple with the SendersWallet field value
// and a boolean to check if the value has been set.
func (o *JettonTransferAction) GetSendersWalletOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SendersWallet, true
}

// SetSendersWallet sets field value
func (o *JettonTransferAction) SetSendersWallet(v string) {
	o.SendersWallet = v
}

// GetRecipientsWallet returns the RecipientsWallet field value
func (o *JettonTransferAction) GetRecipientsWallet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecipientsWallet
}

// GetRecipientsWalletOk returns a tuple with the RecipientsWallet field value
// and a boolean to check if the value has been set.
func (o *JettonTransferAction) GetRecipientsWalletOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecipientsWallet, true
}

// SetRecipientsWallet sets field value
func (o *JettonTransferAction) SetRecipientsWallet(v string) {
	o.RecipientsWallet = v
}

// GetAmount returns the Amount field value
func (o *JettonTransferAction) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *JettonTransferAction) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *JettonTransferAction) SetAmount(v string) {
	o.Amount = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *JettonTransferAction) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonTransferAction) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *JettonTransferAction) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *JettonTransferAction) SetComment(v string) {
	o.Comment = &v
}

// GetEncryptedComment returns the EncryptedComment field value if set, zero value otherwise.
func (o *JettonTransferAction) GetEncryptedComment() EncryptedComment {
	if o == nil || IsNil(o.EncryptedComment) {
		var ret EncryptedComment
		return ret
	}
	return *o.EncryptedComment
}

// GetEncryptedCommentOk returns a tuple with the EncryptedComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonTransferAction) GetEncryptedCommentOk() (*EncryptedComment, bool) {
	if o == nil || IsNil(o.EncryptedComment) {
		return nil, false
	}
	return o.EncryptedComment, true
}

// HasEncryptedComment returns a boolean if a field has been set.
func (o *JettonTransferAction) HasEncryptedComment() bool {
	if o != nil && !IsNil(o.EncryptedComment) {
		return true
	}

	return false
}

// SetEncryptedComment gets a reference to the given EncryptedComment and assigns it to the EncryptedComment field.
func (o *JettonTransferAction) SetEncryptedComment(v EncryptedComment) {
	o.EncryptedComment = &v
}

// GetRefund returns the Refund field value if set, zero value otherwise.
func (o *JettonTransferAction) GetRefund() Refund {
	if o == nil || IsNil(o.Refund) {
		var ret Refund
		return ret
	}
	return *o.Refund
}

// GetRefundOk returns a tuple with the Refund field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonTransferAction) GetRefundOk() (*Refund, bool) {
	if o == nil || IsNil(o.Refund) {
		return nil, false
	}
	return o.Refund, true
}

// HasRefund returns a boolean if a field has been set.
func (o *JettonTransferAction) HasRefund() bool {
	if o != nil && !IsNil(o.Refund) {
		return true
	}

	return false
}

// SetRefund gets a reference to the given Refund and assigns it to the Refund field.
func (o *JettonTransferAction) SetRefund(v Refund) {
	o.Refund = &v
}

// GetJetton returns the Jetton field value
func (o *JettonTransferAction) GetJetton() JettonPreview {
	if o == nil {
		var ret JettonPreview
		return ret
	}

	return o.Jetton
}

// GetJettonOk returns a tuple with the Jetton field value
// and a boolean to check if the value has been set.
func (o *JettonTransferAction) GetJettonOk() (*JettonPreview, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jetton, true
}

// SetJetton sets field value
func (o *JettonTransferAction) SetJetton(v JettonPreview) {
	o.Jetton = v
}

func (o JettonTransferAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonTransferAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sender) {
		toSerialize["sender"] = o.Sender
	}
	if !IsNil(o.Recipient) {
		toSerialize["recipient"] = o.Recipient
	}
	toSerialize["senders_wallet"] = o.SendersWallet
	toSerialize["recipients_wallet"] = o.RecipientsWallet
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.EncryptedComment) {
		toSerialize["encrypted_comment"] = o.EncryptedComment
	}
	if !IsNil(o.Refund) {
		toSerialize["refund"] = o.Refund
	}
	toSerialize["jetton"] = o.Jetton
	return toSerialize, nil
}

func (o *JettonTransferAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"senders_wallet",
		"recipients_wallet",
		"amount",
		"jetton",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonTransferAction := _JettonTransferAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonTransferAction)

	if err != nil {
		return err
	}

	*o = JettonTransferAction(varJettonTransferAction)

	return err
}

type NullableJettonTransferAction struct {
	value *JettonTransferAction
	isSet bool
}

func (v NullableJettonTransferAction) Get() *JettonTransferAction {
	return v.value
}

func (v *NullableJettonTransferAction) Set(val *JettonTransferAction) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonTransferAction) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonTransferAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonTransferAction(val *JettonTransferAction) *NullableJettonTransferAction {
	return &NullableJettonTransferAction{value: val, isSet: true}
}

func (v NullableJettonTransferAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonTransferAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


