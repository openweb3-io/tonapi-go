/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountStakingInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountStakingInfo{}

// AccountStakingInfo struct for AccountStakingInfo
type AccountStakingInfo struct {
	Pool string `json:"pool"`
	Amount int64 `json:"amount"`
	PendingDeposit int64 `json:"pending_deposit"`
	PendingWithdraw int64 `json:"pending_withdraw"`
	ReadyWithdraw int64 `json:"ready_withdraw"`
}

type _AccountStakingInfo AccountStakingInfo

// NewAccountStakingInfo instantiates a new AccountStakingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountStakingInfo(pool string, amount int64, pendingDeposit int64, pendingWithdraw int64, readyWithdraw int64) *AccountStakingInfo {
	this := AccountStakingInfo{}
	this.Pool = pool
	this.Amount = amount
	this.PendingDeposit = pendingDeposit
	this.PendingWithdraw = pendingWithdraw
	this.ReadyWithdraw = readyWithdraw
	return &this
}

// NewAccountStakingInfoWithDefaults instantiates a new AccountStakingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountStakingInfoWithDefaults() *AccountStakingInfo {
	this := AccountStakingInfo{}
	return &this
}

// GetPool returns the Pool field value
func (o *AccountStakingInfo) GetPool() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pool
}

// GetPoolOk returns a tuple with the Pool field value
// and a boolean to check if the value has been set.
func (o *AccountStakingInfo) GetPoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pool, true
}

// SetPool sets field value
func (o *AccountStakingInfo) SetPool(v string) {
	o.Pool = v
}

// GetAmount returns the Amount field value
func (o *AccountStakingInfo) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AccountStakingInfo) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AccountStakingInfo) SetAmount(v int64) {
	o.Amount = v
}

// GetPendingDeposit returns the PendingDeposit field value
func (o *AccountStakingInfo) GetPendingDeposit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PendingDeposit
}

// GetPendingDepositOk returns a tuple with the PendingDeposit field value
// and a boolean to check if the value has been set.
func (o *AccountStakingInfo) GetPendingDepositOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingDeposit, true
}

// SetPendingDeposit sets field value
func (o *AccountStakingInfo) SetPendingDeposit(v int64) {
	o.PendingDeposit = v
}

// GetPendingWithdraw returns the PendingWithdraw field value
func (o *AccountStakingInfo) GetPendingWithdraw() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PendingWithdraw
}

// GetPendingWithdrawOk returns a tuple with the PendingWithdraw field value
// and a boolean to check if the value has been set.
func (o *AccountStakingInfo) GetPendingWithdrawOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingWithdraw, true
}

// SetPendingWithdraw sets field value
func (o *AccountStakingInfo) SetPendingWithdraw(v int64) {
	o.PendingWithdraw = v
}

// GetReadyWithdraw returns the ReadyWithdraw field value
func (o *AccountStakingInfo) GetReadyWithdraw() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ReadyWithdraw
}

// GetReadyWithdrawOk returns a tuple with the ReadyWithdraw field value
// and a boolean to check if the value has been set.
func (o *AccountStakingInfo) GetReadyWithdrawOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadyWithdraw, true
}

// SetReadyWithdraw sets field value
func (o *AccountStakingInfo) SetReadyWithdraw(v int64) {
	o.ReadyWithdraw = v
}

func (o AccountStakingInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountStakingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool"] = o.Pool
	toSerialize["amount"] = o.Amount
	toSerialize["pending_deposit"] = o.PendingDeposit
	toSerialize["pending_withdraw"] = o.PendingWithdraw
	toSerialize["ready_withdraw"] = o.ReadyWithdraw
	return toSerialize, nil
}

func (o *AccountStakingInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool",
		"amount",
		"pending_deposit",
		"pending_withdraw",
		"ready_withdraw",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountStakingInfo := _AccountStakingInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountStakingInfo)

	if err != nil {
		return err
	}

	*o = AccountStakingInfo(varAccountStakingInfo)

	return err
}

type NullableAccountStakingInfo struct {
	value *AccountStakingInfo
	isSet bool
}

func (v NullableAccountStakingInfo) Get() *AccountStakingInfo {
	return v.value
}

func (v *NullableAccountStakingInfo) Set(val *AccountStakingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountStakingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountStakingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountStakingInfo(val *AccountStakingInfo) *NullableAccountStakingInfo {
	return &NullableAccountStakingInfo{value: val, isSet: true}
}

func (v NullableAccountStakingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountStakingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


