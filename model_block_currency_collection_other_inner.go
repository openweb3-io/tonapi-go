/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockCurrencyCollectionOtherInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockCurrencyCollectionOtherInner{}

// BlockCurrencyCollectionOtherInner struct for BlockCurrencyCollectionOtherInner
type BlockCurrencyCollectionOtherInner struct {
	Id int64 `json:"id"`
	Value string `json:"value"`
}

type _BlockCurrencyCollectionOtherInner BlockCurrencyCollectionOtherInner

// NewBlockCurrencyCollectionOtherInner instantiates a new BlockCurrencyCollectionOtherInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockCurrencyCollectionOtherInner(id int64, value string) *BlockCurrencyCollectionOtherInner {
	this := BlockCurrencyCollectionOtherInner{}
	this.Id = id
	this.Value = value
	return &this
}

// NewBlockCurrencyCollectionOtherInnerWithDefaults instantiates a new BlockCurrencyCollectionOtherInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockCurrencyCollectionOtherInnerWithDefaults() *BlockCurrencyCollectionOtherInner {
	this := BlockCurrencyCollectionOtherInner{}
	return &this
}

// GetId returns the Id field value
func (o *BlockCurrencyCollectionOtherInner) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BlockCurrencyCollectionOtherInner) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BlockCurrencyCollectionOtherInner) SetId(v int64) {
	o.Id = v
}

// GetValue returns the Value field value
func (o *BlockCurrencyCollectionOtherInner) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *BlockCurrencyCollectionOtherInner) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *BlockCurrencyCollectionOtherInner) SetValue(v string) {
	o.Value = v
}

func (o BlockCurrencyCollectionOtherInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockCurrencyCollectionOtherInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *BlockCurrencyCollectionOtherInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockCurrencyCollectionOtherInner := _BlockCurrencyCollectionOtherInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockCurrencyCollectionOtherInner)

	if err != nil {
		return err
	}

	*o = BlockCurrencyCollectionOtherInner(varBlockCurrencyCollectionOtherInner)

	return err
}

type NullableBlockCurrencyCollectionOtherInner struct {
	value *BlockCurrencyCollectionOtherInner
	isSet bool
}

func (v NullableBlockCurrencyCollectionOtherInner) Get() *BlockCurrencyCollectionOtherInner {
	return v.value
}

func (v *NullableBlockCurrencyCollectionOtherInner) Set(val *BlockCurrencyCollectionOtherInner) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockCurrencyCollectionOtherInner) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockCurrencyCollectionOtherInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockCurrencyCollectionOtherInner(val *BlockCurrencyCollectionOtherInner) *NullableBlockCurrencyCollectionOtherInner {
	return &NullableBlockCurrencyCollectionOtherInner{value: val, isSet: true}
}

func (v NullableBlockCurrencyCollectionOtherInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockCurrencyCollectionOtherInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


