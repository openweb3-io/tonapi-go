/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetStakingPoolInfo200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetStakingPoolInfo200Response{}

// GetStakingPoolInfo200Response struct for GetStakingPoolInfo200Response
type GetStakingPoolInfo200Response struct {
	Implementation PoolImplementation `json:"implementation"`
	Pool PoolInfo `json:"pool"`
}

type _GetStakingPoolInfo200Response GetStakingPoolInfo200Response

// NewGetStakingPoolInfo200Response instantiates a new GetStakingPoolInfo200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetStakingPoolInfo200Response(implementation PoolImplementation, pool PoolInfo) *GetStakingPoolInfo200Response {
	this := GetStakingPoolInfo200Response{}
	this.Implementation = implementation
	this.Pool = pool
	return &this
}

// NewGetStakingPoolInfo200ResponseWithDefaults instantiates a new GetStakingPoolInfo200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetStakingPoolInfo200ResponseWithDefaults() *GetStakingPoolInfo200Response {
	this := GetStakingPoolInfo200Response{}
	return &this
}

// GetImplementation returns the Implementation field value
func (o *GetStakingPoolInfo200Response) GetImplementation() PoolImplementation {
	if o == nil {
		var ret PoolImplementation
		return ret
	}

	return o.Implementation
}

// GetImplementationOk returns a tuple with the Implementation field value
// and a boolean to check if the value has been set.
func (o *GetStakingPoolInfo200Response) GetImplementationOk() (*PoolImplementation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Implementation, true
}

// SetImplementation sets field value
func (o *GetStakingPoolInfo200Response) SetImplementation(v PoolImplementation) {
	o.Implementation = v
}

// GetPool returns the Pool field value
func (o *GetStakingPoolInfo200Response) GetPool() PoolInfo {
	if o == nil {
		var ret PoolInfo
		return ret
	}

	return o.Pool
}

// GetPoolOk returns a tuple with the Pool field value
// and a boolean to check if the value has been set.
func (o *GetStakingPoolInfo200Response) GetPoolOk() (*PoolInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pool, true
}

// SetPool sets field value
func (o *GetStakingPoolInfo200Response) SetPool(v PoolInfo) {
	o.Pool = v
}

func (o GetStakingPoolInfo200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetStakingPoolInfo200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["implementation"] = o.Implementation
	toSerialize["pool"] = o.Pool
	return toSerialize, nil
}

func (o *GetStakingPoolInfo200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"implementation",
		"pool",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetStakingPoolInfo200Response := _GetStakingPoolInfo200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetStakingPoolInfo200Response)

	if err != nil {
		return err
	}

	*o = GetStakingPoolInfo200Response(varGetStakingPoolInfo200Response)

	return err
}

type NullableGetStakingPoolInfo200Response struct {
	value *GetStakingPoolInfo200Response
	isSet bool
}

func (v NullableGetStakingPoolInfo200Response) Get() *GetStakingPoolInfo200Response {
	return v.value
}

func (v *NullableGetStakingPoolInfo200Response) Set(val *GetStakingPoolInfo200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetStakingPoolInfo200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetStakingPoolInfo200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetStakingPoolInfo200Response(val *GetStakingPoolInfo200Response) *NullableGetStakingPoolInfo200Response {
	return &NullableGetStakingPoolInfo200Response{value: val, isSet: true}
}

func (v NullableGetStakingPoolInfo200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetStakingPoolInfo200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


