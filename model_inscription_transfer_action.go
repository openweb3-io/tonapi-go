/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InscriptionTransferAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InscriptionTransferAction{}

// InscriptionTransferAction struct for InscriptionTransferAction
type InscriptionTransferAction struct {
	Sender AccountAddress `json:"sender"`
	Recipient AccountAddress `json:"recipient"`
	// amount in minimal particles
	Amount string `json:"amount"`
	Comment *string `json:"comment,omitempty"`
	Type string `json:"type"`
	Ticker string `json:"ticker"`
	Decimals int32 `json:"decimals"`
}

type _InscriptionTransferAction InscriptionTransferAction

// NewInscriptionTransferAction instantiates a new InscriptionTransferAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInscriptionTransferAction(sender AccountAddress, recipient AccountAddress, amount string, type_ string, ticker string, decimals int32) *InscriptionTransferAction {
	this := InscriptionTransferAction{}
	this.Sender = sender
	this.Recipient = recipient
	this.Amount = amount
	this.Type = type_
	this.Ticker = ticker
	this.Decimals = decimals
	return &this
}

// NewInscriptionTransferActionWithDefaults instantiates a new InscriptionTransferAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInscriptionTransferActionWithDefaults() *InscriptionTransferAction {
	this := InscriptionTransferAction{}
	return &this
}

// GetSender returns the Sender field value
func (o *InscriptionTransferAction) GetSender() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *InscriptionTransferAction) GetSenderOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *InscriptionTransferAction) SetSender(v AccountAddress) {
	o.Sender = v
}

// GetRecipient returns the Recipient field value
func (o *InscriptionTransferAction) GetRecipient() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value
// and a boolean to check if the value has been set.
func (o *InscriptionTransferAction) GetRecipientOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipient, true
}

// SetRecipient sets field value
func (o *InscriptionTransferAction) SetRecipient(v AccountAddress) {
	o.Recipient = v
}

// GetAmount returns the Amount field value
func (o *InscriptionTransferAction) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *InscriptionTransferAction) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *InscriptionTransferAction) SetAmount(v string) {
	o.Amount = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *InscriptionTransferAction) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InscriptionTransferAction) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *InscriptionTransferAction) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *InscriptionTransferAction) SetComment(v string) {
	o.Comment = &v
}

// GetType returns the Type field value
func (o *InscriptionTransferAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InscriptionTransferAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InscriptionTransferAction) SetType(v string) {
	o.Type = v
}

// GetTicker returns the Ticker field value
func (o *InscriptionTransferAction) GetTicker() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value
// and a boolean to check if the value has been set.
func (o *InscriptionTransferAction) GetTickerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ticker, true
}

// SetTicker sets field value
func (o *InscriptionTransferAction) SetTicker(v string) {
	o.Ticker = v
}

// GetDecimals returns the Decimals field value
func (o *InscriptionTransferAction) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *InscriptionTransferAction) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *InscriptionTransferAction) SetDecimals(v int32) {
	o.Decimals = v
}

func (o InscriptionTransferAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InscriptionTransferAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sender"] = o.Sender
	toSerialize["recipient"] = o.Recipient
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	toSerialize["type"] = o.Type
	toSerialize["ticker"] = o.Ticker
	toSerialize["decimals"] = o.Decimals
	return toSerialize, nil
}

func (o *InscriptionTransferAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sender",
		"recipient",
		"amount",
		"type",
		"ticker",
		"decimals",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInscriptionTransferAction := _InscriptionTransferAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInscriptionTransferAction)

	if err != nil {
		return err
	}

	*o = InscriptionTransferAction(varInscriptionTransferAction)

	return err
}

type NullableInscriptionTransferAction struct {
	value *InscriptionTransferAction
	isSet bool
}

func (v NullableInscriptionTransferAction) Get() *InscriptionTransferAction {
	return v.value
}

func (v *NullableInscriptionTransferAction) Set(val *InscriptionTransferAction) {
	v.value = val
	v.isSet = true
}

func (v NullableInscriptionTransferAction) IsSet() bool {
	return v.isSet
}

func (v *NullableInscriptionTransferAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInscriptionTransferAction(val *InscriptionTransferAction) *NullableInscriptionTransferAction {
	return &NullableInscriptionTransferAction{value: val, isSet: true}
}

func (v NullableInscriptionTransferAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInscriptionTransferAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


