/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountEvents{}

// AccountEvents struct for AccountEvents
type AccountEvents struct {
	Events []AccountEvent `json:"events"`
	NextFrom int64 `json:"next_from"`
}

type _AccountEvents AccountEvents

// NewAccountEvents instantiates a new AccountEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountEvents(events []AccountEvent, nextFrom int64) *AccountEvents {
	this := AccountEvents{}
	this.Events = events
	this.NextFrom = nextFrom
	return &this
}

// NewAccountEventsWithDefaults instantiates a new AccountEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountEventsWithDefaults() *AccountEvents {
	this := AccountEvents{}
	return &this
}

// GetEvents returns the Events field value
func (o *AccountEvents) GetEvents() []AccountEvent {
	if o == nil {
		var ret []AccountEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *AccountEvents) GetEventsOk() ([]AccountEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *AccountEvents) SetEvents(v []AccountEvent) {
	o.Events = v
}

// GetNextFrom returns the NextFrom field value
func (o *AccountEvents) GetNextFrom() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NextFrom
}

// GetNextFromOk returns a tuple with the NextFrom field value
// and a boolean to check if the value has been set.
func (o *AccountEvents) GetNextFromOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextFrom, true
}

// SetNextFrom sets field value
func (o *AccountEvents) SetNextFrom(v int64) {
	o.NextFrom = v
}

func (o AccountEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	toSerialize["next_from"] = o.NextFrom
	return toSerialize, nil
}

func (o *AccountEvents) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"events",
		"next_from",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountEvents := _AccountEvents{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountEvents)

	if err != nil {
		return err
	}

	*o = AccountEvents(varAccountEvents)

	return err
}

type NullableAccountEvents struct {
	value *AccountEvents
	isSet bool
}

func (v NullableAccountEvents) Get() *AccountEvents {
	return v.value
}

func (v *NullableAccountEvents) Set(val *AccountEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountEvents(val *AccountEvents) *NullableAccountEvents {
	return &NullableAccountEvents{value: val, isSet: true}
}

func (v NullableAccountEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


