/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReducedBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReducedBlock{}

// ReducedBlock struct for ReducedBlock
type ReducedBlock struct {
	WorkchainId int32 `json:"workchain_id"`
	Shard string `json:"shard"`
	Seqno int32 `json:"seqno"`
	MasterRef *string `json:"master_ref,omitempty"`
	TxQuantity int32 `json:"tx_quantity"`
	Utime int64 `json:"utime"`
	ShardsBlocks []string `json:"shards_blocks"`
}

type _ReducedBlock ReducedBlock

// NewReducedBlock instantiates a new ReducedBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReducedBlock(workchainId int32, shard string, seqno int32, txQuantity int32, utime int64, shardsBlocks []string) *ReducedBlock {
	this := ReducedBlock{}
	this.WorkchainId = workchainId
	this.Shard = shard
	this.Seqno = seqno
	this.TxQuantity = txQuantity
	this.Utime = utime
	this.ShardsBlocks = shardsBlocks
	return &this
}

// NewReducedBlockWithDefaults instantiates a new ReducedBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReducedBlockWithDefaults() *ReducedBlock {
	this := ReducedBlock{}
	return &this
}

// GetWorkchainId returns the WorkchainId field value
func (o *ReducedBlock) GetWorkchainId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WorkchainId
}

// GetWorkchainIdOk returns a tuple with the WorkchainId field value
// and a boolean to check if the value has been set.
func (o *ReducedBlock) GetWorkchainIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkchainId, true
}

// SetWorkchainId sets field value
func (o *ReducedBlock) SetWorkchainId(v int32) {
	o.WorkchainId = v
}

// GetShard returns the Shard field value
func (o *ReducedBlock) GetShard() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Shard
}

// GetShardOk returns a tuple with the Shard field value
// and a boolean to check if the value has been set.
func (o *ReducedBlock) GetShardOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shard, true
}

// SetShard sets field value
func (o *ReducedBlock) SetShard(v string) {
	o.Shard = v
}

// GetSeqno returns the Seqno field value
func (o *ReducedBlock) GetSeqno() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Seqno
}

// GetSeqnoOk returns a tuple with the Seqno field value
// and a boolean to check if the value has been set.
func (o *ReducedBlock) GetSeqnoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seqno, true
}

// SetSeqno sets field value
func (o *ReducedBlock) SetSeqno(v int32) {
	o.Seqno = v
}

// GetMasterRef returns the MasterRef field value if set, zero value otherwise.
func (o *ReducedBlock) GetMasterRef() string {
	if o == nil || IsNil(o.MasterRef) {
		var ret string
		return ret
	}
	return *o.MasterRef
}

// GetMasterRefOk returns a tuple with the MasterRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReducedBlock) GetMasterRefOk() (*string, bool) {
	if o == nil || IsNil(o.MasterRef) {
		return nil, false
	}
	return o.MasterRef, true
}

// HasMasterRef returns a boolean if a field has been set.
func (o *ReducedBlock) HasMasterRef() bool {
	if o != nil && !IsNil(o.MasterRef) {
		return true
	}

	return false
}

// SetMasterRef gets a reference to the given string and assigns it to the MasterRef field.
func (o *ReducedBlock) SetMasterRef(v string) {
	o.MasterRef = &v
}

// GetTxQuantity returns the TxQuantity field value
func (o *ReducedBlock) GetTxQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TxQuantity
}

// GetTxQuantityOk returns a tuple with the TxQuantity field value
// and a boolean to check if the value has been set.
func (o *ReducedBlock) GetTxQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxQuantity, true
}

// SetTxQuantity sets field value
func (o *ReducedBlock) SetTxQuantity(v int32) {
	o.TxQuantity = v
}

// GetUtime returns the Utime field value
func (o *ReducedBlock) GetUtime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Utime
}

// GetUtimeOk returns a tuple with the Utime field value
// and a boolean to check if the value has been set.
func (o *ReducedBlock) GetUtimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Utime, true
}

// SetUtime sets field value
func (o *ReducedBlock) SetUtime(v int64) {
	o.Utime = v
}

// GetShardsBlocks returns the ShardsBlocks field value
func (o *ReducedBlock) GetShardsBlocks() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ShardsBlocks
}

// GetShardsBlocksOk returns a tuple with the ShardsBlocks field value
// and a boolean to check if the value has been set.
func (o *ReducedBlock) GetShardsBlocksOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShardsBlocks, true
}

// SetShardsBlocks sets field value
func (o *ReducedBlock) SetShardsBlocks(v []string) {
	o.ShardsBlocks = v
}

func (o ReducedBlock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReducedBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workchain_id"] = o.WorkchainId
	toSerialize["shard"] = o.Shard
	toSerialize["seqno"] = o.Seqno
	if !IsNil(o.MasterRef) {
		toSerialize["master_ref"] = o.MasterRef
	}
	toSerialize["tx_quantity"] = o.TxQuantity
	toSerialize["utime"] = o.Utime
	toSerialize["shards_blocks"] = o.ShardsBlocks
	return toSerialize, nil
}

func (o *ReducedBlock) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workchain_id",
		"shard",
		"seqno",
		"tx_quantity",
		"utime",
		"shards_blocks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReducedBlock := _ReducedBlock{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReducedBlock)

	if err != nil {
		return err
	}

	*o = ReducedBlock(varReducedBlock)

	return err
}

type NullableReducedBlock struct {
	value *ReducedBlock
	isSet bool
}

func (v NullableReducedBlock) Get() *ReducedBlock {
	return v.value
}

func (v *NullableReducedBlock) Set(val *ReducedBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableReducedBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableReducedBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReducedBlock(val *ReducedBlock) *NullableReducedBlock {
	return &NullableReducedBlock{value: val, isSet: true}
}

func (v NullableReducedBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReducedBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


