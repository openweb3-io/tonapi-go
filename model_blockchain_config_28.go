/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig28 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig28{}

// BlockchainConfig28 The configuration for the Catchain protocol.
type BlockchainConfig28 struct {
	McCatchainLifetime int64 `json:"mc_catchain_lifetime"`
	ShardCatchainLifetime int64 `json:"shard_catchain_lifetime"`
	ShardValidatorsLifetime int64 `json:"shard_validators_lifetime"`
	ShardValidatorsNum int64 `json:"shard_validators_num"`
	Flags *int32 `json:"flags,omitempty"`
	ShuffleMcValidators *bool `json:"shuffle_mc_validators,omitempty"`
}

type _BlockchainConfig28 BlockchainConfig28

// NewBlockchainConfig28 instantiates a new BlockchainConfig28 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig28(mcCatchainLifetime int64, shardCatchainLifetime int64, shardValidatorsLifetime int64, shardValidatorsNum int64) *BlockchainConfig28 {
	this := BlockchainConfig28{}
	this.McCatchainLifetime = mcCatchainLifetime
	this.ShardCatchainLifetime = shardCatchainLifetime
	this.ShardValidatorsLifetime = shardValidatorsLifetime
	this.ShardValidatorsNum = shardValidatorsNum
	return &this
}

// NewBlockchainConfig28WithDefaults instantiates a new BlockchainConfig28 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig28WithDefaults() *BlockchainConfig28 {
	this := BlockchainConfig28{}
	return &this
}

// GetMcCatchainLifetime returns the McCatchainLifetime field value
func (o *BlockchainConfig28) GetMcCatchainLifetime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.McCatchainLifetime
}

// GetMcCatchainLifetimeOk returns a tuple with the McCatchainLifetime field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig28) GetMcCatchainLifetimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.McCatchainLifetime, true
}

// SetMcCatchainLifetime sets field value
func (o *BlockchainConfig28) SetMcCatchainLifetime(v int64) {
	o.McCatchainLifetime = v
}

// GetShardCatchainLifetime returns the ShardCatchainLifetime field value
func (o *BlockchainConfig28) GetShardCatchainLifetime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ShardCatchainLifetime
}

// GetShardCatchainLifetimeOk returns a tuple with the ShardCatchainLifetime field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig28) GetShardCatchainLifetimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShardCatchainLifetime, true
}

// SetShardCatchainLifetime sets field value
func (o *BlockchainConfig28) SetShardCatchainLifetime(v int64) {
	o.ShardCatchainLifetime = v
}

// GetShardValidatorsLifetime returns the ShardValidatorsLifetime field value
func (o *BlockchainConfig28) GetShardValidatorsLifetime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ShardValidatorsLifetime
}

// GetShardValidatorsLifetimeOk returns a tuple with the ShardValidatorsLifetime field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig28) GetShardValidatorsLifetimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShardValidatorsLifetime, true
}

// SetShardValidatorsLifetime sets field value
func (o *BlockchainConfig28) SetShardValidatorsLifetime(v int64) {
	o.ShardValidatorsLifetime = v
}

// GetShardValidatorsNum returns the ShardValidatorsNum field value
func (o *BlockchainConfig28) GetShardValidatorsNum() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ShardValidatorsNum
}

// GetShardValidatorsNumOk returns a tuple with the ShardValidatorsNum field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig28) GetShardValidatorsNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShardValidatorsNum, true
}

// SetShardValidatorsNum sets field value
func (o *BlockchainConfig28) SetShardValidatorsNum(v int64) {
	o.ShardValidatorsNum = v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *BlockchainConfig28) GetFlags() int32 {
	if o == nil || IsNil(o.Flags) {
		var ret int32
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockchainConfig28) GetFlagsOk() (*int32, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *BlockchainConfig28) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given int32 and assigns it to the Flags field.
func (o *BlockchainConfig28) SetFlags(v int32) {
	o.Flags = &v
}

// GetShuffleMcValidators returns the ShuffleMcValidators field value if set, zero value otherwise.
func (o *BlockchainConfig28) GetShuffleMcValidators() bool {
	if o == nil || IsNil(o.ShuffleMcValidators) {
		var ret bool
		return ret
	}
	return *o.ShuffleMcValidators
}

// GetShuffleMcValidatorsOk returns a tuple with the ShuffleMcValidators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockchainConfig28) GetShuffleMcValidatorsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShuffleMcValidators) {
		return nil, false
	}
	return o.ShuffleMcValidators, true
}

// HasShuffleMcValidators returns a boolean if a field has been set.
func (o *BlockchainConfig28) HasShuffleMcValidators() bool {
	if o != nil && !IsNil(o.ShuffleMcValidators) {
		return true
	}

	return false
}

// SetShuffleMcValidators gets a reference to the given bool and assigns it to the ShuffleMcValidators field.
func (o *BlockchainConfig28) SetShuffleMcValidators(v bool) {
	o.ShuffleMcValidators = &v
}

func (o BlockchainConfig28) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig28) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mc_catchain_lifetime"] = o.McCatchainLifetime
	toSerialize["shard_catchain_lifetime"] = o.ShardCatchainLifetime
	toSerialize["shard_validators_lifetime"] = o.ShardValidatorsLifetime
	toSerialize["shard_validators_num"] = o.ShardValidatorsNum
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	if !IsNil(o.ShuffleMcValidators) {
		toSerialize["shuffle_mc_validators"] = o.ShuffleMcValidators
	}
	return toSerialize, nil
}

func (o *BlockchainConfig28) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mc_catchain_lifetime",
		"shard_catchain_lifetime",
		"shard_validators_lifetime",
		"shard_validators_num",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig28 := _BlockchainConfig28{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig28)

	if err != nil {
		return err
	}

	*o = BlockchainConfig28(varBlockchainConfig28)

	return err
}

type NullableBlockchainConfig28 struct {
	value *BlockchainConfig28
	isSet bool
}

func (v NullableBlockchainConfig28) Get() *BlockchainConfig28 {
	return v.value
}

func (v *NullableBlockchainConfig28) Set(val *BlockchainConfig28) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig28) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig28) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig28(val *BlockchainConfig28) *NullableBlockchainConfig28 {
	return &NullableBlockchainConfig28{value: val, isSet: true}
}

func (v NullableBlockchainConfig28) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig28) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


