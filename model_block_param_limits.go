/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockParamLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockParamLimits{}

// BlockParamLimits struct for BlockParamLimits
type BlockParamLimits struct {
	Underload int64 `json:"underload"`
	SoftLimit int64 `json:"soft_limit"`
	HardLimit int64 `json:"hard_limit"`
}

type _BlockParamLimits BlockParamLimits

// NewBlockParamLimits instantiates a new BlockParamLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockParamLimits(underload int64, softLimit int64, hardLimit int64) *BlockParamLimits {
	this := BlockParamLimits{}
	this.Underload = underload
	this.SoftLimit = softLimit
	this.HardLimit = hardLimit
	return &this
}

// NewBlockParamLimitsWithDefaults instantiates a new BlockParamLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockParamLimitsWithDefaults() *BlockParamLimits {
	this := BlockParamLimits{}
	return &this
}

// GetUnderload returns the Underload field value
func (o *BlockParamLimits) GetUnderload() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Underload
}

// GetUnderloadOk returns a tuple with the Underload field value
// and a boolean to check if the value has been set.
func (o *BlockParamLimits) GetUnderloadOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Underload, true
}

// SetUnderload sets field value
func (o *BlockParamLimits) SetUnderload(v int64) {
	o.Underload = v
}

// GetSoftLimit returns the SoftLimit field value
func (o *BlockParamLimits) GetSoftLimit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SoftLimit
}

// GetSoftLimitOk returns a tuple with the SoftLimit field value
// and a boolean to check if the value has been set.
func (o *BlockParamLimits) GetSoftLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoftLimit, true
}

// SetSoftLimit sets field value
func (o *BlockParamLimits) SetSoftLimit(v int64) {
	o.SoftLimit = v
}

// GetHardLimit returns the HardLimit field value
func (o *BlockParamLimits) GetHardLimit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.HardLimit
}

// GetHardLimitOk returns a tuple with the HardLimit field value
// and a boolean to check if the value has been set.
func (o *BlockParamLimits) GetHardLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HardLimit, true
}

// SetHardLimit sets field value
func (o *BlockParamLimits) SetHardLimit(v int64) {
	o.HardLimit = v
}

func (o BlockParamLimits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockParamLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["underload"] = o.Underload
	toSerialize["soft_limit"] = o.SoftLimit
	toSerialize["hard_limit"] = o.HardLimit
	return toSerialize, nil
}

func (o *BlockParamLimits) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"underload",
		"soft_limit",
		"hard_limit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockParamLimits := _BlockParamLimits{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockParamLimits)

	if err != nil {
		return err
	}

	*o = BlockParamLimits(varBlockParamLimits)

	return err
}

type NullableBlockParamLimits struct {
	value *BlockParamLimits
	isSet bool
}

func (v NullableBlockParamLimits) Get() *BlockParamLimits {
	return v.value
}

func (v *NullableBlockParamLimits) Set(val *BlockParamLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockParamLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockParamLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockParamLimits(val *BlockParamLimits) *NullableBlockParamLimits {
	return &NullableBlockParamLimits{value: val, isSet: true}
}

func (v NullableBlockParamLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockParamLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


