/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig44 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig44{}

// BlockchainConfig44 suspended accounts
type BlockchainConfig44 struct {
	Accounts []string `json:"accounts"`
	SuspendedUntil int32 `json:"suspended_until"`
}

type _BlockchainConfig44 BlockchainConfig44

// NewBlockchainConfig44 instantiates a new BlockchainConfig44 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig44(accounts []string, suspendedUntil int32) *BlockchainConfig44 {
	this := BlockchainConfig44{}
	this.Accounts = accounts
	this.SuspendedUntil = suspendedUntil
	return &this
}

// NewBlockchainConfig44WithDefaults instantiates a new BlockchainConfig44 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig44WithDefaults() *BlockchainConfig44 {
	this := BlockchainConfig44{}
	return &this
}

// GetAccounts returns the Accounts field value
func (o *BlockchainConfig44) GetAccounts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig44) GetAccountsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Accounts, true
}

// SetAccounts sets field value
func (o *BlockchainConfig44) SetAccounts(v []string) {
	o.Accounts = v
}

// GetSuspendedUntil returns the SuspendedUntil field value
func (o *BlockchainConfig44) GetSuspendedUntil() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SuspendedUntil
}

// GetSuspendedUntilOk returns a tuple with the SuspendedUntil field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig44) GetSuspendedUntilOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuspendedUntil, true
}

// SetSuspendedUntil sets field value
func (o *BlockchainConfig44) SetSuspendedUntil(v int32) {
	o.SuspendedUntil = v
}

func (o BlockchainConfig44) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig44) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accounts"] = o.Accounts
	toSerialize["suspended_until"] = o.SuspendedUntil
	return toSerialize, nil
}

func (o *BlockchainConfig44) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accounts",
		"suspended_until",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig44 := _BlockchainConfig44{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig44)

	if err != nil {
		return err
	}

	*o = BlockchainConfig44(varBlockchainConfig44)

	return err
}

type NullableBlockchainConfig44 struct {
	value *BlockchainConfig44
	isSet bool
}

func (v NullableBlockchainConfig44) Get() *BlockchainConfig44 {
	return v.value
}

func (v *NullableBlockchainConfig44) Set(val *BlockchainConfig44) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig44) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig44) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig44(val *BlockchainConfig44) *NullableBlockchainConfig44 {
	return &NullableBlockchainConfig44{value: val, isSet: true}
}

func (v NullableBlockchainConfig44) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig44) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


