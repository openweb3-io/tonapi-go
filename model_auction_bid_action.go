/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuctionBidAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuctionBidAction{}

// AuctionBidAction struct for AuctionBidAction
type AuctionBidAction struct {
	AuctionType string `json:"auction_type"`
	Amount Price `json:"amount"`
	Nft *NftItem `json:"nft,omitempty"`
	Bidder AccountAddress `json:"bidder"`
	Auction AccountAddress `json:"auction"`
}

type _AuctionBidAction AuctionBidAction

// NewAuctionBidAction instantiates a new AuctionBidAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuctionBidAction(auctionType string, amount Price, bidder AccountAddress, auction AccountAddress) *AuctionBidAction {
	this := AuctionBidAction{}
	this.AuctionType = auctionType
	this.Amount = amount
	this.Bidder = bidder
	this.Auction = auction
	return &this
}

// NewAuctionBidActionWithDefaults instantiates a new AuctionBidAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuctionBidActionWithDefaults() *AuctionBidAction {
	this := AuctionBidAction{}
	return &this
}

// GetAuctionType returns the AuctionType field value
func (o *AuctionBidAction) GetAuctionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuctionType
}

// GetAuctionTypeOk returns a tuple with the AuctionType field value
// and a boolean to check if the value has been set.
func (o *AuctionBidAction) GetAuctionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuctionType, true
}

// SetAuctionType sets field value
func (o *AuctionBidAction) SetAuctionType(v string) {
	o.AuctionType = v
}

// GetAmount returns the Amount field value
func (o *AuctionBidAction) GetAmount() Price {
	if o == nil {
		var ret Price
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AuctionBidAction) GetAmountOk() (*Price, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AuctionBidAction) SetAmount(v Price) {
	o.Amount = v
}

// GetNft returns the Nft field value if set, zero value otherwise.
func (o *AuctionBidAction) GetNft() NftItem {
	if o == nil || IsNil(o.Nft) {
		var ret NftItem
		return ret
	}
	return *o.Nft
}

// GetNftOk returns a tuple with the Nft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuctionBidAction) GetNftOk() (*NftItem, bool) {
	if o == nil || IsNil(o.Nft) {
		return nil, false
	}
	return o.Nft, true
}

// HasNft returns a boolean if a field has been set.
func (o *AuctionBidAction) HasNft() bool {
	if o != nil && !IsNil(o.Nft) {
		return true
	}

	return false
}

// SetNft gets a reference to the given NftItem and assigns it to the Nft field.
func (o *AuctionBidAction) SetNft(v NftItem) {
	o.Nft = &v
}

// GetBidder returns the Bidder field value
func (o *AuctionBidAction) GetBidder() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Bidder
}

// GetBidderOk returns a tuple with the Bidder field value
// and a boolean to check if the value has been set.
func (o *AuctionBidAction) GetBidderOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bidder, true
}

// SetBidder sets field value
func (o *AuctionBidAction) SetBidder(v AccountAddress) {
	o.Bidder = v
}

// GetAuction returns the Auction field value
func (o *AuctionBidAction) GetAuction() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Auction
}

// GetAuctionOk returns a tuple with the Auction field value
// and a boolean to check if the value has been set.
func (o *AuctionBidAction) GetAuctionOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Auction, true
}

// SetAuction sets field value
func (o *AuctionBidAction) SetAuction(v AccountAddress) {
	o.Auction = v
}

func (o AuctionBidAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuctionBidAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auction_type"] = o.AuctionType
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Nft) {
		toSerialize["nft"] = o.Nft
	}
	toSerialize["bidder"] = o.Bidder
	toSerialize["auction"] = o.Auction
	return toSerialize, nil
}

func (o *AuctionBidAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auction_type",
		"amount",
		"bidder",
		"auction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuctionBidAction := _AuctionBidAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuctionBidAction)

	if err != nil {
		return err
	}

	*o = AuctionBidAction(varAuctionBidAction)

	return err
}

type NullableAuctionBidAction struct {
	value *AuctionBidAction
	isSet bool
}

func (v NullableAuctionBidAction) Get() *AuctionBidAction {
	return v.value
}

func (v *NullableAuctionBidAction) Set(val *AuctionBidAction) {
	v.value = val
	v.isSet = true
}

func (v NullableAuctionBidAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAuctionBidAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuctionBidAction(val *AuctionBidAction) *NullableAuctionBidAction {
	return &NullableAuctionBidAction{value: val, isSet: true}
}

func (v NullableAuctionBidAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuctionBidAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


