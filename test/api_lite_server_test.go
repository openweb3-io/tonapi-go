/*
REST api to TON blockchain explorer

Testing LiteServerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package tonapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/tonapi"
)

func Test_tonapi_LiteServerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LiteServerAPIService GetAllRawShardsInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LiteServerAPI.GetAllRawShardsInfo(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetOutMsgQueueSizes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiteServerAPI.GetOutMsgQueueSizes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawAccountState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawAccountState(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawBlockProof", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawBlockProof(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawBlockchainBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawBlockchainBlock(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawBlockchainBlockHeader", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawBlockchainBlockHeader(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawBlockchainBlockState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawBlockchainBlockState(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawConfig(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawListBlockTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawListBlockTransactions(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawMasterchainInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawMasterchainInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawMasterchainInfoExt", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawMasterchainInfoExt(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawShardBlockProof", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawShardBlockProof(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawShardInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawShardInfo(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawTime", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawTime(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService GetRawTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.LiteServerAPI.GetRawTransactions(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiteServerAPIService SendRawMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiteServerAPI.SendRawMessage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
