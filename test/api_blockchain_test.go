/*
REST api to TON blockchain explorer

Testing BlockchainAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package tonapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/tonapi"
)

func Test_tonapi_BlockchainAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlockchainAPIService BlockchainAccountInspect", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.BlockchainAPI.BlockchainAccountInspect(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService ExecGetMethodForBlockchainAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var methodName string

		resp, httpRes, err := apiClient.BlockchainAPI.ExecGetMethodForBlockchainAccount(context.Background(), accountId, methodName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainAccountTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainAccountTransactions(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainBlock(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainBlockTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainBlockTransactions(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainConfigFromBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var masterchainSeqno int32

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainConfigFromBlock(context.Background(), masterchainSeqno).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainMasterchainBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var masterchainSeqno int32

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainMasterchainBlocks(context.Background(), masterchainSeqno).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainMasterchainHead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainMasterchainHead(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainMasterchainShards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var masterchainSeqno int32

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainMasterchainShards(context.Background(), masterchainSeqno).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainMasterchainTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var masterchainSeqno int32

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainMasterchainTransactions(context.Background(), masterchainSeqno).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainRawAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainRawAccount(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainTransaction(context.Background(), transactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainTransactionByMessageHash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var msgId string

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainTransactionByMessageHash(context.Background(), msgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetBlockchainValidators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockchainAPI.GetBlockchainValidators(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetRawBlockchainConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockchainAPI.GetRawBlockchainConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetRawBlockchainConfigFromBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var masterchainSeqno int32

		resp, httpRes, err := apiClient.BlockchainAPI.GetRawBlockchainConfigFromBlock(context.Background(), masterchainSeqno).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService GetReducedBlockchainBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockchainAPI.GetReducedBlockchainBlocks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService SendBlockchainMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BlockchainAPI.SendBlockchainMessage(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockchainAPIService Status", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockchainAPI.Status(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
