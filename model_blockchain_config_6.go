/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig6 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig6{}

// BlockchainConfig6 Minting fees of new currencies.
type BlockchainConfig6 struct {
	MintNewPrice int64 `json:"mint_new_price"`
	MintAddPrice int64 `json:"mint_add_price"`
}

type _BlockchainConfig6 BlockchainConfig6

// NewBlockchainConfig6 instantiates a new BlockchainConfig6 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig6(mintNewPrice int64, mintAddPrice int64) *BlockchainConfig6 {
	this := BlockchainConfig6{}
	this.MintNewPrice = mintNewPrice
	this.MintAddPrice = mintAddPrice
	return &this
}

// NewBlockchainConfig6WithDefaults instantiates a new BlockchainConfig6 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig6WithDefaults() *BlockchainConfig6 {
	this := BlockchainConfig6{}
	return &this
}

// GetMintNewPrice returns the MintNewPrice field value
func (o *BlockchainConfig6) GetMintNewPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MintNewPrice
}

// GetMintNewPriceOk returns a tuple with the MintNewPrice field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig6) GetMintNewPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MintNewPrice, true
}

// SetMintNewPrice sets field value
func (o *BlockchainConfig6) SetMintNewPrice(v int64) {
	o.MintNewPrice = v
}

// GetMintAddPrice returns the MintAddPrice field value
func (o *BlockchainConfig6) GetMintAddPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MintAddPrice
}

// GetMintAddPriceOk returns a tuple with the MintAddPrice field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig6) GetMintAddPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MintAddPrice, true
}

// SetMintAddPrice sets field value
func (o *BlockchainConfig6) SetMintAddPrice(v int64) {
	o.MintAddPrice = v
}

func (o BlockchainConfig6) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig6) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mint_new_price"] = o.MintNewPrice
	toSerialize["mint_add_price"] = o.MintAddPrice
	return toSerialize, nil
}

func (o *BlockchainConfig6) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mint_new_price",
		"mint_add_price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig6 := _BlockchainConfig6{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig6)

	if err != nil {
		return err
	}

	*o = BlockchainConfig6(varBlockchainConfig6)

	return err
}

type NullableBlockchainConfig6 struct {
	value *BlockchainConfig6
	isSet bool
}

func (v NullableBlockchainConfig6) Get() *BlockchainConfig6 {
	return v.value
}

func (v *NullableBlockchainConfig6) Set(val *BlockchainConfig6) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig6) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig6(val *BlockchainConfig6) *NullableBlockchainConfig6 {
	return &NullableBlockchainConfig6{value: val, isSet: true}
}

func (v NullableBlockchainConfig6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


