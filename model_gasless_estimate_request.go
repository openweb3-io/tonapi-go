/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GaslessEstimateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GaslessEstimateRequest{}

// GaslessEstimateRequest struct for GaslessEstimateRequest
type GaslessEstimateRequest struct {
	WalletAddress string `json:"wallet_address"`
	WalletPublicKey string `json:"wallet_public_key"`
	Messages []GaslessEstimateRequestMessagesInner `json:"messages"`
}

type _GaslessEstimateRequest GaslessEstimateRequest

// NewGaslessEstimateRequest instantiates a new GaslessEstimateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGaslessEstimateRequest(walletAddress string, walletPublicKey string, messages []GaslessEstimateRequestMessagesInner) *GaslessEstimateRequest {
	this := GaslessEstimateRequest{}
	this.WalletAddress = walletAddress
	this.WalletPublicKey = walletPublicKey
	this.Messages = messages
	return &this
}

// NewGaslessEstimateRequestWithDefaults instantiates a new GaslessEstimateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGaslessEstimateRequestWithDefaults() *GaslessEstimateRequest {
	this := GaslessEstimateRequest{}
	return &this
}

// GetWalletAddress returns the WalletAddress field value
func (o *GaslessEstimateRequest) GetWalletAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletAddress
}

// GetWalletAddressOk returns a tuple with the WalletAddress field value
// and a boolean to check if the value has been set.
func (o *GaslessEstimateRequest) GetWalletAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletAddress, true
}

// SetWalletAddress sets field value
func (o *GaslessEstimateRequest) SetWalletAddress(v string) {
	o.WalletAddress = v
}

// GetWalletPublicKey returns the WalletPublicKey field value
func (o *GaslessEstimateRequest) GetWalletPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletPublicKey
}

// GetWalletPublicKeyOk returns a tuple with the WalletPublicKey field value
// and a boolean to check if the value has been set.
func (o *GaslessEstimateRequest) GetWalletPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletPublicKey, true
}

// SetWalletPublicKey sets field value
func (o *GaslessEstimateRequest) SetWalletPublicKey(v string) {
	o.WalletPublicKey = v
}

// GetMessages returns the Messages field value
func (o *GaslessEstimateRequest) GetMessages() []GaslessEstimateRequestMessagesInner {
	if o == nil {
		var ret []GaslessEstimateRequestMessagesInner
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *GaslessEstimateRequest) GetMessagesOk() ([]GaslessEstimateRequestMessagesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *GaslessEstimateRequest) SetMessages(v []GaslessEstimateRequestMessagesInner) {
	o.Messages = v
}

func (o GaslessEstimateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GaslessEstimateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet_address"] = o.WalletAddress
	toSerialize["wallet_public_key"] = o.WalletPublicKey
	toSerialize["messages"] = o.Messages
	return toSerialize, nil
}

func (o *GaslessEstimateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_address",
		"wallet_public_key",
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGaslessEstimateRequest := _GaslessEstimateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGaslessEstimateRequest)

	if err != nil {
		return err
	}

	*o = GaslessEstimateRequest(varGaslessEstimateRequest)

	return err
}

type NullableGaslessEstimateRequest struct {
	value *GaslessEstimateRequest
	isSet bool
}

func (v NullableGaslessEstimateRequest) Get() *GaslessEstimateRequest {
	return v.value
}

func (v *NullableGaslessEstimateRequest) Set(val *GaslessEstimateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGaslessEstimateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGaslessEstimateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaslessEstimateRequest(val *GaslessEstimateRequest) *NullableGaslessEstimateRequest {
	return &NullableGaslessEstimateRequest{value: val, isSet: true}
}

func (v NullableGaslessEstimateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaslessEstimateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


