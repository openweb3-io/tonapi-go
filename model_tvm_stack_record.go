/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TvmStackRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TvmStackRecord{}

// TvmStackRecord struct for TvmStackRecord
type TvmStackRecord struct {
	Type string `json:"type"`
	Cell *string `json:"cell,omitempty"`
	Slice *string `json:"slice,omitempty"`
	Num *string `json:"num,omitempty"`
	Tuple []TvmStackRecord `json:"tuple,omitempty"`
}

type _TvmStackRecord TvmStackRecord

// NewTvmStackRecord instantiates a new TvmStackRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTvmStackRecord(type_ string) *TvmStackRecord {
	this := TvmStackRecord{}
	this.Type = type_
	return &this
}

// NewTvmStackRecordWithDefaults instantiates a new TvmStackRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTvmStackRecordWithDefaults() *TvmStackRecord {
	this := TvmStackRecord{}
	return &this
}

// GetType returns the Type field value
func (o *TvmStackRecord) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TvmStackRecord) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TvmStackRecord) SetType(v string) {
	o.Type = v
}

// GetCell returns the Cell field value if set, zero value otherwise.
func (o *TvmStackRecord) GetCell() string {
	if o == nil || IsNil(o.Cell) {
		var ret string
		return ret
	}
	return *o.Cell
}

// GetCellOk returns a tuple with the Cell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TvmStackRecord) GetCellOk() (*string, bool) {
	if o == nil || IsNil(o.Cell) {
		return nil, false
	}
	return o.Cell, true
}

// HasCell returns a boolean if a field has been set.
func (o *TvmStackRecord) HasCell() bool {
	if o != nil && !IsNil(o.Cell) {
		return true
	}

	return false
}

// SetCell gets a reference to the given string and assigns it to the Cell field.
func (o *TvmStackRecord) SetCell(v string) {
	o.Cell = &v
}

// GetSlice returns the Slice field value if set, zero value otherwise.
func (o *TvmStackRecord) GetSlice() string {
	if o == nil || IsNil(o.Slice) {
		var ret string
		return ret
	}
	return *o.Slice
}

// GetSliceOk returns a tuple with the Slice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TvmStackRecord) GetSliceOk() (*string, bool) {
	if o == nil || IsNil(o.Slice) {
		return nil, false
	}
	return o.Slice, true
}

// HasSlice returns a boolean if a field has been set.
func (o *TvmStackRecord) HasSlice() bool {
	if o != nil && !IsNil(o.Slice) {
		return true
	}

	return false
}

// SetSlice gets a reference to the given string and assigns it to the Slice field.
func (o *TvmStackRecord) SetSlice(v string) {
	o.Slice = &v
}

// GetNum returns the Num field value if set, zero value otherwise.
func (o *TvmStackRecord) GetNum() string {
	if o == nil || IsNil(o.Num) {
		var ret string
		return ret
	}
	return *o.Num
}

// GetNumOk returns a tuple with the Num field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TvmStackRecord) GetNumOk() (*string, bool) {
	if o == nil || IsNil(o.Num) {
		return nil, false
	}
	return o.Num, true
}

// HasNum returns a boolean if a field has been set.
func (o *TvmStackRecord) HasNum() bool {
	if o != nil && !IsNil(o.Num) {
		return true
	}

	return false
}

// SetNum gets a reference to the given string and assigns it to the Num field.
func (o *TvmStackRecord) SetNum(v string) {
	o.Num = &v
}

// GetTuple returns the Tuple field value if set, zero value otherwise.
func (o *TvmStackRecord) GetTuple() []TvmStackRecord {
	if o == nil || IsNil(o.Tuple) {
		var ret []TvmStackRecord
		return ret
	}
	return o.Tuple
}

// GetTupleOk returns a tuple with the Tuple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TvmStackRecord) GetTupleOk() ([]TvmStackRecord, bool) {
	if o == nil || IsNil(o.Tuple) {
		return nil, false
	}
	return o.Tuple, true
}

// HasTuple returns a boolean if a field has been set.
func (o *TvmStackRecord) HasTuple() bool {
	if o != nil && !IsNil(o.Tuple) {
		return true
	}

	return false
}

// SetTuple gets a reference to the given []TvmStackRecord and assigns it to the Tuple field.
func (o *TvmStackRecord) SetTuple(v []TvmStackRecord) {
	o.Tuple = v
}

func (o TvmStackRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TvmStackRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Cell) {
		toSerialize["cell"] = o.Cell
	}
	if !IsNil(o.Slice) {
		toSerialize["slice"] = o.Slice
	}
	if !IsNil(o.Num) {
		toSerialize["num"] = o.Num
	}
	if !IsNil(o.Tuple) {
		toSerialize["tuple"] = o.Tuple
	}
	return toSerialize, nil
}

func (o *TvmStackRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTvmStackRecord := _TvmStackRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTvmStackRecord)

	if err != nil {
		return err
	}

	*o = TvmStackRecord(varTvmStackRecord)

	return err
}

type NullableTvmStackRecord struct {
	value *TvmStackRecord
	isSet bool
}

func (v NullableTvmStackRecord) Get() *TvmStackRecord {
	return v.value
}

func (v *NullableTvmStackRecord) Set(val *TvmStackRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableTvmStackRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableTvmStackRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTvmStackRecord(val *TvmStackRecord) *NullableTvmStackRecord {
	return &NullableTvmStackRecord{value: val, isSet: true}
}

func (v NullableTvmStackRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTvmStackRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


