/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WorkchainDescr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkchainDescr{}

// WorkchainDescr struct for WorkchainDescr
type WorkchainDescr struct {
	Workchain int32 `json:"workchain"`
	EnabledSince int64 `json:"enabled_since"`
	ActualMinSplit int32 `json:"actual_min_split"`
	MinSplit int32 `json:"min_split"`
	MaxSplit int32 `json:"max_split"`
	Basic int32 `json:"basic"`
	Active bool `json:"active"`
	AcceptMsgs bool `json:"accept_msgs"`
	Flags int32 `json:"flags"`
	ZerostateRootHash string `json:"zerostate_root_hash"`
	ZerostateFileHash string `json:"zerostate_file_hash"`
	Version int64 `json:"version"`
}

type _WorkchainDescr WorkchainDescr

// NewWorkchainDescr instantiates a new WorkchainDescr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkchainDescr(workchain int32, enabledSince int64, actualMinSplit int32, minSplit int32, maxSplit int32, basic int32, active bool, acceptMsgs bool, flags int32, zerostateRootHash string, zerostateFileHash string, version int64) *WorkchainDescr {
	this := WorkchainDescr{}
	this.Workchain = workchain
	this.EnabledSince = enabledSince
	this.ActualMinSplit = actualMinSplit
	this.MinSplit = minSplit
	this.MaxSplit = maxSplit
	this.Basic = basic
	this.Active = active
	this.AcceptMsgs = acceptMsgs
	this.Flags = flags
	this.ZerostateRootHash = zerostateRootHash
	this.ZerostateFileHash = zerostateFileHash
	this.Version = version
	return &this
}

// NewWorkchainDescrWithDefaults instantiates a new WorkchainDescr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkchainDescrWithDefaults() *WorkchainDescr {
	this := WorkchainDescr{}
	return &this
}

// GetWorkchain returns the Workchain field value
func (o *WorkchainDescr) GetWorkchain() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Workchain
}

// GetWorkchainOk returns a tuple with the Workchain field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetWorkchainOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workchain, true
}

// SetWorkchain sets field value
func (o *WorkchainDescr) SetWorkchain(v int32) {
	o.Workchain = v
}

// GetEnabledSince returns the EnabledSince field value
func (o *WorkchainDescr) GetEnabledSince() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EnabledSince
}

// GetEnabledSinceOk returns a tuple with the EnabledSince field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetEnabledSinceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnabledSince, true
}

// SetEnabledSince sets field value
func (o *WorkchainDescr) SetEnabledSince(v int64) {
	o.EnabledSince = v
}

// GetActualMinSplit returns the ActualMinSplit field value
func (o *WorkchainDescr) GetActualMinSplit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ActualMinSplit
}

// GetActualMinSplitOk returns a tuple with the ActualMinSplit field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetActualMinSplitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActualMinSplit, true
}

// SetActualMinSplit sets field value
func (o *WorkchainDescr) SetActualMinSplit(v int32) {
	o.ActualMinSplit = v
}

// GetMinSplit returns the MinSplit field value
func (o *WorkchainDescr) GetMinSplit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinSplit
}

// GetMinSplitOk returns a tuple with the MinSplit field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetMinSplitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinSplit, true
}

// SetMinSplit sets field value
func (o *WorkchainDescr) SetMinSplit(v int32) {
	o.MinSplit = v
}

// GetMaxSplit returns the MaxSplit field value
func (o *WorkchainDescr) GetMaxSplit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxSplit
}

// GetMaxSplitOk returns a tuple with the MaxSplit field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetMaxSplitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSplit, true
}

// SetMaxSplit sets field value
func (o *WorkchainDescr) SetMaxSplit(v int32) {
	o.MaxSplit = v
}

// GetBasic returns the Basic field value
func (o *WorkchainDescr) GetBasic() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Basic
}

// GetBasicOk returns a tuple with the Basic field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetBasicOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Basic, true
}

// SetBasic sets field value
func (o *WorkchainDescr) SetBasic(v int32) {
	o.Basic = v
}

// GetActive returns the Active field value
func (o *WorkchainDescr) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *WorkchainDescr) SetActive(v bool) {
	o.Active = v
}

// GetAcceptMsgs returns the AcceptMsgs field value
func (o *WorkchainDescr) GetAcceptMsgs() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AcceptMsgs
}

// GetAcceptMsgsOk returns a tuple with the AcceptMsgs field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetAcceptMsgsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcceptMsgs, true
}

// SetAcceptMsgs sets field value
func (o *WorkchainDescr) SetAcceptMsgs(v bool) {
	o.AcceptMsgs = v
}

// GetFlags returns the Flags field value
func (o *WorkchainDescr) GetFlags() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetFlagsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flags, true
}

// SetFlags sets field value
func (o *WorkchainDescr) SetFlags(v int32) {
	o.Flags = v
}

// GetZerostateRootHash returns the ZerostateRootHash field value
func (o *WorkchainDescr) GetZerostateRootHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZerostateRootHash
}

// GetZerostateRootHashOk returns a tuple with the ZerostateRootHash field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetZerostateRootHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZerostateRootHash, true
}

// SetZerostateRootHash sets field value
func (o *WorkchainDescr) SetZerostateRootHash(v string) {
	o.ZerostateRootHash = v
}

// GetZerostateFileHash returns the ZerostateFileHash field value
func (o *WorkchainDescr) GetZerostateFileHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZerostateFileHash
}

// GetZerostateFileHashOk returns a tuple with the ZerostateFileHash field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetZerostateFileHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZerostateFileHash, true
}

// SetZerostateFileHash sets field value
func (o *WorkchainDescr) SetZerostateFileHash(v string) {
	o.ZerostateFileHash = v
}

// GetVersion returns the Version field value
func (o *WorkchainDescr) GetVersion() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *WorkchainDescr) GetVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *WorkchainDescr) SetVersion(v int64) {
	o.Version = v
}

func (o WorkchainDescr) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkchainDescr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workchain"] = o.Workchain
	toSerialize["enabled_since"] = o.EnabledSince
	toSerialize["actual_min_split"] = o.ActualMinSplit
	toSerialize["min_split"] = o.MinSplit
	toSerialize["max_split"] = o.MaxSplit
	toSerialize["basic"] = o.Basic
	toSerialize["active"] = o.Active
	toSerialize["accept_msgs"] = o.AcceptMsgs
	toSerialize["flags"] = o.Flags
	toSerialize["zerostate_root_hash"] = o.ZerostateRootHash
	toSerialize["zerostate_file_hash"] = o.ZerostateFileHash
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *WorkchainDescr) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workchain",
		"enabled_since",
		"actual_min_split",
		"min_split",
		"max_split",
		"basic",
		"active",
		"accept_msgs",
		"flags",
		"zerostate_root_hash",
		"zerostate_file_hash",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkchainDescr := _WorkchainDescr{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkchainDescr)

	if err != nil {
		return err
	}

	*o = WorkchainDescr(varWorkchainDescr)

	return err
}

type NullableWorkchainDescr struct {
	value *WorkchainDescr
	isSet bool
}

func (v NullableWorkchainDescr) Get() *WorkchainDescr {
	return v.value
}

func (v *NullableWorkchainDescr) Set(val *WorkchainDescr) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkchainDescr) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkchainDescr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkchainDescr(val *WorkchainDescr) *NullableWorkchainDescr {
	return &NullableWorkchainDescr{value: val, isSet: true}
}

func (v NullableWorkchainDescr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkchainDescr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


