/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NftPurchaseAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NftPurchaseAction{}

// NftPurchaseAction struct for NftPurchaseAction
type NftPurchaseAction struct {
	AuctionType string `json:"auction_type"`
	Amount Price `json:"amount"`
	Nft NftItem `json:"nft"`
	Seller AccountAddress `json:"seller"`
	Buyer AccountAddress `json:"buyer"`
}

type _NftPurchaseAction NftPurchaseAction

// NewNftPurchaseAction instantiates a new NftPurchaseAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftPurchaseAction(auctionType string, amount Price, nft NftItem, seller AccountAddress, buyer AccountAddress) *NftPurchaseAction {
	this := NftPurchaseAction{}
	this.AuctionType = auctionType
	this.Amount = amount
	this.Nft = nft
	this.Seller = seller
	this.Buyer = buyer
	return &this
}

// NewNftPurchaseActionWithDefaults instantiates a new NftPurchaseAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftPurchaseActionWithDefaults() *NftPurchaseAction {
	this := NftPurchaseAction{}
	return &this
}

// GetAuctionType returns the AuctionType field value
func (o *NftPurchaseAction) GetAuctionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuctionType
}

// GetAuctionTypeOk returns a tuple with the AuctionType field value
// and a boolean to check if the value has been set.
func (o *NftPurchaseAction) GetAuctionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuctionType, true
}

// SetAuctionType sets field value
func (o *NftPurchaseAction) SetAuctionType(v string) {
	o.AuctionType = v
}

// GetAmount returns the Amount field value
func (o *NftPurchaseAction) GetAmount() Price {
	if o == nil {
		var ret Price
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *NftPurchaseAction) GetAmountOk() (*Price, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *NftPurchaseAction) SetAmount(v Price) {
	o.Amount = v
}

// GetNft returns the Nft field value
func (o *NftPurchaseAction) GetNft() NftItem {
	if o == nil {
		var ret NftItem
		return ret
	}

	return o.Nft
}

// GetNftOk returns a tuple with the Nft field value
// and a boolean to check if the value has been set.
func (o *NftPurchaseAction) GetNftOk() (*NftItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nft, true
}

// SetNft sets field value
func (o *NftPurchaseAction) SetNft(v NftItem) {
	o.Nft = v
}

// GetSeller returns the Seller field value
func (o *NftPurchaseAction) GetSeller() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Seller
}

// GetSellerOk returns a tuple with the Seller field value
// and a boolean to check if the value has been set.
func (o *NftPurchaseAction) GetSellerOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seller, true
}

// SetSeller sets field value
func (o *NftPurchaseAction) SetSeller(v AccountAddress) {
	o.Seller = v
}

// GetBuyer returns the Buyer field value
func (o *NftPurchaseAction) GetBuyer() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Buyer
}

// GetBuyerOk returns a tuple with the Buyer field value
// and a boolean to check if the value has been set.
func (o *NftPurchaseAction) GetBuyerOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Buyer, true
}

// SetBuyer sets field value
func (o *NftPurchaseAction) SetBuyer(v AccountAddress) {
	o.Buyer = v
}

func (o NftPurchaseAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NftPurchaseAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auction_type"] = o.AuctionType
	toSerialize["amount"] = o.Amount
	toSerialize["nft"] = o.Nft
	toSerialize["seller"] = o.Seller
	toSerialize["buyer"] = o.Buyer
	return toSerialize, nil
}

func (o *NftPurchaseAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auction_type",
		"amount",
		"nft",
		"seller",
		"buyer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNftPurchaseAction := _NftPurchaseAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNftPurchaseAction)

	if err != nil {
		return err
	}

	*o = NftPurchaseAction(varNftPurchaseAction)

	return err
}

type NullableNftPurchaseAction struct {
	value *NftPurchaseAction
	isSet bool
}

func (v NullableNftPurchaseAction) Get() *NftPurchaseAction {
	return v.value
}

func (v *NullableNftPurchaseAction) Set(val *NftPurchaseAction) {
	v.value = val
	v.isSet = true
}

func (v NullableNftPurchaseAction) IsSet() bool {
	return v.isSet
}

func (v *NullableNftPurchaseAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftPurchaseAction(val *NftPurchaseAction) *NullableNftPurchaseAction {
	return &NullableNftPurchaseAction{value: val, isSet: true}
}

func (v NullableNftPurchaseAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftPurchaseAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


