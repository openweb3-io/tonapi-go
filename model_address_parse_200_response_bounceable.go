/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressParse200ResponseBounceable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressParse200ResponseBounceable{}

// AddressParse200ResponseBounceable struct for AddressParse200ResponseBounceable
type AddressParse200ResponseBounceable struct {
	B64 string `json:"b64"`
	B64url string `json:"b64url"`
}

type _AddressParse200ResponseBounceable AddressParse200ResponseBounceable

// NewAddressParse200ResponseBounceable instantiates a new AddressParse200ResponseBounceable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressParse200ResponseBounceable(b64 string, b64url string) *AddressParse200ResponseBounceable {
	this := AddressParse200ResponseBounceable{}
	this.B64 = b64
	this.B64url = b64url
	return &this
}

// NewAddressParse200ResponseBounceableWithDefaults instantiates a new AddressParse200ResponseBounceable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressParse200ResponseBounceableWithDefaults() *AddressParse200ResponseBounceable {
	this := AddressParse200ResponseBounceable{}
	return &this
}

// GetB64 returns the B64 field value
func (o *AddressParse200ResponseBounceable) GetB64() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.B64
}

// GetB64Ok returns a tuple with the B64 field value
// and a boolean to check if the value has been set.
func (o *AddressParse200ResponseBounceable) GetB64Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.B64, true
}

// SetB64 sets field value
func (o *AddressParse200ResponseBounceable) SetB64(v string) {
	o.B64 = v
}

// GetB64url returns the B64url field value
func (o *AddressParse200ResponseBounceable) GetB64url() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.B64url
}

// GetB64urlOk returns a tuple with the B64url field value
// and a boolean to check if the value has been set.
func (o *AddressParse200ResponseBounceable) GetB64urlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.B64url, true
}

// SetB64url sets field value
func (o *AddressParse200ResponseBounceable) SetB64url(v string) {
	o.B64url = v
}

func (o AddressParse200ResponseBounceable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressParse200ResponseBounceable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["b64"] = o.B64
	toSerialize["b64url"] = o.B64url
	return toSerialize, nil
}

func (o *AddressParse200ResponseBounceable) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"b64",
		"b64url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressParse200ResponseBounceable := _AddressParse200ResponseBounceable{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressParse200ResponseBounceable)

	if err != nil {
		return err
	}

	*o = AddressParse200ResponseBounceable(varAddressParse200ResponseBounceable)

	return err
}

type NullableAddressParse200ResponseBounceable struct {
	value *AddressParse200ResponseBounceable
	isSet bool
}

func (v NullableAddressParse200ResponseBounceable) Get() *AddressParse200ResponseBounceable {
	return v.value
}

func (v *NullableAddressParse200ResponseBounceable) Set(val *AddressParse200ResponseBounceable) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressParse200ResponseBounceable) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressParse200ResponseBounceable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressParse200ResponseBounceable(val *AddressParse200ResponseBounceable) *NullableAddressParse200ResponseBounceable {
	return &NullableAddressParse200ResponseBounceable{value: val, isSet: true}
}

func (v NullableAddressParse200ResponseBounceable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressParse200ResponseBounceable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


