/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig12 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig12{}

// BlockchainConfig12 Workchains in the TON Blockchain
type BlockchainConfig12 struct {
	Workchains []WorkchainDescr `json:"workchains"`
}

type _BlockchainConfig12 BlockchainConfig12

// NewBlockchainConfig12 instantiates a new BlockchainConfig12 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig12(workchains []WorkchainDescr) *BlockchainConfig12 {
	this := BlockchainConfig12{}
	this.Workchains = workchains
	return &this
}

// NewBlockchainConfig12WithDefaults instantiates a new BlockchainConfig12 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig12WithDefaults() *BlockchainConfig12 {
	this := BlockchainConfig12{}
	return &this
}

// GetWorkchains returns the Workchains field value
func (o *BlockchainConfig12) GetWorkchains() []WorkchainDescr {
	if o == nil {
		var ret []WorkchainDescr
		return ret
	}

	return o.Workchains
}

// GetWorkchainsOk returns a tuple with the Workchains field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig12) GetWorkchainsOk() ([]WorkchainDescr, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workchains, true
}

// SetWorkchains sets field value
func (o *BlockchainConfig12) SetWorkchains(v []WorkchainDescr) {
	o.Workchains = v
}

func (o BlockchainConfig12) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig12) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workchains"] = o.Workchains
	return toSerialize, nil
}

func (o *BlockchainConfig12) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workchains",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig12 := _BlockchainConfig12{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig12)

	if err != nil {
		return err
	}

	*o = BlockchainConfig12(varBlockchainConfig12)

	return err
}

type NullableBlockchainConfig12 struct {
	value *BlockchainConfig12
	isSet bool
}

func (v NullableBlockchainConfig12) Get() *BlockchainConfig12 {
	return v.value
}

func (v *NullableBlockchainConfig12) Set(val *BlockchainConfig12) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig12) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig12) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig12(val *BlockchainConfig12) *NullableBlockchainConfig12 {
	return &NullableBlockchainConfig12{value: val, isSet: true}
}

func (v NullableBlockchainConfig12) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig12) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


