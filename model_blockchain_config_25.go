/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig25 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig25{}

// BlockchainConfig25 The cost of sending messages in the basechains of the TON blockchain.
type BlockchainConfig25 struct {
	MsgForwardPrices MsgForwardPrices `json:"msg_forward_prices"`
}

type _BlockchainConfig25 BlockchainConfig25

// NewBlockchainConfig25 instantiates a new BlockchainConfig25 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig25(msgForwardPrices MsgForwardPrices) *BlockchainConfig25 {
	this := BlockchainConfig25{}
	this.MsgForwardPrices = msgForwardPrices
	return &this
}

// NewBlockchainConfig25WithDefaults instantiates a new BlockchainConfig25 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig25WithDefaults() *BlockchainConfig25 {
	this := BlockchainConfig25{}
	return &this
}

// GetMsgForwardPrices returns the MsgForwardPrices field value
func (o *BlockchainConfig25) GetMsgForwardPrices() MsgForwardPrices {
	if o == nil {
		var ret MsgForwardPrices
		return ret
	}

	return o.MsgForwardPrices
}

// GetMsgForwardPricesOk returns a tuple with the MsgForwardPrices field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig25) GetMsgForwardPricesOk() (*MsgForwardPrices, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MsgForwardPrices, true
}

// SetMsgForwardPrices sets field value
func (o *BlockchainConfig25) SetMsgForwardPrices(v MsgForwardPrices) {
	o.MsgForwardPrices = v
}

func (o BlockchainConfig25) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig25) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["msg_forward_prices"] = o.MsgForwardPrices
	return toSerialize, nil
}

func (o *BlockchainConfig25) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"msg_forward_prices",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig25 := _BlockchainConfig25{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig25)

	if err != nil {
		return err
	}

	*o = BlockchainConfig25(varBlockchainConfig25)

	return err
}

type NullableBlockchainConfig25 struct {
	value *BlockchainConfig25
	isSet bool
}

func (v NullableBlockchainConfig25) Get() *BlockchainConfig25 {
	return v.value
}

func (v *NullableBlockchainConfig25) Set(val *BlockchainConfig25) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig25) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig25) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig25(val *BlockchainConfig25) *NullableBlockchainConfig25 {
	return &NullableBlockchainConfig25{value: val, isSet: true}
}

func (v NullableBlockchainConfig25) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig25) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


