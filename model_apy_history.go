/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApyHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApyHistory{}

// ApyHistory struct for ApyHistory
type ApyHistory struct {
	Apy float32 `json:"apy"`
	Time int32 `json:"time"`
}

type _ApyHistory ApyHistory

// NewApyHistory instantiates a new ApyHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApyHistory(apy float32, time int32) *ApyHistory {
	this := ApyHistory{}
	this.Apy = apy
	this.Time = time
	return &this
}

// NewApyHistoryWithDefaults instantiates a new ApyHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApyHistoryWithDefaults() *ApyHistory {
	this := ApyHistory{}
	return &this
}

// GetApy returns the Apy field value
func (o *ApyHistory) GetApy() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Apy
}

// GetApyOk returns a tuple with the Apy field value
// and a boolean to check if the value has been set.
func (o *ApyHistory) GetApyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Apy, true
}

// SetApy sets field value
func (o *ApyHistory) SetApy(v float32) {
	o.Apy = v
}

// GetTime returns the Time field value
func (o *ApyHistory) GetTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *ApyHistory) GetTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *ApyHistory) SetTime(v int32) {
	o.Time = v
}

func (o ApyHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApyHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apy"] = o.Apy
	toSerialize["time"] = o.Time
	return toSerialize, nil
}

func (o *ApyHistory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apy",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApyHistory := _ApyHistory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApyHistory)

	if err != nil {
		return err
	}

	*o = ApyHistory(varApyHistory)

	return err
}

type NullableApyHistory struct {
	value *ApyHistory
	isSet bool
}

func (v NullableApyHistory) Get() *ApyHistory {
	return v.value
}

func (v *NullableApyHistory) Set(val *ApyHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableApyHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableApyHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApyHistory(val *ApyHistory) *NullableApyHistory {
	return &NullableApyHistory{value: val, isSet: true}
}

func (v NullableApyHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApyHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


