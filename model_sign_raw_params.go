/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SignRawParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignRawParams{}

// SignRawParams struct for SignRawParams
type SignRawParams struct {
	RelayAddress string `json:"relay_address"`
	// Commission for the transaction. In nanocoins.
	Commission string `json:"commission"`
	From string `json:"from"`
	ValidUntil int64 `json:"valid_until"`
	Messages []SignRawMessage `json:"messages"`
}

type _SignRawParams SignRawParams

// NewSignRawParams instantiates a new SignRawParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignRawParams(relayAddress string, commission string, from string, validUntil int64, messages []SignRawMessage) *SignRawParams {
	this := SignRawParams{}
	this.RelayAddress = relayAddress
	this.Commission = commission
	this.From = from
	this.ValidUntil = validUntil
	this.Messages = messages
	return &this
}

// NewSignRawParamsWithDefaults instantiates a new SignRawParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignRawParamsWithDefaults() *SignRawParams {
	this := SignRawParams{}
	return &this
}

// GetRelayAddress returns the RelayAddress field value
func (o *SignRawParams) GetRelayAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelayAddress
}

// GetRelayAddressOk returns a tuple with the RelayAddress field value
// and a boolean to check if the value has been set.
func (o *SignRawParams) GetRelayAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelayAddress, true
}

// SetRelayAddress sets field value
func (o *SignRawParams) SetRelayAddress(v string) {
	o.RelayAddress = v
}

// GetCommission returns the Commission field value
func (o *SignRawParams) GetCommission() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Commission
}

// GetCommissionOk returns a tuple with the Commission field value
// and a boolean to check if the value has been set.
func (o *SignRawParams) GetCommissionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commission, true
}

// SetCommission sets field value
func (o *SignRawParams) SetCommission(v string) {
	o.Commission = v
}

// GetFrom returns the From field value
func (o *SignRawParams) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *SignRawParams) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *SignRawParams) SetFrom(v string) {
	o.From = v
}

// GetValidUntil returns the ValidUntil field value
func (o *SignRawParams) GetValidUntil() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value
// and a boolean to check if the value has been set.
func (o *SignRawParams) GetValidUntilOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidUntil, true
}

// SetValidUntil sets field value
func (o *SignRawParams) SetValidUntil(v int64) {
	o.ValidUntil = v
}

// GetMessages returns the Messages field value
func (o *SignRawParams) GetMessages() []SignRawMessage {
	if o == nil {
		var ret []SignRawMessage
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *SignRawParams) GetMessagesOk() ([]SignRawMessage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *SignRawParams) SetMessages(v []SignRawMessage) {
	o.Messages = v
}

func (o SignRawParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignRawParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["relay_address"] = o.RelayAddress
	toSerialize["commission"] = o.Commission
	toSerialize["from"] = o.From
	toSerialize["valid_until"] = o.ValidUntil
	toSerialize["messages"] = o.Messages
	return toSerialize, nil
}

func (o *SignRawParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"relay_address",
		"commission",
		"from",
		"valid_until",
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignRawParams := _SignRawParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignRawParams)

	if err != nil {
		return err
	}

	*o = SignRawParams(varSignRawParams)

	return err
}

type NullableSignRawParams struct {
	value *SignRawParams
	isSet bool
}

func (v NullableSignRawParams) Get() *SignRawParams {
	return v.value
}

func (v *NullableSignRawParams) Set(val *SignRawParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSignRawParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSignRawParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignRawParams(val *SignRawParams) *NullableSignRawParams {
	return &NullableSignRawParams{value: val, isSet: true}
}

func (v NullableSignRawParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignRawParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


