/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DomainInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainInfo{}

// DomainInfo struct for DomainInfo
type DomainInfo struct {
	Name string `json:"name"`
	// date of expiring. optional. not all domain in ton has expiration date
	ExpiringAt *int64 `json:"expiring_at,omitempty"`
	Item *NftItem `json:"item,omitempty"`
}

type _DomainInfo DomainInfo

// NewDomainInfo instantiates a new DomainInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainInfo(name string) *DomainInfo {
	this := DomainInfo{}
	this.Name = name
	return &this
}

// NewDomainInfoWithDefaults instantiates a new DomainInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainInfoWithDefaults() *DomainInfo {
	this := DomainInfo{}
	return &this
}

// GetName returns the Name field value
func (o *DomainInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DomainInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DomainInfo) SetName(v string) {
	o.Name = v
}

// GetExpiringAt returns the ExpiringAt field value if set, zero value otherwise.
func (o *DomainInfo) GetExpiringAt() int64 {
	if o == nil || IsNil(o.ExpiringAt) {
		var ret int64
		return ret
	}
	return *o.ExpiringAt
}

// GetExpiringAtOk returns a tuple with the ExpiringAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainInfo) GetExpiringAtOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiringAt) {
		return nil, false
	}
	return o.ExpiringAt, true
}

// HasExpiringAt returns a boolean if a field has been set.
func (o *DomainInfo) HasExpiringAt() bool {
	if o != nil && !IsNil(o.ExpiringAt) {
		return true
	}

	return false
}

// SetExpiringAt gets a reference to the given int64 and assigns it to the ExpiringAt field.
func (o *DomainInfo) SetExpiringAt(v int64) {
	o.ExpiringAt = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *DomainInfo) GetItem() NftItem {
	if o == nil || IsNil(o.Item) {
		var ret NftItem
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainInfo) GetItemOk() (*NftItem, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *DomainInfo) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given NftItem and assigns it to the Item field.
func (o *DomainInfo) SetItem(v NftItem) {
	o.Item = &v
}

func (o DomainInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.ExpiringAt) {
		toSerialize["expiring_at"] = o.ExpiringAt
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	return toSerialize, nil
}

func (o *DomainInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDomainInfo := _DomainInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDomainInfo)

	if err != nil {
		return err
	}

	*o = DomainInfo(varDomainInfo)

	return err
}

type NullableDomainInfo struct {
	value *DomainInfo
	isSet bool
}

func (v NullableDomainInfo) Get() *DomainInfo {
	return v.value
}

func (v *NullableDomainInfo) Set(val *DomainInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainInfo(val *DomainInfo) *NullableDomainInfo {
	return &NullableDomainInfo{value: val, isSet: true}
}

func (v NullableDomainInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


