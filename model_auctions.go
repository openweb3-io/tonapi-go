/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Auctions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Auctions{}

// Auctions struct for Auctions
type Auctions struct {
	Data []Auction `json:"data"`
	Total int64 `json:"total"`
}

type _Auctions Auctions

// NewAuctions instantiates a new Auctions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuctions(data []Auction, total int64) *Auctions {
	this := Auctions{}
	this.Data = data
	this.Total = total
	return &this
}

// NewAuctionsWithDefaults instantiates a new Auctions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuctionsWithDefaults() *Auctions {
	this := Auctions{}
	return &this
}

// GetData returns the Data field value
func (o *Auctions) GetData() []Auction {
	if o == nil {
		var ret []Auction
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Auctions) GetDataOk() ([]Auction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *Auctions) SetData(v []Auction) {
	o.Data = v
}

// GetTotal returns the Total field value
func (o *Auctions) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *Auctions) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *Auctions) SetTotal(v int64) {
	o.Total = v
}

func (o Auctions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Auctions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *Auctions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuctions := _Auctions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuctions)

	if err != nil {
		return err
	}

	*o = Auctions(varAuctions)

	return err
}

type NullableAuctions struct {
	value *Auctions
	isSet bool
}

func (v NullableAuctions) Get() *Auctions {
	return v.value
}

func (v *NullableAuctions) Set(val *Auctions) {
	v.value = val
	v.isSet = true
}

func (v NullableAuctions) IsSet() bool {
	return v.isSet
}

func (v *NullableAuctions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuctions(val *Auctions) *NullableAuctions {
	return &NullableAuctions{value: val, isSet: true}
}

func (v NullableAuctions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuctions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


