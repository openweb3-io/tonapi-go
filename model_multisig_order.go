/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MultisigOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultisigOrder{}

// MultisigOrder struct for MultisigOrder
type MultisigOrder struct {
	Address string `json:"address"`
	OrderSeqno int64 `json:"order_seqno"`
	Threshold int32 `json:"threshold"`
	SentForExecution bool `json:"sent_for_execution"`
	Signers []string `json:"signers"`
	ApprovalsNum int32 `json:"approvals_num"`
	ExpirationDate int64 `json:"expiration_date"`
}

type _MultisigOrder MultisigOrder

// NewMultisigOrder instantiates a new MultisigOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultisigOrder(address string, orderSeqno int64, threshold int32, sentForExecution bool, signers []string, approvalsNum int32, expirationDate int64) *MultisigOrder {
	this := MultisigOrder{}
	this.Address = address
	this.OrderSeqno = orderSeqno
	this.Threshold = threshold
	this.SentForExecution = sentForExecution
	this.Signers = signers
	this.ApprovalsNum = approvalsNum
	this.ExpirationDate = expirationDate
	return &this
}

// NewMultisigOrderWithDefaults instantiates a new MultisigOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultisigOrderWithDefaults() *MultisigOrder {
	this := MultisigOrder{}
	return &this
}

// GetAddress returns the Address field value
func (o *MultisigOrder) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *MultisigOrder) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *MultisigOrder) SetAddress(v string) {
	o.Address = v
}

// GetOrderSeqno returns the OrderSeqno field value
func (o *MultisigOrder) GetOrderSeqno() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OrderSeqno
}

// GetOrderSeqnoOk returns a tuple with the OrderSeqno field value
// and a boolean to check if the value has been set.
func (o *MultisigOrder) GetOrderSeqnoOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderSeqno, true
}

// SetOrderSeqno sets field value
func (o *MultisigOrder) SetOrderSeqno(v int64) {
	o.OrderSeqno = v
}

// GetThreshold returns the Threshold field value
func (o *MultisigOrder) GetThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *MultisigOrder) GetThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *MultisigOrder) SetThreshold(v int32) {
	o.Threshold = v
}

// GetSentForExecution returns the SentForExecution field value
func (o *MultisigOrder) GetSentForExecution() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SentForExecution
}

// GetSentForExecutionOk returns a tuple with the SentForExecution field value
// and a boolean to check if the value has been set.
func (o *MultisigOrder) GetSentForExecutionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SentForExecution, true
}

// SetSentForExecution sets field value
func (o *MultisigOrder) SetSentForExecution(v bool) {
	o.SentForExecution = v
}

// GetSigners returns the Signers field value
func (o *MultisigOrder) GetSigners() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value
// and a boolean to check if the value has been set.
func (o *MultisigOrder) GetSignersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signers, true
}

// SetSigners sets field value
func (o *MultisigOrder) SetSigners(v []string) {
	o.Signers = v
}

// GetApprovalsNum returns the ApprovalsNum field value
func (o *MultisigOrder) GetApprovalsNum() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ApprovalsNum
}

// GetApprovalsNumOk returns a tuple with the ApprovalsNum field value
// and a boolean to check if the value has been set.
func (o *MultisigOrder) GetApprovalsNumOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApprovalsNum, true
}

// SetApprovalsNum sets field value
func (o *MultisigOrder) SetApprovalsNum(v int32) {
	o.ApprovalsNum = v
}

// GetExpirationDate returns the ExpirationDate field value
func (o *MultisigOrder) GetExpirationDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value
// and a boolean to check if the value has been set.
func (o *MultisigOrder) GetExpirationDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationDate, true
}

// SetExpirationDate sets field value
func (o *MultisigOrder) SetExpirationDate(v int64) {
	o.ExpirationDate = v
}

func (o MultisigOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultisigOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["order_seqno"] = o.OrderSeqno
	toSerialize["threshold"] = o.Threshold
	toSerialize["sent_for_execution"] = o.SentForExecution
	toSerialize["signers"] = o.Signers
	toSerialize["approvals_num"] = o.ApprovalsNum
	toSerialize["expiration_date"] = o.ExpirationDate
	return toSerialize, nil
}

func (o *MultisigOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"order_seqno",
		"threshold",
		"sent_for_execution",
		"signers",
		"approvals_num",
		"expiration_date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultisigOrder := _MultisigOrder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMultisigOrder)

	if err != nil {
		return err
	}

	*o = MultisigOrder(varMultisigOrder)

	return err
}

type NullableMultisigOrder struct {
	value *MultisigOrder
	isSet bool
}

func (v NullableMultisigOrder) Get() *MultisigOrder {
	return v.value
}

func (v *NullableMultisigOrder) Set(val *MultisigOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableMultisigOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableMultisigOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultisigOrder(val *MultisigOrder) *NullableMultisigOrder {
	return &NullableMultisigOrder{value: val, isSet: true}
}

func (v NullableMultisigOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultisigOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


