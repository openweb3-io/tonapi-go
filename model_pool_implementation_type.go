/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"fmt"
)

// PoolImplementationType the model 'PoolImplementationType'
type PoolImplementationType string

// List of PoolImplementationType
const (
	POOLIMPLEMENTATIONTYPE_WHALES PoolImplementationType = "whales"
	POOLIMPLEMENTATIONTYPE_TF PoolImplementationType = "tf"
	POOLIMPLEMENTATIONTYPE_LIQUID_TF PoolImplementationType = "liquidTF"
)

// All allowed values of PoolImplementationType enum
var AllowedPoolImplementationTypeEnumValues = []PoolImplementationType{
	"whales",
	"tf",
	"liquidTF",
}

func (v *PoolImplementationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PoolImplementationType(value)
	for _, existing := range AllowedPoolImplementationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PoolImplementationType", value)
}

// NewPoolImplementationTypeFromValue returns a pointer to a valid PoolImplementationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPoolImplementationTypeFromValue(v string) (*PoolImplementationType, error) {
	ev := PoolImplementationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PoolImplementationType: valid values are %v", v, AllowedPoolImplementationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PoolImplementationType) IsValid() bool {
	for _, existing := range AllowedPoolImplementationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PoolImplementationType value
func (v PoolImplementationType) Ptr() *PoolImplementationType {
	return &v
}

type NullablePoolImplementationType struct {
	value *PoolImplementationType
	isSet bool
}

func (v NullablePoolImplementationType) Get() *PoolImplementationType {
	return v.value
}

func (v *NullablePoolImplementationType) Set(val *PoolImplementationType) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolImplementationType) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolImplementationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolImplementationType(val *PoolImplementationType) *NullablePoolImplementationType {
	return &NullablePoolImplementationType{value: val, isSet: true}
}

func (v NullablePoolImplementationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolImplementationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

