/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"fmt"
)

// ComputeSkipReason the model 'ComputeSkipReason'
type ComputeSkipReason string

// List of ComputeSkipReason
const (
	COMPUTESKIPREASON_NO_STATE ComputeSkipReason = "cskip_no_state"
	COMPUTESKIPREASON_BAD_STATE ComputeSkipReason = "cskip_bad_state"
	COMPUTESKIPREASON_NO_GAS ComputeSkipReason = "cskip_no_gas"
)

// All allowed values of ComputeSkipReason enum
var AllowedComputeSkipReasonEnumValues = []ComputeSkipReason{
	"cskip_no_state",
	"cskip_bad_state",
	"cskip_no_gas",
}

func (v *ComputeSkipReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ComputeSkipReason(value)
	for _, existing := range AllowedComputeSkipReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ComputeSkipReason", value)
}

// NewComputeSkipReasonFromValue returns a pointer to a valid ComputeSkipReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewComputeSkipReasonFromValue(v string) (*ComputeSkipReason, error) {
	ev := ComputeSkipReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ComputeSkipReason: valid values are %v", v, AllowedComputeSkipReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ComputeSkipReason) IsValid() bool {
	for _, existing := range AllowedComputeSkipReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ComputeSkipReason value
func (v ComputeSkipReason) Ptr() *ComputeSkipReason {
	return &v
}

type NullableComputeSkipReason struct {
	value *ComputeSkipReason
	isSet bool
}

func (v NullableComputeSkipReason) Get() *ComputeSkipReason {
	return v.value
}

func (v *NullableComputeSkipReason) Set(val *ComputeSkipReason) {
	v.value = val
	v.isSet = true
}

func (v NullableComputeSkipReason) IsSet() bool {
	return v.isSet
}

func (v *NullableComputeSkipReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputeSkipReason(val *ComputeSkipReason) *NullableComputeSkipReason {
	return &NullableComputeSkipReason{value: val, isSet: true}
}

func (v NullableComputeSkipReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputeSkipReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

