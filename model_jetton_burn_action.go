/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonBurnAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonBurnAction{}

// JettonBurnAction struct for JettonBurnAction
type JettonBurnAction struct {
	Sender AccountAddress `json:"sender"`
	SendersWallet string `json:"senders_wallet"`
	// amount in quanta of tokens
	Amount string `json:"amount"`
	Jetton JettonPreview `json:"jetton"`
}

type _JettonBurnAction JettonBurnAction

// NewJettonBurnAction instantiates a new JettonBurnAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonBurnAction(sender AccountAddress, sendersWallet string, amount string, jetton JettonPreview) *JettonBurnAction {
	this := JettonBurnAction{}
	this.Sender = sender
	this.SendersWallet = sendersWallet
	this.Amount = amount
	this.Jetton = jetton
	return &this
}

// NewJettonBurnActionWithDefaults instantiates a new JettonBurnAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonBurnActionWithDefaults() *JettonBurnAction {
	this := JettonBurnAction{}
	return &this
}

// GetSender returns the Sender field value
func (o *JettonBurnAction) GetSender() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *JettonBurnAction) GetSenderOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *JettonBurnAction) SetSender(v AccountAddress) {
	o.Sender = v
}

// GetSendersWallet returns the SendersWallet field value
func (o *JettonBurnAction) GetSendersWallet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SendersWallet
}

// GetSendersWalletOk returns a tuple with the SendersWallet field value
// and a boolean to check if the value has been set.
func (o *JettonBurnAction) GetSendersWalletOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SendersWallet, true
}

// SetSendersWallet sets field value
func (o *JettonBurnAction) SetSendersWallet(v string) {
	o.SendersWallet = v
}

// GetAmount returns the Amount field value
func (o *JettonBurnAction) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *JettonBurnAction) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *JettonBurnAction) SetAmount(v string) {
	o.Amount = v
}

// GetJetton returns the Jetton field value
func (o *JettonBurnAction) GetJetton() JettonPreview {
	if o == nil {
		var ret JettonPreview
		return ret
	}

	return o.Jetton
}

// GetJettonOk returns a tuple with the Jetton field value
// and a boolean to check if the value has been set.
func (o *JettonBurnAction) GetJettonOk() (*JettonPreview, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jetton, true
}

// SetJetton sets field value
func (o *JettonBurnAction) SetJetton(v JettonPreview) {
	o.Jetton = v
}

func (o JettonBurnAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonBurnAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sender"] = o.Sender
	toSerialize["senders_wallet"] = o.SendersWallet
	toSerialize["amount"] = o.Amount
	toSerialize["jetton"] = o.Jetton
	return toSerialize, nil
}

func (o *JettonBurnAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sender",
		"senders_wallet",
		"amount",
		"jetton",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonBurnAction := _JettonBurnAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonBurnAction)

	if err != nil {
		return err
	}

	*o = JettonBurnAction(varJettonBurnAction)

	return err
}

type NullableJettonBurnAction struct {
	value *JettonBurnAction
	isSet bool
}

func (v NullableJettonBurnAction) Get() *JettonBurnAction {
	return v.value
}

func (v *NullableJettonBurnAction) Set(val *JettonBurnAction) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonBurnAction) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonBurnAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonBurnAction(val *JettonBurnAction) *NullableJettonBurnAction {
	return &NullableJettonBurnAction{value: val, isSet: true}
}

func (v NullableJettonBurnAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonBurnAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


