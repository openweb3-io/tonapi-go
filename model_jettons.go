/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Jettons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Jettons{}

// Jettons struct for Jettons
type Jettons struct {
	Jettons []JettonInfo `json:"jettons"`
}

type _Jettons Jettons

// NewJettons instantiates a new Jettons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettons(jettons []JettonInfo) *Jettons {
	this := Jettons{}
	this.Jettons = jettons
	return &this
}

// NewJettonsWithDefaults instantiates a new Jettons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonsWithDefaults() *Jettons {
	this := Jettons{}
	return &this
}

// GetJettons returns the Jettons field value
func (o *Jettons) GetJettons() []JettonInfo {
	if o == nil {
		var ret []JettonInfo
		return ret
	}

	return o.Jettons
}

// GetJettonsOk returns a tuple with the Jettons field value
// and a boolean to check if the value has been set.
func (o *Jettons) GetJettonsOk() ([]JettonInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Jettons, true
}

// SetJettons sets field value
func (o *Jettons) SetJettons(v []JettonInfo) {
	o.Jettons = v
}

func (o Jettons) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Jettons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jettons"] = o.Jettons
	return toSerialize, nil
}

func (o *Jettons) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jettons",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettons := _Jettons{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettons)

	if err != nil {
		return err
	}

	*o = Jettons(varJettons)

	return err
}

type NullableJettons struct {
	value *Jettons
	isSet bool
}

func (v NullableJettons) Get() *Jettons {
	return v.value
}

func (v *NullableJettons) Set(val *Jettons) {
	v.value = val
	v.isSet = true
}

func (v NullableJettons) IsSet() bool {
	return v.isSet
}

func (v *NullableJettons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettons(val *Jettons) *NullableJettons {
	return &NullableJettons{value: val, isSet: true}
}

func (v NullableJettons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


