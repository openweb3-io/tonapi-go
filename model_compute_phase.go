/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ComputePhase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputePhase{}

// ComputePhase struct for ComputePhase
type ComputePhase struct {
	Skipped bool `json:"skipped"`
	SkipReason *ComputeSkipReason `json:"skip_reason,omitempty"`
	Success *bool `json:"success,omitempty"`
	GasFees *int64 `json:"gas_fees,omitempty"`
	GasUsed *int64 `json:"gas_used,omitempty"`
	VmSteps *int32 `json:"vm_steps,omitempty"`
	ExitCode *int32 `json:"exit_code,omitempty"`
	ExitCodeDescription *string `json:"exit_code_description,omitempty"`
}

type _ComputePhase ComputePhase

// NewComputePhase instantiates a new ComputePhase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputePhase(skipped bool) *ComputePhase {
	this := ComputePhase{}
	this.Skipped = skipped
	return &this
}

// NewComputePhaseWithDefaults instantiates a new ComputePhase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputePhaseWithDefaults() *ComputePhase {
	this := ComputePhase{}
	return &this
}

// GetSkipped returns the Skipped field value
func (o *ComputePhase) GetSkipped() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Skipped
}

// GetSkippedOk returns a tuple with the Skipped field value
// and a boolean to check if the value has been set.
func (o *ComputePhase) GetSkippedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Skipped, true
}

// SetSkipped sets field value
func (o *ComputePhase) SetSkipped(v bool) {
	o.Skipped = v
}

// GetSkipReason returns the SkipReason field value if set, zero value otherwise.
func (o *ComputePhase) GetSkipReason() ComputeSkipReason {
	if o == nil || IsNil(o.SkipReason) {
		var ret ComputeSkipReason
		return ret
	}
	return *o.SkipReason
}

// GetSkipReasonOk returns a tuple with the SkipReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhase) GetSkipReasonOk() (*ComputeSkipReason, bool) {
	if o == nil || IsNil(o.SkipReason) {
		return nil, false
	}
	return o.SkipReason, true
}

// HasSkipReason returns a boolean if a field has been set.
func (o *ComputePhase) HasSkipReason() bool {
	if o != nil && !IsNil(o.SkipReason) {
		return true
	}

	return false
}

// SetSkipReason gets a reference to the given ComputeSkipReason and assigns it to the SkipReason field.
func (o *ComputePhase) SetSkipReason(v ComputeSkipReason) {
	o.SkipReason = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ComputePhase) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhase) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ComputePhase) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *ComputePhase) SetSuccess(v bool) {
	o.Success = &v
}

// GetGasFees returns the GasFees field value if set, zero value otherwise.
func (o *ComputePhase) GetGasFees() int64 {
	if o == nil || IsNil(o.GasFees) {
		var ret int64
		return ret
	}
	return *o.GasFees
}

// GetGasFeesOk returns a tuple with the GasFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhase) GetGasFeesOk() (*int64, bool) {
	if o == nil || IsNil(o.GasFees) {
		return nil, false
	}
	return o.GasFees, true
}

// HasGasFees returns a boolean if a field has been set.
func (o *ComputePhase) HasGasFees() bool {
	if o != nil && !IsNil(o.GasFees) {
		return true
	}

	return false
}

// SetGasFees gets a reference to the given int64 and assigns it to the GasFees field.
func (o *ComputePhase) SetGasFees(v int64) {
	o.GasFees = &v
}

// GetGasUsed returns the GasUsed field value if set, zero value otherwise.
func (o *ComputePhase) GetGasUsed() int64 {
	if o == nil || IsNil(o.GasUsed) {
		var ret int64
		return ret
	}
	return *o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhase) GetGasUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.GasUsed) {
		return nil, false
	}
	return o.GasUsed, true
}

// HasGasUsed returns a boolean if a field has been set.
func (o *ComputePhase) HasGasUsed() bool {
	if o != nil && !IsNil(o.GasUsed) {
		return true
	}

	return false
}

// SetGasUsed gets a reference to the given int64 and assigns it to the GasUsed field.
func (o *ComputePhase) SetGasUsed(v int64) {
	o.GasUsed = &v
}

// GetVmSteps returns the VmSteps field value if set, zero value otherwise.
func (o *ComputePhase) GetVmSteps() int32 {
	if o == nil || IsNil(o.VmSteps) {
		var ret int32
		return ret
	}
	return *o.VmSteps
}

// GetVmStepsOk returns a tuple with the VmSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhase) GetVmStepsOk() (*int32, bool) {
	if o == nil || IsNil(o.VmSteps) {
		return nil, false
	}
	return o.VmSteps, true
}

// HasVmSteps returns a boolean if a field has been set.
func (o *ComputePhase) HasVmSteps() bool {
	if o != nil && !IsNil(o.VmSteps) {
		return true
	}

	return false
}

// SetVmSteps gets a reference to the given int32 and assigns it to the VmSteps field.
func (o *ComputePhase) SetVmSteps(v int32) {
	o.VmSteps = &v
}

// GetExitCode returns the ExitCode field value if set, zero value otherwise.
func (o *ComputePhase) GetExitCode() int32 {
	if o == nil || IsNil(o.ExitCode) {
		var ret int32
		return ret
	}
	return *o.ExitCode
}

// GetExitCodeOk returns a tuple with the ExitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhase) GetExitCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.ExitCode) {
		return nil, false
	}
	return o.ExitCode, true
}

// HasExitCode returns a boolean if a field has been set.
func (o *ComputePhase) HasExitCode() bool {
	if o != nil && !IsNil(o.ExitCode) {
		return true
	}

	return false
}

// SetExitCode gets a reference to the given int32 and assigns it to the ExitCode field.
func (o *ComputePhase) SetExitCode(v int32) {
	o.ExitCode = &v
}

// GetExitCodeDescription returns the ExitCodeDescription field value if set, zero value otherwise.
func (o *ComputePhase) GetExitCodeDescription() string {
	if o == nil || IsNil(o.ExitCodeDescription) {
		var ret string
		return ret
	}
	return *o.ExitCodeDescription
}

// GetExitCodeDescriptionOk returns a tuple with the ExitCodeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePhase) GetExitCodeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ExitCodeDescription) {
		return nil, false
	}
	return o.ExitCodeDescription, true
}

// HasExitCodeDescription returns a boolean if a field has been set.
func (o *ComputePhase) HasExitCodeDescription() bool {
	if o != nil && !IsNil(o.ExitCodeDescription) {
		return true
	}

	return false
}

// SetExitCodeDescription gets a reference to the given string and assigns it to the ExitCodeDescription field.
func (o *ComputePhase) SetExitCodeDescription(v string) {
	o.ExitCodeDescription = &v
}

func (o ComputePhase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputePhase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["skipped"] = o.Skipped
	if !IsNil(o.SkipReason) {
		toSerialize["skip_reason"] = o.SkipReason
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.GasFees) {
		toSerialize["gas_fees"] = o.GasFees
	}
	if !IsNil(o.GasUsed) {
		toSerialize["gas_used"] = o.GasUsed
	}
	if !IsNil(o.VmSteps) {
		toSerialize["vm_steps"] = o.VmSteps
	}
	if !IsNil(o.ExitCode) {
		toSerialize["exit_code"] = o.ExitCode
	}
	if !IsNil(o.ExitCodeDescription) {
		toSerialize["exit_code_description"] = o.ExitCodeDescription
	}
	return toSerialize, nil
}

func (o *ComputePhase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"skipped",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComputePhase := _ComputePhase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComputePhase)

	if err != nil {
		return err
	}

	*o = ComputePhase(varComputePhase)

	return err
}

type NullableComputePhase struct {
	value *ComputePhase
	isSet bool
}

func (v NullableComputePhase) Get() *ComputePhase {
	return v.value
}

func (v *NullableComputePhase) Set(val *ComputePhase) {
	v.value = val
	v.isSet = true
}

func (v NullableComputePhase) IsSet() bool {
	return v.isSet
}

func (v *NullableComputePhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputePhase(val *ComputePhase) *NullableComputePhase {
	return &NullableComputePhase{value: val, isSet: true}
}

func (v NullableComputePhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputePhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


