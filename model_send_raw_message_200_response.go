/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendRawMessage200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendRawMessage200Response{}

// SendRawMessage200Response struct for SendRawMessage200Response
type SendRawMessage200Response struct {
	Code int32 `json:"code"`
}

type _SendRawMessage200Response SendRawMessage200Response

// NewSendRawMessage200Response instantiates a new SendRawMessage200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendRawMessage200Response(code int32) *SendRawMessage200Response {
	this := SendRawMessage200Response{}
	this.Code = code
	return &this
}

// NewSendRawMessage200ResponseWithDefaults instantiates a new SendRawMessage200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendRawMessage200ResponseWithDefaults() *SendRawMessage200Response {
	this := SendRawMessage200Response{}
	return &this
}

// GetCode returns the Code field value
func (o *SendRawMessage200Response) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *SendRawMessage200Response) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *SendRawMessage200Response) SetCode(v int32) {
	o.Code = v
}

func (o SendRawMessage200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendRawMessage200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	return toSerialize, nil
}

func (o *SendRawMessage200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendRawMessage200Response := _SendRawMessage200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendRawMessage200Response)

	if err != nil {
		return err
	}

	*o = SendRawMessage200Response(varSendRawMessage200Response)

	return err
}

type NullableSendRawMessage200Response struct {
	value *SendRawMessage200Response
	isSet bool
}

func (v NullableSendRawMessage200Response) Get() *SendRawMessage200Response {
	return v.value
}

func (v *NullableSendRawMessage200Response) Set(val *SendRawMessage200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSendRawMessage200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSendRawMessage200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendRawMessage200Response(val *SendRawMessage200Response) *NullableSendRawMessage200Response {
	return &NullableSendRawMessage200Response{value: val, isSet: true}
}

func (v NullableSendRawMessage200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendRawMessage200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


