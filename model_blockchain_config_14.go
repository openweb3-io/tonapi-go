/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig14 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig14{}

// BlockchainConfig14 The reward in nanoTons for block creation in the TON blockchain.
type BlockchainConfig14 struct {
	MasterchainBlockFee int64 `json:"masterchain_block_fee"`
	BasechainBlockFee int64 `json:"basechain_block_fee"`
}

type _BlockchainConfig14 BlockchainConfig14

// NewBlockchainConfig14 instantiates a new BlockchainConfig14 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig14(masterchainBlockFee int64, basechainBlockFee int64) *BlockchainConfig14 {
	this := BlockchainConfig14{}
	this.MasterchainBlockFee = masterchainBlockFee
	this.BasechainBlockFee = basechainBlockFee
	return &this
}

// NewBlockchainConfig14WithDefaults instantiates a new BlockchainConfig14 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig14WithDefaults() *BlockchainConfig14 {
	this := BlockchainConfig14{}
	return &this
}

// GetMasterchainBlockFee returns the MasterchainBlockFee field value
func (o *BlockchainConfig14) GetMasterchainBlockFee() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MasterchainBlockFee
}

// GetMasterchainBlockFeeOk returns a tuple with the MasterchainBlockFee field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig14) GetMasterchainBlockFeeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MasterchainBlockFee, true
}

// SetMasterchainBlockFee sets field value
func (o *BlockchainConfig14) SetMasterchainBlockFee(v int64) {
	o.MasterchainBlockFee = v
}

// GetBasechainBlockFee returns the BasechainBlockFee field value
func (o *BlockchainConfig14) GetBasechainBlockFee() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BasechainBlockFee
}

// GetBasechainBlockFeeOk returns a tuple with the BasechainBlockFee field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig14) GetBasechainBlockFeeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BasechainBlockFee, true
}

// SetBasechainBlockFee sets field value
func (o *BlockchainConfig14) SetBasechainBlockFee(v int64) {
	o.BasechainBlockFee = v
}

func (o BlockchainConfig14) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig14) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["masterchain_block_fee"] = o.MasterchainBlockFee
	toSerialize["basechain_block_fee"] = o.BasechainBlockFee
	return toSerialize, nil
}

func (o *BlockchainConfig14) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"masterchain_block_fee",
		"basechain_block_fee",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig14 := _BlockchainConfig14{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig14)

	if err != nil {
		return err
	}

	*o = BlockchainConfig14(varBlockchainConfig14)

	return err
}

type NullableBlockchainConfig14 struct {
	value *BlockchainConfig14
	isSet bool
}

func (v NullableBlockchainConfig14) Get() *BlockchainConfig14 {
	return v.value
}

func (v *NullableBlockchainConfig14) Set(val *BlockchainConfig14) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig14) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig14) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig14(val *BlockchainConfig14) *NullableBlockchainConfig14 {
	return &NullableBlockchainConfig14{value: val, isSet: true}
}

func (v NullableBlockchainConfig14) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig14) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


