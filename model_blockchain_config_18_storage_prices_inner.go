/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig18StoragePricesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig18StoragePricesInner{}

// BlockchainConfig18StoragePricesInner struct for BlockchainConfig18StoragePricesInner
type BlockchainConfig18StoragePricesInner struct {
	UtimeSince int64 `json:"utime_since"`
	BitPricePs int64 `json:"bit_price_ps"`
	CellPricePs int64 `json:"cell_price_ps"`
	McBitPricePs int64 `json:"mc_bit_price_ps"`
	McCellPricePs int64 `json:"mc_cell_price_ps"`
}

type _BlockchainConfig18StoragePricesInner BlockchainConfig18StoragePricesInner

// NewBlockchainConfig18StoragePricesInner instantiates a new BlockchainConfig18StoragePricesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig18StoragePricesInner(utimeSince int64, bitPricePs int64, cellPricePs int64, mcBitPricePs int64, mcCellPricePs int64) *BlockchainConfig18StoragePricesInner {
	this := BlockchainConfig18StoragePricesInner{}
	this.UtimeSince = utimeSince
	this.BitPricePs = bitPricePs
	this.CellPricePs = cellPricePs
	this.McBitPricePs = mcBitPricePs
	this.McCellPricePs = mcCellPricePs
	return &this
}

// NewBlockchainConfig18StoragePricesInnerWithDefaults instantiates a new BlockchainConfig18StoragePricesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig18StoragePricesInnerWithDefaults() *BlockchainConfig18StoragePricesInner {
	this := BlockchainConfig18StoragePricesInner{}
	return &this
}

// GetUtimeSince returns the UtimeSince field value
func (o *BlockchainConfig18StoragePricesInner) GetUtimeSince() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UtimeSince
}

// GetUtimeSinceOk returns a tuple with the UtimeSince field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig18StoragePricesInner) GetUtimeSinceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UtimeSince, true
}

// SetUtimeSince sets field value
func (o *BlockchainConfig18StoragePricesInner) SetUtimeSince(v int64) {
	o.UtimeSince = v
}

// GetBitPricePs returns the BitPricePs field value
func (o *BlockchainConfig18StoragePricesInner) GetBitPricePs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BitPricePs
}

// GetBitPricePsOk returns a tuple with the BitPricePs field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig18StoragePricesInner) GetBitPricePsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BitPricePs, true
}

// SetBitPricePs sets field value
func (o *BlockchainConfig18StoragePricesInner) SetBitPricePs(v int64) {
	o.BitPricePs = v
}

// GetCellPricePs returns the CellPricePs field value
func (o *BlockchainConfig18StoragePricesInner) GetCellPricePs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CellPricePs
}

// GetCellPricePsOk returns a tuple with the CellPricePs field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig18StoragePricesInner) GetCellPricePsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CellPricePs, true
}

// SetCellPricePs sets field value
func (o *BlockchainConfig18StoragePricesInner) SetCellPricePs(v int64) {
	o.CellPricePs = v
}

// GetMcBitPricePs returns the McBitPricePs field value
func (o *BlockchainConfig18StoragePricesInner) GetMcBitPricePs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.McBitPricePs
}

// GetMcBitPricePsOk returns a tuple with the McBitPricePs field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig18StoragePricesInner) GetMcBitPricePsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.McBitPricePs, true
}

// SetMcBitPricePs sets field value
func (o *BlockchainConfig18StoragePricesInner) SetMcBitPricePs(v int64) {
	o.McBitPricePs = v
}

// GetMcCellPricePs returns the McCellPricePs field value
func (o *BlockchainConfig18StoragePricesInner) GetMcCellPricePs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.McCellPricePs
}

// GetMcCellPricePsOk returns a tuple with the McCellPricePs field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig18StoragePricesInner) GetMcCellPricePsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.McCellPricePs, true
}

// SetMcCellPricePs sets field value
func (o *BlockchainConfig18StoragePricesInner) SetMcCellPricePs(v int64) {
	o.McCellPricePs = v
}

func (o BlockchainConfig18StoragePricesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig18StoragePricesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["utime_since"] = o.UtimeSince
	toSerialize["bit_price_ps"] = o.BitPricePs
	toSerialize["cell_price_ps"] = o.CellPricePs
	toSerialize["mc_bit_price_ps"] = o.McBitPricePs
	toSerialize["mc_cell_price_ps"] = o.McCellPricePs
	return toSerialize, nil
}

func (o *BlockchainConfig18StoragePricesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"utime_since",
		"bit_price_ps",
		"cell_price_ps",
		"mc_bit_price_ps",
		"mc_cell_price_ps",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig18StoragePricesInner := _BlockchainConfig18StoragePricesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig18StoragePricesInner)

	if err != nil {
		return err
	}

	*o = BlockchainConfig18StoragePricesInner(varBlockchainConfig18StoragePricesInner)

	return err
}

type NullableBlockchainConfig18StoragePricesInner struct {
	value *BlockchainConfig18StoragePricesInner
	isSet bool
}

func (v NullableBlockchainConfig18StoragePricesInner) Get() *BlockchainConfig18StoragePricesInner {
	return v.value
}

func (v *NullableBlockchainConfig18StoragePricesInner) Set(val *BlockchainConfig18StoragePricesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig18StoragePricesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig18StoragePricesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig18StoragePricesInner(val *BlockchainConfig18StoragePricesInner) *NullableBlockchainConfig18StoragePricesInner {
	return &NullableBlockchainConfig18StoragePricesInner{value: val, isSet: true}
}

func (v NullableBlockchainConfig18StoragePricesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig18StoragePricesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


