/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigProposalSetup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigProposalSetup{}

// ConfigProposalSetup struct for ConfigProposalSetup
type ConfigProposalSetup struct {
	MinTotRounds int32 `json:"min_tot_rounds"`
	MaxTotRounds int32 `json:"max_tot_rounds"`
	MinWins int32 `json:"min_wins"`
	MaxLosses int32 `json:"max_losses"`
	MinStoreSec int64 `json:"min_store_sec"`
	MaxStoreSec int64 `json:"max_store_sec"`
	BitPrice int64 `json:"bit_price"`
	CellPrice int64 `json:"cell_price"`
}

type _ConfigProposalSetup ConfigProposalSetup

// NewConfigProposalSetup instantiates a new ConfigProposalSetup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigProposalSetup(minTotRounds int32, maxTotRounds int32, minWins int32, maxLosses int32, minStoreSec int64, maxStoreSec int64, bitPrice int64, cellPrice int64) *ConfigProposalSetup {
	this := ConfigProposalSetup{}
	this.MinTotRounds = minTotRounds
	this.MaxTotRounds = maxTotRounds
	this.MinWins = minWins
	this.MaxLosses = maxLosses
	this.MinStoreSec = minStoreSec
	this.MaxStoreSec = maxStoreSec
	this.BitPrice = bitPrice
	this.CellPrice = cellPrice
	return &this
}

// NewConfigProposalSetupWithDefaults instantiates a new ConfigProposalSetup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigProposalSetupWithDefaults() *ConfigProposalSetup {
	this := ConfigProposalSetup{}
	return &this
}

// GetMinTotRounds returns the MinTotRounds field value
func (o *ConfigProposalSetup) GetMinTotRounds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinTotRounds
}

// GetMinTotRoundsOk returns a tuple with the MinTotRounds field value
// and a boolean to check if the value has been set.
func (o *ConfigProposalSetup) GetMinTotRoundsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinTotRounds, true
}

// SetMinTotRounds sets field value
func (o *ConfigProposalSetup) SetMinTotRounds(v int32) {
	o.MinTotRounds = v
}

// GetMaxTotRounds returns the MaxTotRounds field value
func (o *ConfigProposalSetup) GetMaxTotRounds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxTotRounds
}

// GetMaxTotRoundsOk returns a tuple with the MaxTotRounds field value
// and a boolean to check if the value has been set.
func (o *ConfigProposalSetup) GetMaxTotRoundsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxTotRounds, true
}

// SetMaxTotRounds sets field value
func (o *ConfigProposalSetup) SetMaxTotRounds(v int32) {
	o.MaxTotRounds = v
}

// GetMinWins returns the MinWins field value
func (o *ConfigProposalSetup) GetMinWins() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinWins
}

// GetMinWinsOk returns a tuple with the MinWins field value
// and a boolean to check if the value has been set.
func (o *ConfigProposalSetup) GetMinWinsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinWins, true
}

// SetMinWins sets field value
func (o *ConfigProposalSetup) SetMinWins(v int32) {
	o.MinWins = v
}

// GetMaxLosses returns the MaxLosses field value
func (o *ConfigProposalSetup) GetMaxLosses() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxLosses
}

// GetMaxLossesOk returns a tuple with the MaxLosses field value
// and a boolean to check if the value has been set.
func (o *ConfigProposalSetup) GetMaxLossesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxLosses, true
}

// SetMaxLosses sets field value
func (o *ConfigProposalSetup) SetMaxLosses(v int32) {
	o.MaxLosses = v
}

// GetMinStoreSec returns the MinStoreSec field value
func (o *ConfigProposalSetup) GetMinStoreSec() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinStoreSec
}

// GetMinStoreSecOk returns a tuple with the MinStoreSec field value
// and a boolean to check if the value has been set.
func (o *ConfigProposalSetup) GetMinStoreSecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinStoreSec, true
}

// SetMinStoreSec sets field value
func (o *ConfigProposalSetup) SetMinStoreSec(v int64) {
	o.MinStoreSec = v
}

// GetMaxStoreSec returns the MaxStoreSec field value
func (o *ConfigProposalSetup) GetMaxStoreSec() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxStoreSec
}

// GetMaxStoreSecOk returns a tuple with the MaxStoreSec field value
// and a boolean to check if the value has been set.
func (o *ConfigProposalSetup) GetMaxStoreSecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxStoreSec, true
}

// SetMaxStoreSec sets field value
func (o *ConfigProposalSetup) SetMaxStoreSec(v int64) {
	o.MaxStoreSec = v
}

// GetBitPrice returns the BitPrice field value
func (o *ConfigProposalSetup) GetBitPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BitPrice
}

// GetBitPriceOk returns a tuple with the BitPrice field value
// and a boolean to check if the value has been set.
func (o *ConfigProposalSetup) GetBitPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BitPrice, true
}

// SetBitPrice sets field value
func (o *ConfigProposalSetup) SetBitPrice(v int64) {
	o.BitPrice = v
}

// GetCellPrice returns the CellPrice field value
func (o *ConfigProposalSetup) GetCellPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CellPrice
}

// GetCellPriceOk returns a tuple with the CellPrice field value
// and a boolean to check if the value has been set.
func (o *ConfigProposalSetup) GetCellPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CellPrice, true
}

// SetCellPrice sets field value
func (o *ConfigProposalSetup) SetCellPrice(v int64) {
	o.CellPrice = v
}

func (o ConfigProposalSetup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigProposalSetup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["min_tot_rounds"] = o.MinTotRounds
	toSerialize["max_tot_rounds"] = o.MaxTotRounds
	toSerialize["min_wins"] = o.MinWins
	toSerialize["max_losses"] = o.MaxLosses
	toSerialize["min_store_sec"] = o.MinStoreSec
	toSerialize["max_store_sec"] = o.MaxStoreSec
	toSerialize["bit_price"] = o.BitPrice
	toSerialize["cell_price"] = o.CellPrice
	return toSerialize, nil
}

func (o *ConfigProposalSetup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"min_tot_rounds",
		"max_tot_rounds",
		"min_wins",
		"max_losses",
		"min_store_sec",
		"max_store_sec",
		"bit_price",
		"cell_price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigProposalSetup := _ConfigProposalSetup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigProposalSetup)

	if err != nil {
		return err
	}

	*o = ConfigProposalSetup(varConfigProposalSetup)

	return err
}

type NullableConfigProposalSetup struct {
	value *ConfigProposalSetup
	isSet bool
}

func (v NullableConfigProposalSetup) Get() *ConfigProposalSetup {
	return v.value
}

func (v *NullableConfigProposalSetup) Set(val *ConfigProposalSetup) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigProposalSetup) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigProposalSetup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigProposalSetup(val *ConfigProposalSetup) *NullableConfigProposalSetup {
	return &NullableConfigProposalSetup{value: val, isSet: true}
}

func (v NullableConfigProposalSetup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigProposalSetup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


