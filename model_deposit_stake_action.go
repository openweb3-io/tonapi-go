/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DepositStakeAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DepositStakeAction{}

// DepositStakeAction validator's participation in elections
type DepositStakeAction struct {
	Amount int64 `json:"amount"`
	Staker AccountAddress `json:"staker"`
	Pool AccountAddress `json:"pool"`
	Implementation PoolImplementationType `json:"implementation"`
}

type _DepositStakeAction DepositStakeAction

// NewDepositStakeAction instantiates a new DepositStakeAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepositStakeAction(amount int64, staker AccountAddress, pool AccountAddress, implementation PoolImplementationType) *DepositStakeAction {
	this := DepositStakeAction{}
	this.Amount = amount
	this.Staker = staker
	this.Pool = pool
	this.Implementation = implementation
	return &this
}

// NewDepositStakeActionWithDefaults instantiates a new DepositStakeAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepositStakeActionWithDefaults() *DepositStakeAction {
	this := DepositStakeAction{}
	return &this
}

// GetAmount returns the Amount field value
func (o *DepositStakeAction) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *DepositStakeAction) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *DepositStakeAction) SetAmount(v int64) {
	o.Amount = v
}

// GetStaker returns the Staker field value
func (o *DepositStakeAction) GetStaker() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Staker
}

// GetStakerOk returns a tuple with the Staker field value
// and a boolean to check if the value has been set.
func (o *DepositStakeAction) GetStakerOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Staker, true
}

// SetStaker sets field value
func (o *DepositStakeAction) SetStaker(v AccountAddress) {
	o.Staker = v
}

// GetPool returns the Pool field value
func (o *DepositStakeAction) GetPool() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Pool
}

// GetPoolOk returns a tuple with the Pool field value
// and a boolean to check if the value has been set.
func (o *DepositStakeAction) GetPoolOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pool, true
}

// SetPool sets field value
func (o *DepositStakeAction) SetPool(v AccountAddress) {
	o.Pool = v
}

// GetImplementation returns the Implementation field value
func (o *DepositStakeAction) GetImplementation() PoolImplementationType {
	if o == nil {
		var ret PoolImplementationType
		return ret
	}

	return o.Implementation
}

// GetImplementationOk returns a tuple with the Implementation field value
// and a boolean to check if the value has been set.
func (o *DepositStakeAction) GetImplementationOk() (*PoolImplementationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Implementation, true
}

// SetImplementation sets field value
func (o *DepositStakeAction) SetImplementation(v PoolImplementationType) {
	o.Implementation = v
}

func (o DepositStakeAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepositStakeAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["staker"] = o.Staker
	toSerialize["pool"] = o.Pool
	toSerialize["implementation"] = o.Implementation
	return toSerialize, nil
}

func (o *DepositStakeAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"staker",
		"pool",
		"implementation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDepositStakeAction := _DepositStakeAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDepositStakeAction)

	if err != nil {
		return err
	}

	*o = DepositStakeAction(varDepositStakeAction)

	return err
}

type NullableDepositStakeAction struct {
	value *DepositStakeAction
	isSet bool
}

func (v NullableDepositStakeAction) Get() *DepositStakeAction {
	return v.value
}

func (v *NullableDepositStakeAction) Set(val *DepositStakeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableDepositStakeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableDepositStakeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepositStakeAction(val *DepositStakeAction) *NullableDepositStakeAction {
	return &NullableDepositStakeAction{value: val, isSet: true}
}

func (v NullableDepositStakeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepositStakeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


