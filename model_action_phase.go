/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActionPhase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionPhase{}

// ActionPhase struct for ActionPhase
type ActionPhase struct {
	Success bool `json:"success"`
	ResultCode int32 `json:"result_code"`
	TotalActions int32 `json:"total_actions"`
	SkippedActions int32 `json:"skipped_actions"`
	FwdFees int64 `json:"fwd_fees"`
	TotalFees int64 `json:"total_fees"`
	ResultCodeDescription *string `json:"result_code_description,omitempty"`
}

type _ActionPhase ActionPhase

// NewActionPhase instantiates a new ActionPhase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionPhase(success bool, resultCode int32, totalActions int32, skippedActions int32, fwdFees int64, totalFees int64) *ActionPhase {
	this := ActionPhase{}
	this.Success = success
	this.ResultCode = resultCode
	this.TotalActions = totalActions
	this.SkippedActions = skippedActions
	this.FwdFees = fwdFees
	this.TotalFees = totalFees
	return &this
}

// NewActionPhaseWithDefaults instantiates a new ActionPhase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionPhaseWithDefaults() *ActionPhase {
	this := ActionPhase{}
	return &this
}

// GetSuccess returns the Success field value
func (o *ActionPhase) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *ActionPhase) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *ActionPhase) SetSuccess(v bool) {
	o.Success = v
}

// GetResultCode returns the ResultCode field value
func (o *ActionPhase) GetResultCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResultCode
}

// GetResultCodeOk returns a tuple with the ResultCode field value
// and a boolean to check if the value has been set.
func (o *ActionPhase) GetResultCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultCode, true
}

// SetResultCode sets field value
func (o *ActionPhase) SetResultCode(v int32) {
	o.ResultCode = v
}

// GetTotalActions returns the TotalActions field value
func (o *ActionPhase) GetTotalActions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalActions
}

// GetTotalActionsOk returns a tuple with the TotalActions field value
// and a boolean to check if the value has been set.
func (o *ActionPhase) GetTotalActionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalActions, true
}

// SetTotalActions sets field value
func (o *ActionPhase) SetTotalActions(v int32) {
	o.TotalActions = v
}

// GetSkippedActions returns the SkippedActions field value
func (o *ActionPhase) GetSkippedActions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SkippedActions
}

// GetSkippedActionsOk returns a tuple with the SkippedActions field value
// and a boolean to check if the value has been set.
func (o *ActionPhase) GetSkippedActionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SkippedActions, true
}

// SetSkippedActions sets field value
func (o *ActionPhase) SetSkippedActions(v int32) {
	o.SkippedActions = v
}

// GetFwdFees returns the FwdFees field value
func (o *ActionPhase) GetFwdFees() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FwdFees
}

// GetFwdFeesOk returns a tuple with the FwdFees field value
// and a boolean to check if the value has been set.
func (o *ActionPhase) GetFwdFeesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FwdFees, true
}

// SetFwdFees sets field value
func (o *ActionPhase) SetFwdFees(v int64) {
	o.FwdFees = v
}

// GetTotalFees returns the TotalFees field value
func (o *ActionPhase) GetTotalFees() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalFees
}

// GetTotalFeesOk returns a tuple with the TotalFees field value
// and a boolean to check if the value has been set.
func (o *ActionPhase) GetTotalFeesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFees, true
}

// SetTotalFees sets field value
func (o *ActionPhase) SetTotalFees(v int64) {
	o.TotalFees = v
}

// GetResultCodeDescription returns the ResultCodeDescription field value if set, zero value otherwise.
func (o *ActionPhase) GetResultCodeDescription() string {
	if o == nil || IsNil(o.ResultCodeDescription) {
		var ret string
		return ret
	}
	return *o.ResultCodeDescription
}

// GetResultCodeDescriptionOk returns a tuple with the ResultCodeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionPhase) GetResultCodeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ResultCodeDescription) {
		return nil, false
	}
	return o.ResultCodeDescription, true
}

// HasResultCodeDescription returns a boolean if a field has been set.
func (o *ActionPhase) HasResultCodeDescription() bool {
	if o != nil && !IsNil(o.ResultCodeDescription) {
		return true
	}

	return false
}

// SetResultCodeDescription gets a reference to the given string and assigns it to the ResultCodeDescription field.
func (o *ActionPhase) SetResultCodeDescription(v string) {
	o.ResultCodeDescription = &v
}

func (o ActionPhase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionPhase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["result_code"] = o.ResultCode
	toSerialize["total_actions"] = o.TotalActions
	toSerialize["skipped_actions"] = o.SkippedActions
	toSerialize["fwd_fees"] = o.FwdFees
	toSerialize["total_fees"] = o.TotalFees
	if !IsNil(o.ResultCodeDescription) {
		toSerialize["result_code_description"] = o.ResultCodeDescription
	}
	return toSerialize, nil
}

func (o *ActionPhase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"result_code",
		"total_actions",
		"skipped_actions",
		"fwd_fees",
		"total_fees",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActionPhase := _ActionPhase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActionPhase)

	if err != nil {
		return err
	}

	*o = ActionPhase(varActionPhase)

	return err
}

type NullableActionPhase struct {
	value *ActionPhase
	isSet bool
}

func (v NullableActionPhase) Get() *ActionPhase {
	return v.value
}

func (v *NullableActionPhase) Set(val *ActionPhase) {
	v.value = val
	v.isSet = true
}

func (v NullableActionPhase) IsSet() bool {
	return v.isSet
}

func (v *NullableActionPhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionPhase(val *ActionPhase) *NullableActionPhase {
	return &NullableActionPhase{value: val, isSet: true}
}

func (v NullableActionPhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionPhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


