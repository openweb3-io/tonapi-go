/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig40 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig40{}

// BlockchainConfig40 The configuration for punishment for improper behavior (non-validation). In the absence of the parameter, the default fine size is 101 TON
type BlockchainConfig40 struct {
	MisbehaviourPunishmentConfig MisbehaviourPunishmentConfig `json:"misbehaviour_punishment_config"`
}

type _BlockchainConfig40 BlockchainConfig40

// NewBlockchainConfig40 instantiates a new BlockchainConfig40 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig40(misbehaviourPunishmentConfig MisbehaviourPunishmentConfig) *BlockchainConfig40 {
	this := BlockchainConfig40{}
	this.MisbehaviourPunishmentConfig = misbehaviourPunishmentConfig
	return &this
}

// NewBlockchainConfig40WithDefaults instantiates a new BlockchainConfig40 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig40WithDefaults() *BlockchainConfig40 {
	this := BlockchainConfig40{}
	return &this
}

// GetMisbehaviourPunishmentConfig returns the MisbehaviourPunishmentConfig field value
func (o *BlockchainConfig40) GetMisbehaviourPunishmentConfig() MisbehaviourPunishmentConfig {
	if o == nil {
		var ret MisbehaviourPunishmentConfig
		return ret
	}

	return o.MisbehaviourPunishmentConfig
}

// GetMisbehaviourPunishmentConfigOk returns a tuple with the MisbehaviourPunishmentConfig field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig40) GetMisbehaviourPunishmentConfigOk() (*MisbehaviourPunishmentConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MisbehaviourPunishmentConfig, true
}

// SetMisbehaviourPunishmentConfig sets field value
func (o *BlockchainConfig40) SetMisbehaviourPunishmentConfig(v MisbehaviourPunishmentConfig) {
	o.MisbehaviourPunishmentConfig = v
}

func (o BlockchainConfig40) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig40) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["misbehaviour_punishment_config"] = o.MisbehaviourPunishmentConfig
	return toSerialize, nil
}

func (o *BlockchainConfig40) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"misbehaviour_punishment_config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig40 := _BlockchainConfig40{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig40)

	if err != nil {
		return err
	}

	*o = BlockchainConfig40(varBlockchainConfig40)

	return err
}

type NullableBlockchainConfig40 struct {
	value *BlockchainConfig40
	isSet bool
}

func (v NullableBlockchainConfig40) Get() *BlockchainConfig40 {
	return v.value
}

func (v *NullableBlockchainConfig40) Set(val *BlockchainConfig40) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig40) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig40) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig40(val *BlockchainConfig40) *NullableBlockchainConfig40 {
	return &NullableBlockchainConfig40{value: val, isSet: true}
}

func (v NullableBlockchainConfig40) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig40) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


