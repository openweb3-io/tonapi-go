/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Multisig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Multisig{}

// Multisig struct for Multisig
type Multisig struct {
	Address string `json:"address"`
	Seqno int64 `json:"seqno"`
	Threshold int32 `json:"threshold"`
	Signers []string `json:"signers"`
	Proposers []string `json:"proposers"`
	Orders []MultisigOrder `json:"orders"`
}

type _Multisig Multisig

// NewMultisig instantiates a new Multisig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultisig(address string, seqno int64, threshold int32, signers []string, proposers []string, orders []MultisigOrder) *Multisig {
	this := Multisig{}
	this.Address = address
	this.Seqno = seqno
	this.Threshold = threshold
	this.Signers = signers
	this.Proposers = proposers
	this.Orders = orders
	return &this
}

// NewMultisigWithDefaults instantiates a new Multisig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultisigWithDefaults() *Multisig {
	this := Multisig{}
	return &this
}

// GetAddress returns the Address field value
func (o *Multisig) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Multisig) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Multisig) SetAddress(v string) {
	o.Address = v
}

// GetSeqno returns the Seqno field value
func (o *Multisig) GetSeqno() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Seqno
}

// GetSeqnoOk returns a tuple with the Seqno field value
// and a boolean to check if the value has been set.
func (o *Multisig) GetSeqnoOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seqno, true
}

// SetSeqno sets field value
func (o *Multisig) SetSeqno(v int64) {
	o.Seqno = v
}

// GetThreshold returns the Threshold field value
func (o *Multisig) GetThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *Multisig) GetThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *Multisig) SetThreshold(v int32) {
	o.Threshold = v
}

// GetSigners returns the Signers field value
func (o *Multisig) GetSigners() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value
// and a boolean to check if the value has been set.
func (o *Multisig) GetSignersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signers, true
}

// SetSigners sets field value
func (o *Multisig) SetSigners(v []string) {
	o.Signers = v
}

// GetProposers returns the Proposers field value
func (o *Multisig) GetProposers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Proposers
}

// GetProposersOk returns a tuple with the Proposers field value
// and a boolean to check if the value has been set.
func (o *Multisig) GetProposersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Proposers, true
}

// SetProposers sets field value
func (o *Multisig) SetProposers(v []string) {
	o.Proposers = v
}

// GetOrders returns the Orders field value
func (o *Multisig) GetOrders() []MultisigOrder {
	if o == nil {
		var ret []MultisigOrder
		return ret
	}

	return o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value
// and a boolean to check if the value has been set.
func (o *Multisig) GetOrdersOk() ([]MultisigOrder, bool) {
	if o == nil {
		return nil, false
	}
	return o.Orders, true
}

// SetOrders sets field value
func (o *Multisig) SetOrders(v []MultisigOrder) {
	o.Orders = v
}

func (o Multisig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Multisig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["seqno"] = o.Seqno
	toSerialize["threshold"] = o.Threshold
	toSerialize["signers"] = o.Signers
	toSerialize["proposers"] = o.Proposers
	toSerialize["orders"] = o.Orders
	return toSerialize, nil
}

func (o *Multisig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"seqno",
		"threshold",
		"signers",
		"proposers",
		"orders",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultisig := _Multisig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMultisig)

	if err != nil {
		return err
	}

	*o = Multisig(varMultisig)

	return err
}

type NullableMultisig struct {
	value *Multisig
	isSet bool
}

func (v NullableMultisig) Get() *Multisig {
	return v.value
}

func (v *NullableMultisig) Set(val *Multisig) {
	v.value = val
	v.isSet = true
}

func (v NullableMultisig) IsSet() bool {
	return v.isSet
}

func (v *NullableMultisig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultisig(val *Multisig) *NullableMultisig {
	return &NullableMultisig{value: val, isSet: true}
}

func (v NullableMultisig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultisig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


