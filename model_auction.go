/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Auction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Auction{}

// Auction struct for Auction
type Auction struct {
	Domain string `json:"domain"`
	Owner string `json:"owner"`
	Price int64 `json:"price"`
	Bids int64 `json:"bids"`
	Date int64 `json:"date"`
}

type _Auction Auction

// NewAuction instantiates a new Auction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuction(domain string, owner string, price int64, bids int64, date int64) *Auction {
	this := Auction{}
	this.Domain = domain
	this.Owner = owner
	this.Price = price
	this.Bids = bids
	this.Date = date
	return &this
}

// NewAuctionWithDefaults instantiates a new Auction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuctionWithDefaults() *Auction {
	this := Auction{}
	return &this
}

// GetDomain returns the Domain field value
func (o *Auction) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *Auction) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *Auction) SetDomain(v string) {
	o.Domain = v
}

// GetOwner returns the Owner field value
func (o *Auction) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *Auction) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *Auction) SetOwner(v string) {
	o.Owner = v
}

// GetPrice returns the Price field value
func (o *Auction) GetPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Auction) GetPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Auction) SetPrice(v int64) {
	o.Price = v
}

// GetBids returns the Bids field value
func (o *Auction) GetBids() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Bids
}

// GetBidsOk returns a tuple with the Bids field value
// and a boolean to check if the value has been set.
func (o *Auction) GetBidsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bids, true
}

// SetBids sets field value
func (o *Auction) SetBids(v int64) {
	o.Bids = v
}

// GetDate returns the Date field value
func (o *Auction) GetDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Auction) GetDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Auction) SetDate(v int64) {
	o.Date = v
}

func (o Auction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Auction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["owner"] = o.Owner
	toSerialize["price"] = o.Price
	toSerialize["bids"] = o.Bids
	toSerialize["date"] = o.Date
	return toSerialize, nil
}

func (o *Auction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"owner",
		"price",
		"bids",
		"date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuction := _Auction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuction)

	if err != nil {
		return err
	}

	*o = Auction(varAuction)

	return err
}

type NullableAuction struct {
	value *Auction
	isSet bool
}

func (v NullableAuction) Get() *Auction {
	return v.value
}

func (v *NullableAuction) Set(val *Auction) {
	v.value = val
	v.isSet = true
}

func (v NullableAuction) IsSet() bool {
	return v.isSet
}

func (v *NullableAuction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuction(val *Auction) *NullableAuction {
	return &NullableAuction{value: val, isSet: true}
}

func (v NullableAuction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


