/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ValidatorsSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidatorsSet{}

// ValidatorsSet struct for ValidatorsSet
type ValidatorsSet struct {
	UtimeSince int32 `json:"utime_since"`
	UtimeUntil int32 `json:"utime_until"`
	Total int32 `json:"total"`
	Main int32 `json:"main"`
	TotalWeight *string `json:"total_weight,omitempty"`
	List []ValidatorsSetListInner `json:"list"`
}

type _ValidatorsSet ValidatorsSet

// NewValidatorsSet instantiates a new ValidatorsSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidatorsSet(utimeSince int32, utimeUntil int32, total int32, main int32, list []ValidatorsSetListInner) *ValidatorsSet {
	this := ValidatorsSet{}
	this.UtimeSince = utimeSince
	this.UtimeUntil = utimeUntil
	this.Total = total
	this.Main = main
	this.List = list
	return &this
}

// NewValidatorsSetWithDefaults instantiates a new ValidatorsSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidatorsSetWithDefaults() *ValidatorsSet {
	this := ValidatorsSet{}
	return &this
}

// GetUtimeSince returns the UtimeSince field value
func (o *ValidatorsSet) GetUtimeSince() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UtimeSince
}

// GetUtimeSinceOk returns a tuple with the UtimeSince field value
// and a boolean to check if the value has been set.
func (o *ValidatorsSet) GetUtimeSinceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UtimeSince, true
}

// SetUtimeSince sets field value
func (o *ValidatorsSet) SetUtimeSince(v int32) {
	o.UtimeSince = v
}

// GetUtimeUntil returns the UtimeUntil field value
func (o *ValidatorsSet) GetUtimeUntil() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UtimeUntil
}

// GetUtimeUntilOk returns a tuple with the UtimeUntil field value
// and a boolean to check if the value has been set.
func (o *ValidatorsSet) GetUtimeUntilOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UtimeUntil, true
}

// SetUtimeUntil sets field value
func (o *ValidatorsSet) SetUtimeUntil(v int32) {
	o.UtimeUntil = v
}

// GetTotal returns the Total field value
func (o *ValidatorsSet) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ValidatorsSet) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ValidatorsSet) SetTotal(v int32) {
	o.Total = v
}

// GetMain returns the Main field value
func (o *ValidatorsSet) GetMain() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Main
}

// GetMainOk returns a tuple with the Main field value
// and a boolean to check if the value has been set.
func (o *ValidatorsSet) GetMainOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Main, true
}

// SetMain sets field value
func (o *ValidatorsSet) SetMain(v int32) {
	o.Main = v
}

// GetTotalWeight returns the TotalWeight field value if set, zero value otherwise.
func (o *ValidatorsSet) GetTotalWeight() string {
	if o == nil || IsNil(o.TotalWeight) {
		var ret string
		return ret
	}
	return *o.TotalWeight
}

// GetTotalWeightOk returns a tuple with the TotalWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatorsSet) GetTotalWeightOk() (*string, bool) {
	if o == nil || IsNil(o.TotalWeight) {
		return nil, false
	}
	return o.TotalWeight, true
}

// HasTotalWeight returns a boolean if a field has been set.
func (o *ValidatorsSet) HasTotalWeight() bool {
	if o != nil && !IsNil(o.TotalWeight) {
		return true
	}

	return false
}

// SetTotalWeight gets a reference to the given string and assigns it to the TotalWeight field.
func (o *ValidatorsSet) SetTotalWeight(v string) {
	o.TotalWeight = &v
}

// GetList returns the List field value
func (o *ValidatorsSet) GetList() []ValidatorsSetListInner {
	if o == nil {
		var ret []ValidatorsSetListInner
		return ret
	}

	return o.List
}

// GetListOk returns a tuple with the List field value
// and a boolean to check if the value has been set.
func (o *ValidatorsSet) GetListOk() ([]ValidatorsSetListInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.List, true
}

// SetList sets field value
func (o *ValidatorsSet) SetList(v []ValidatorsSetListInner) {
	o.List = v
}

func (o ValidatorsSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidatorsSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["utime_since"] = o.UtimeSince
	toSerialize["utime_until"] = o.UtimeUntil
	toSerialize["total"] = o.Total
	toSerialize["main"] = o.Main
	if !IsNil(o.TotalWeight) {
		toSerialize["total_weight"] = o.TotalWeight
	}
	toSerialize["list"] = o.List
	return toSerialize, nil
}

func (o *ValidatorsSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"utime_since",
		"utime_until",
		"total",
		"main",
		"list",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidatorsSet := _ValidatorsSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValidatorsSet)

	if err != nil {
		return err
	}

	*o = ValidatorsSet(varValidatorsSet)

	return err
}

type NullableValidatorsSet struct {
	value *ValidatorsSet
	isSet bool
}

func (v NullableValidatorsSet) Get() *ValidatorsSet {
	return v.value
}

func (v *NullableValidatorsSet) Set(val *ValidatorsSet) {
	v.value = val
	v.isSet = true
}

func (v NullableValidatorsSet) IsSet() bool {
	return v.isSet
}

func (v *NullableValidatorsSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidatorsSet(val *ValidatorsSet) *NullableValidatorsSet {
	return &NullableValidatorsSet{value: val, isSet: true}
}

func (v NullableValidatorsSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidatorsSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


