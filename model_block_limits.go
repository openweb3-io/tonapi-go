/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockLimits{}

// BlockLimits struct for BlockLimits
type BlockLimits struct {
	Bytes BlockParamLimits `json:"bytes"`
	Gas BlockParamLimits `json:"gas"`
	LtDelta BlockParamLimits `json:"lt_delta"`
}

type _BlockLimits BlockLimits

// NewBlockLimits instantiates a new BlockLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockLimits(bytes BlockParamLimits, gas BlockParamLimits, ltDelta BlockParamLimits) *BlockLimits {
	this := BlockLimits{}
	this.Bytes = bytes
	this.Gas = gas
	this.LtDelta = ltDelta
	return &this
}

// NewBlockLimitsWithDefaults instantiates a new BlockLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockLimitsWithDefaults() *BlockLimits {
	this := BlockLimits{}
	return &this
}

// GetBytes returns the Bytes field value
func (o *BlockLimits) GetBytes() BlockParamLimits {
	if o == nil {
		var ret BlockParamLimits
		return ret
	}

	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
func (o *BlockLimits) GetBytesOk() (*BlockParamLimits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytes, true
}

// SetBytes sets field value
func (o *BlockLimits) SetBytes(v BlockParamLimits) {
	o.Bytes = v
}

// GetGas returns the Gas field value
func (o *BlockLimits) GetGas() BlockParamLimits {
	if o == nil {
		var ret BlockParamLimits
		return ret
	}

	return o.Gas
}

// GetGasOk returns a tuple with the Gas field value
// and a boolean to check if the value has been set.
func (o *BlockLimits) GetGasOk() (*BlockParamLimits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gas, true
}

// SetGas sets field value
func (o *BlockLimits) SetGas(v BlockParamLimits) {
	o.Gas = v
}

// GetLtDelta returns the LtDelta field value
func (o *BlockLimits) GetLtDelta() BlockParamLimits {
	if o == nil {
		var ret BlockParamLimits
		return ret
	}

	return o.LtDelta
}

// GetLtDeltaOk returns a tuple with the LtDelta field value
// and a boolean to check if the value has been set.
func (o *BlockLimits) GetLtDeltaOk() (*BlockParamLimits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LtDelta, true
}

// SetLtDelta sets field value
func (o *BlockLimits) SetLtDelta(v BlockParamLimits) {
	o.LtDelta = v
}

func (o BlockLimits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bytes"] = o.Bytes
	toSerialize["gas"] = o.Gas
	toSerialize["lt_delta"] = o.LtDelta
	return toSerialize, nil
}

func (o *BlockLimits) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bytes",
		"gas",
		"lt_delta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockLimits := _BlockLimits{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockLimits)

	if err != nil {
		return err
	}

	*o = BlockLimits(varBlockLimits)

	return err
}

type NullableBlockLimits struct {
	value *BlockLimits
	isSet bool
}

func (v NullableBlockLimits) Get() *BlockLimits {
	return v.value
}

func (v *NullableBlockLimits) Set(val *BlockLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockLimits(val *BlockLimits) *NullableBlockLimits {
	return &NullableBlockLimits{value: val, isSet: true}
}

func (v NullableBlockLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


