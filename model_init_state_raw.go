/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InitStateRaw type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InitStateRaw{}

// InitStateRaw struct for InitStateRaw
type InitStateRaw struct {
	Workchain int32 `json:"workchain"`
	RootHash string `json:"root_hash"`
	FileHash string `json:"file_hash"`
}

type _InitStateRaw InitStateRaw

// NewInitStateRaw instantiates a new InitStateRaw object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitStateRaw(workchain int32, rootHash string, fileHash string) *InitStateRaw {
	this := InitStateRaw{}
	this.Workchain = workchain
	this.RootHash = rootHash
	this.FileHash = fileHash
	return &this
}

// NewInitStateRawWithDefaults instantiates a new InitStateRaw object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitStateRawWithDefaults() *InitStateRaw {
	this := InitStateRaw{}
	return &this
}

// GetWorkchain returns the Workchain field value
func (o *InitStateRaw) GetWorkchain() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Workchain
}

// GetWorkchainOk returns a tuple with the Workchain field value
// and a boolean to check if the value has been set.
func (o *InitStateRaw) GetWorkchainOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workchain, true
}

// SetWorkchain sets field value
func (o *InitStateRaw) SetWorkchain(v int32) {
	o.Workchain = v
}

// GetRootHash returns the RootHash field value
func (o *InitStateRaw) GetRootHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootHash
}

// GetRootHashOk returns a tuple with the RootHash field value
// and a boolean to check if the value has been set.
func (o *InitStateRaw) GetRootHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootHash, true
}

// SetRootHash sets field value
func (o *InitStateRaw) SetRootHash(v string) {
	o.RootHash = v
}

// GetFileHash returns the FileHash field value
func (o *InitStateRaw) GetFileHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileHash
}

// GetFileHashOk returns a tuple with the FileHash field value
// and a boolean to check if the value has been set.
func (o *InitStateRaw) GetFileHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileHash, true
}

// SetFileHash sets field value
func (o *InitStateRaw) SetFileHash(v string) {
	o.FileHash = v
}

func (o InitStateRaw) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InitStateRaw) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workchain"] = o.Workchain
	toSerialize["root_hash"] = o.RootHash
	toSerialize["file_hash"] = o.FileHash
	return toSerialize, nil
}

func (o *InitStateRaw) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workchain",
		"root_hash",
		"file_hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInitStateRaw := _InitStateRaw{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInitStateRaw)

	if err != nil {
		return err
	}

	*o = InitStateRaw(varInitStateRaw)

	return err
}

type NullableInitStateRaw struct {
	value *InitStateRaw
	isSet bool
}

func (v NullableInitStateRaw) Get() *InitStateRaw {
	return v.value
}

func (v *NullableInitStateRaw) Set(val *InitStateRaw) {
	v.value = val
	v.isSet = true
}

func (v NullableInitStateRaw) IsSet() bool {
	return v.isSet
}

func (v *NullableInitStateRaw) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitStateRaw(val *InitStateRaw) *NullableInitStateRaw {
	return &NullableInitStateRaw{value: val, isSet: true}
}

func (v NullableInitStateRaw) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitStateRaw) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


