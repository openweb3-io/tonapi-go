/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Validators type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Validators{}

// Validators struct for Validators
type Validators struct {
	ElectAt int64 `json:"elect_at"`
	ElectClose int64 `json:"elect_close"`
	MinStake int64 `json:"min_stake"`
	TotalStake int64 `json:"total_stake"`
	Validators []Validator `json:"validators"`
}

type _Validators Validators

// NewValidators instantiates a new Validators object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidators(electAt int64, electClose int64, minStake int64, totalStake int64, validators []Validator) *Validators {
	this := Validators{}
	this.ElectAt = electAt
	this.ElectClose = electClose
	this.MinStake = minStake
	this.TotalStake = totalStake
	this.Validators = validators
	return &this
}

// NewValidatorsWithDefaults instantiates a new Validators object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidatorsWithDefaults() *Validators {
	this := Validators{}
	return &this
}

// GetElectAt returns the ElectAt field value
func (o *Validators) GetElectAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ElectAt
}

// GetElectAtOk returns a tuple with the ElectAt field value
// and a boolean to check if the value has been set.
func (o *Validators) GetElectAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElectAt, true
}

// SetElectAt sets field value
func (o *Validators) SetElectAt(v int64) {
	o.ElectAt = v
}

// GetElectClose returns the ElectClose field value
func (o *Validators) GetElectClose() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ElectClose
}

// GetElectCloseOk returns a tuple with the ElectClose field value
// and a boolean to check if the value has been set.
func (o *Validators) GetElectCloseOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElectClose, true
}

// SetElectClose sets field value
func (o *Validators) SetElectClose(v int64) {
	o.ElectClose = v
}

// GetMinStake returns the MinStake field value
func (o *Validators) GetMinStake() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinStake
}

// GetMinStakeOk returns a tuple with the MinStake field value
// and a boolean to check if the value has been set.
func (o *Validators) GetMinStakeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinStake, true
}

// SetMinStake sets field value
func (o *Validators) SetMinStake(v int64) {
	o.MinStake = v
}

// GetTotalStake returns the TotalStake field value
func (o *Validators) GetTotalStake() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalStake
}

// GetTotalStakeOk returns a tuple with the TotalStake field value
// and a boolean to check if the value has been set.
func (o *Validators) GetTotalStakeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalStake, true
}

// SetTotalStake sets field value
func (o *Validators) SetTotalStake(v int64) {
	o.TotalStake = v
}

// GetValidators returns the Validators field value
func (o *Validators) GetValidators() []Validator {
	if o == nil {
		var ret []Validator
		return ret
	}

	return o.Validators
}

// GetValidatorsOk returns a tuple with the Validators field value
// and a boolean to check if the value has been set.
func (o *Validators) GetValidatorsOk() ([]Validator, bool) {
	if o == nil {
		return nil, false
	}
	return o.Validators, true
}

// SetValidators sets field value
func (o *Validators) SetValidators(v []Validator) {
	o.Validators = v
}

func (o Validators) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Validators) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["elect_at"] = o.ElectAt
	toSerialize["elect_close"] = o.ElectClose
	toSerialize["min_stake"] = o.MinStake
	toSerialize["total_stake"] = o.TotalStake
	toSerialize["validators"] = o.Validators
	return toSerialize, nil
}

func (o *Validators) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"elect_at",
		"elect_close",
		"min_stake",
		"total_stake",
		"validators",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidators := _Validators{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValidators)

	if err != nil {
		return err
	}

	*o = Validators(varValidators)

	return err
}

type NullableValidators struct {
	value *Validators
	isSet bool
}

func (v NullableValidators) Get() *Validators {
	return v.value
}

func (v *NullableValidators) Set(val *Validators) {
	v.value = val
	v.isSet = true
}

func (v NullableValidators) IsSet() bool {
	return v.isSet
}

func (v *NullableValidators) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidators(val *Validators) *NullableValidators {
	return &NullableValidators{value: val, isSet: true}
}

func (v NullableValidators) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidators) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


