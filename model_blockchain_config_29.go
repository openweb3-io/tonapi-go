/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig29 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig29{}

// BlockchainConfig29 The configuration for the consensus protocol above catchain.
type BlockchainConfig29 struct {
	Flags *int32 `json:"flags,omitempty"`
	NewCatchainIds *bool `json:"new_catchain_ids,omitempty"`
	RoundCandidates int64 `json:"round_candidates"`
	NextCandidateDelayMs int64 `json:"next_candidate_delay_ms"`
	ConsensusTimeoutMs int64 `json:"consensus_timeout_ms"`
	FastAttempts int64 `json:"fast_attempts"`
	AttemptDuration int64 `json:"attempt_duration"`
	CatchainMaxDeps int64 `json:"catchain_max_deps"`
	MaxBlockBytes int64 `json:"max_block_bytes"`
	MaxCollatedBytes int64 `json:"max_collated_bytes"`
	ProtoVersion *int64 `json:"proto_version,omitempty"`
	CatchainMaxBlocksCoeff *int64 `json:"catchain_max_blocks_coeff,omitempty"`
}

type _BlockchainConfig29 BlockchainConfig29

// NewBlockchainConfig29 instantiates a new BlockchainConfig29 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig29(roundCandidates int64, nextCandidateDelayMs int64, consensusTimeoutMs int64, fastAttempts int64, attemptDuration int64, catchainMaxDeps int64, maxBlockBytes int64, maxCollatedBytes int64) *BlockchainConfig29 {
	this := BlockchainConfig29{}
	this.RoundCandidates = roundCandidates
	this.NextCandidateDelayMs = nextCandidateDelayMs
	this.ConsensusTimeoutMs = consensusTimeoutMs
	this.FastAttempts = fastAttempts
	this.AttemptDuration = attemptDuration
	this.CatchainMaxDeps = catchainMaxDeps
	this.MaxBlockBytes = maxBlockBytes
	this.MaxCollatedBytes = maxCollatedBytes
	return &this
}

// NewBlockchainConfig29WithDefaults instantiates a new BlockchainConfig29 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig29WithDefaults() *BlockchainConfig29 {
	this := BlockchainConfig29{}
	return &this
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *BlockchainConfig29) GetFlags() int32 {
	if o == nil || IsNil(o.Flags) {
		var ret int32
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetFlagsOk() (*int32, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *BlockchainConfig29) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given int32 and assigns it to the Flags field.
func (o *BlockchainConfig29) SetFlags(v int32) {
	o.Flags = &v
}

// GetNewCatchainIds returns the NewCatchainIds field value if set, zero value otherwise.
func (o *BlockchainConfig29) GetNewCatchainIds() bool {
	if o == nil || IsNil(o.NewCatchainIds) {
		var ret bool
		return ret
	}
	return *o.NewCatchainIds
}

// GetNewCatchainIdsOk returns a tuple with the NewCatchainIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetNewCatchainIdsOk() (*bool, bool) {
	if o == nil || IsNil(o.NewCatchainIds) {
		return nil, false
	}
	return o.NewCatchainIds, true
}

// HasNewCatchainIds returns a boolean if a field has been set.
func (o *BlockchainConfig29) HasNewCatchainIds() bool {
	if o != nil && !IsNil(o.NewCatchainIds) {
		return true
	}

	return false
}

// SetNewCatchainIds gets a reference to the given bool and assigns it to the NewCatchainIds field.
func (o *BlockchainConfig29) SetNewCatchainIds(v bool) {
	o.NewCatchainIds = &v
}

// GetRoundCandidates returns the RoundCandidates field value
func (o *BlockchainConfig29) GetRoundCandidates() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RoundCandidates
}

// GetRoundCandidatesOk returns a tuple with the RoundCandidates field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetRoundCandidatesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoundCandidates, true
}

// SetRoundCandidates sets field value
func (o *BlockchainConfig29) SetRoundCandidates(v int64) {
	o.RoundCandidates = v
}

// GetNextCandidateDelayMs returns the NextCandidateDelayMs field value
func (o *BlockchainConfig29) GetNextCandidateDelayMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NextCandidateDelayMs
}

// GetNextCandidateDelayMsOk returns a tuple with the NextCandidateDelayMs field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetNextCandidateDelayMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextCandidateDelayMs, true
}

// SetNextCandidateDelayMs sets field value
func (o *BlockchainConfig29) SetNextCandidateDelayMs(v int64) {
	o.NextCandidateDelayMs = v
}

// GetConsensusTimeoutMs returns the ConsensusTimeoutMs field value
func (o *BlockchainConfig29) GetConsensusTimeoutMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ConsensusTimeoutMs
}

// GetConsensusTimeoutMsOk returns a tuple with the ConsensusTimeoutMs field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetConsensusTimeoutMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsensusTimeoutMs, true
}

// SetConsensusTimeoutMs sets field value
func (o *BlockchainConfig29) SetConsensusTimeoutMs(v int64) {
	o.ConsensusTimeoutMs = v
}

// GetFastAttempts returns the FastAttempts field value
func (o *BlockchainConfig29) GetFastAttempts() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FastAttempts
}

// GetFastAttemptsOk returns a tuple with the FastAttempts field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetFastAttemptsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FastAttempts, true
}

// SetFastAttempts sets field value
func (o *BlockchainConfig29) SetFastAttempts(v int64) {
	o.FastAttempts = v
}

// GetAttemptDuration returns the AttemptDuration field value
func (o *BlockchainConfig29) GetAttemptDuration() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AttemptDuration
}

// GetAttemptDurationOk returns a tuple with the AttemptDuration field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetAttemptDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttemptDuration, true
}

// SetAttemptDuration sets field value
func (o *BlockchainConfig29) SetAttemptDuration(v int64) {
	o.AttemptDuration = v
}

// GetCatchainMaxDeps returns the CatchainMaxDeps field value
func (o *BlockchainConfig29) GetCatchainMaxDeps() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CatchainMaxDeps
}

// GetCatchainMaxDepsOk returns a tuple with the CatchainMaxDeps field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetCatchainMaxDepsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatchainMaxDeps, true
}

// SetCatchainMaxDeps sets field value
func (o *BlockchainConfig29) SetCatchainMaxDeps(v int64) {
	o.CatchainMaxDeps = v
}

// GetMaxBlockBytes returns the MaxBlockBytes field value
func (o *BlockchainConfig29) GetMaxBlockBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxBlockBytes
}

// GetMaxBlockBytesOk returns a tuple with the MaxBlockBytes field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetMaxBlockBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxBlockBytes, true
}

// SetMaxBlockBytes sets field value
func (o *BlockchainConfig29) SetMaxBlockBytes(v int64) {
	o.MaxBlockBytes = v
}

// GetMaxCollatedBytes returns the MaxCollatedBytes field value
func (o *BlockchainConfig29) GetMaxCollatedBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxCollatedBytes
}

// GetMaxCollatedBytesOk returns a tuple with the MaxCollatedBytes field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetMaxCollatedBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxCollatedBytes, true
}

// SetMaxCollatedBytes sets field value
func (o *BlockchainConfig29) SetMaxCollatedBytes(v int64) {
	o.MaxCollatedBytes = v
}

// GetProtoVersion returns the ProtoVersion field value if set, zero value otherwise.
func (o *BlockchainConfig29) GetProtoVersion() int64 {
	if o == nil || IsNil(o.ProtoVersion) {
		var ret int64
		return ret
	}
	return *o.ProtoVersion
}

// GetProtoVersionOk returns a tuple with the ProtoVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetProtoVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.ProtoVersion) {
		return nil, false
	}
	return o.ProtoVersion, true
}

// HasProtoVersion returns a boolean if a field has been set.
func (o *BlockchainConfig29) HasProtoVersion() bool {
	if o != nil && !IsNil(o.ProtoVersion) {
		return true
	}

	return false
}

// SetProtoVersion gets a reference to the given int64 and assigns it to the ProtoVersion field.
func (o *BlockchainConfig29) SetProtoVersion(v int64) {
	o.ProtoVersion = &v
}

// GetCatchainMaxBlocksCoeff returns the CatchainMaxBlocksCoeff field value if set, zero value otherwise.
func (o *BlockchainConfig29) GetCatchainMaxBlocksCoeff() int64 {
	if o == nil || IsNil(o.CatchainMaxBlocksCoeff) {
		var ret int64
		return ret
	}
	return *o.CatchainMaxBlocksCoeff
}

// GetCatchainMaxBlocksCoeffOk returns a tuple with the CatchainMaxBlocksCoeff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockchainConfig29) GetCatchainMaxBlocksCoeffOk() (*int64, bool) {
	if o == nil || IsNil(o.CatchainMaxBlocksCoeff) {
		return nil, false
	}
	return o.CatchainMaxBlocksCoeff, true
}

// HasCatchainMaxBlocksCoeff returns a boolean if a field has been set.
func (o *BlockchainConfig29) HasCatchainMaxBlocksCoeff() bool {
	if o != nil && !IsNil(o.CatchainMaxBlocksCoeff) {
		return true
	}

	return false
}

// SetCatchainMaxBlocksCoeff gets a reference to the given int64 and assigns it to the CatchainMaxBlocksCoeff field.
func (o *BlockchainConfig29) SetCatchainMaxBlocksCoeff(v int64) {
	o.CatchainMaxBlocksCoeff = &v
}

func (o BlockchainConfig29) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig29) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	if !IsNil(o.NewCatchainIds) {
		toSerialize["new_catchain_ids"] = o.NewCatchainIds
	}
	toSerialize["round_candidates"] = o.RoundCandidates
	toSerialize["next_candidate_delay_ms"] = o.NextCandidateDelayMs
	toSerialize["consensus_timeout_ms"] = o.ConsensusTimeoutMs
	toSerialize["fast_attempts"] = o.FastAttempts
	toSerialize["attempt_duration"] = o.AttemptDuration
	toSerialize["catchain_max_deps"] = o.CatchainMaxDeps
	toSerialize["max_block_bytes"] = o.MaxBlockBytes
	toSerialize["max_collated_bytes"] = o.MaxCollatedBytes
	if !IsNil(o.ProtoVersion) {
		toSerialize["proto_version"] = o.ProtoVersion
	}
	if !IsNil(o.CatchainMaxBlocksCoeff) {
		toSerialize["catchain_max_blocks_coeff"] = o.CatchainMaxBlocksCoeff
	}
	return toSerialize, nil
}

func (o *BlockchainConfig29) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"round_candidates",
		"next_candidate_delay_ms",
		"consensus_timeout_ms",
		"fast_attempts",
		"attempt_duration",
		"catchain_max_deps",
		"max_block_bytes",
		"max_collated_bytes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig29 := _BlockchainConfig29{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig29)

	if err != nil {
		return err
	}

	*o = BlockchainConfig29(varBlockchainConfig29)

	return err
}

type NullableBlockchainConfig29 struct {
	value *BlockchainConfig29
	isSet bool
}

func (v NullableBlockchainConfig29) Get() *BlockchainConfig29 {
	return v.value
}

func (v *NullableBlockchainConfig29) Set(val *BlockchainConfig29) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig29) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig29) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig29(val *BlockchainConfig29) *NullableBlockchainConfig29 {
	return &NullableBlockchainConfig29{value: val, isSet: true}
}

func (v NullableBlockchainConfig29) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig29) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


