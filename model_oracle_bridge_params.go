/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OracleBridgeParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleBridgeParams{}

// OracleBridgeParams struct for OracleBridgeParams
type OracleBridgeParams struct {
	BridgeAddr string `json:"bridge_addr"`
	OracleMultisigAddress string `json:"oracle_multisig_address"`
	ExternalChainAddress string `json:"external_chain_address"`
	Oracles []Oracle `json:"oracles"`
}

type _OracleBridgeParams OracleBridgeParams

// NewOracleBridgeParams instantiates a new OracleBridgeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleBridgeParams(bridgeAddr string, oracleMultisigAddress string, externalChainAddress string, oracles []Oracle) *OracleBridgeParams {
	this := OracleBridgeParams{}
	this.BridgeAddr = bridgeAddr
	this.OracleMultisigAddress = oracleMultisigAddress
	this.ExternalChainAddress = externalChainAddress
	this.Oracles = oracles
	return &this
}

// NewOracleBridgeParamsWithDefaults instantiates a new OracleBridgeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleBridgeParamsWithDefaults() *OracleBridgeParams {
	this := OracleBridgeParams{}
	return &this
}

// GetBridgeAddr returns the BridgeAddr field value
func (o *OracleBridgeParams) GetBridgeAddr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BridgeAddr
}

// GetBridgeAddrOk returns a tuple with the BridgeAddr field value
// and a boolean to check if the value has been set.
func (o *OracleBridgeParams) GetBridgeAddrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BridgeAddr, true
}

// SetBridgeAddr sets field value
func (o *OracleBridgeParams) SetBridgeAddr(v string) {
	o.BridgeAddr = v
}

// GetOracleMultisigAddress returns the OracleMultisigAddress field value
func (o *OracleBridgeParams) GetOracleMultisigAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OracleMultisigAddress
}

// GetOracleMultisigAddressOk returns a tuple with the OracleMultisigAddress field value
// and a boolean to check if the value has been set.
func (o *OracleBridgeParams) GetOracleMultisigAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OracleMultisigAddress, true
}

// SetOracleMultisigAddress sets field value
func (o *OracleBridgeParams) SetOracleMultisigAddress(v string) {
	o.OracleMultisigAddress = v
}

// GetExternalChainAddress returns the ExternalChainAddress field value
func (o *OracleBridgeParams) GetExternalChainAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalChainAddress
}

// GetExternalChainAddressOk returns a tuple with the ExternalChainAddress field value
// and a boolean to check if the value has been set.
func (o *OracleBridgeParams) GetExternalChainAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalChainAddress, true
}

// SetExternalChainAddress sets field value
func (o *OracleBridgeParams) SetExternalChainAddress(v string) {
	o.ExternalChainAddress = v
}

// GetOracles returns the Oracles field value
func (o *OracleBridgeParams) GetOracles() []Oracle {
	if o == nil {
		var ret []Oracle
		return ret
	}

	return o.Oracles
}

// GetOraclesOk returns a tuple with the Oracles field value
// and a boolean to check if the value has been set.
func (o *OracleBridgeParams) GetOraclesOk() ([]Oracle, bool) {
	if o == nil {
		return nil, false
	}
	return o.Oracles, true
}

// SetOracles sets field value
func (o *OracleBridgeParams) SetOracles(v []Oracle) {
	o.Oracles = v
}

func (o OracleBridgeParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleBridgeParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bridge_addr"] = o.BridgeAddr
	toSerialize["oracle_multisig_address"] = o.OracleMultisigAddress
	toSerialize["external_chain_address"] = o.ExternalChainAddress
	toSerialize["oracles"] = o.Oracles
	return toSerialize, nil
}

func (o *OracleBridgeParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bridge_addr",
		"oracle_multisig_address",
		"external_chain_address",
		"oracles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOracleBridgeParams := _OracleBridgeParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOracleBridgeParams)

	if err != nil {
		return err
	}

	*o = OracleBridgeParams(varOracleBridgeParams)

	return err
}

type NullableOracleBridgeParams struct {
	value *OracleBridgeParams
	isSet bool
}

func (v NullableOracleBridgeParams) Get() *OracleBridgeParams {
	return v.value
}

func (v *NullableOracleBridgeParams) Set(val *OracleBridgeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleBridgeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleBridgeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleBridgeParams(val *OracleBridgeParams) *NullableOracleBridgeParams {
	return &NullableOracleBridgeParams{value: val, isSet: true}
}

func (v NullableOracleBridgeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleBridgeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


