/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PoolInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolInfo{}

// PoolInfo struct for PoolInfo
type PoolInfo struct {
	Address string `json:"address"`
	Name string `json:"name"`
	TotalAmount int64 `json:"total_amount"`
	Implementation PoolImplementationType `json:"implementation"`
	// APY in percent
	Apy float32 `json:"apy"`
	MinStake int64 `json:"min_stake"`
	// current nomination cycle beginning timestamp
	CycleStart int64 `json:"cycle_start"`
	// current nomination cycle ending timestamp
	CycleEnd int64 `json:"cycle_end"`
	// this pool has verified source code or managed by trusted company
	Verified bool `json:"verified"`
	// current number of nominators
	CurrentNominators int32 `json:"current_nominators"`
	// maximum number of nominators
	MaxNominators int32 `json:"max_nominators"`
	// for liquid staking master account of jetton
	LiquidJettonMaster *string `json:"liquid_jetton_master,omitempty"`
	// total stake of all nominators
	NominatorsStake int64 `json:"nominators_stake"`
	// stake of validator
	ValidatorStake int64 `json:"validator_stake"`
	CycleLength *int64 `json:"cycle_length,omitempty"`
}

type _PoolInfo PoolInfo

// NewPoolInfo instantiates a new PoolInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolInfo(address string, name string, totalAmount int64, implementation PoolImplementationType, apy float32, minStake int64, cycleStart int64, cycleEnd int64, verified bool, currentNominators int32, maxNominators int32, nominatorsStake int64, validatorStake int64) *PoolInfo {
	this := PoolInfo{}
	this.Address = address
	this.Name = name
	this.TotalAmount = totalAmount
	this.Implementation = implementation
	this.Apy = apy
	this.MinStake = minStake
	this.CycleStart = cycleStart
	this.CycleEnd = cycleEnd
	this.Verified = verified
	this.CurrentNominators = currentNominators
	this.MaxNominators = maxNominators
	this.NominatorsStake = nominatorsStake
	this.ValidatorStake = validatorStake
	return &this
}

// NewPoolInfoWithDefaults instantiates a new PoolInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolInfoWithDefaults() *PoolInfo {
	this := PoolInfo{}
	return &this
}

// GetAddress returns the Address field value
func (o *PoolInfo) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *PoolInfo) SetAddress(v string) {
	o.Address = v
}

// GetName returns the Name field value
func (o *PoolInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PoolInfo) SetName(v string) {
	o.Name = v
}

// GetTotalAmount returns the TotalAmount field value
func (o *PoolInfo) GetTotalAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetTotalAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAmount, true
}

// SetTotalAmount sets field value
func (o *PoolInfo) SetTotalAmount(v int64) {
	o.TotalAmount = v
}

// GetImplementation returns the Implementation field value
func (o *PoolInfo) GetImplementation() PoolImplementationType {
	if o == nil {
		var ret PoolImplementationType
		return ret
	}

	return o.Implementation
}

// GetImplementationOk returns a tuple with the Implementation field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetImplementationOk() (*PoolImplementationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Implementation, true
}

// SetImplementation sets field value
func (o *PoolInfo) SetImplementation(v PoolImplementationType) {
	o.Implementation = v
}

// GetApy returns the Apy field value
func (o *PoolInfo) GetApy() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Apy
}

// GetApyOk returns a tuple with the Apy field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetApyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Apy, true
}

// SetApy sets field value
func (o *PoolInfo) SetApy(v float32) {
	o.Apy = v
}

// GetMinStake returns the MinStake field value
func (o *PoolInfo) GetMinStake() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinStake
}

// GetMinStakeOk returns a tuple with the MinStake field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetMinStakeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinStake, true
}

// SetMinStake sets field value
func (o *PoolInfo) SetMinStake(v int64) {
	o.MinStake = v
}

// GetCycleStart returns the CycleStart field value
func (o *PoolInfo) GetCycleStart() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CycleStart
}

// GetCycleStartOk returns a tuple with the CycleStart field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetCycleStartOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CycleStart, true
}

// SetCycleStart sets field value
func (o *PoolInfo) SetCycleStart(v int64) {
	o.CycleStart = v
}

// GetCycleEnd returns the CycleEnd field value
func (o *PoolInfo) GetCycleEnd() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CycleEnd
}

// GetCycleEndOk returns a tuple with the CycleEnd field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetCycleEndOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CycleEnd, true
}

// SetCycleEnd sets field value
func (o *PoolInfo) SetCycleEnd(v int64) {
	o.CycleEnd = v
}

// GetVerified returns the Verified field value
func (o *PoolInfo) GetVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verified, true
}

// SetVerified sets field value
func (o *PoolInfo) SetVerified(v bool) {
	o.Verified = v
}

// GetCurrentNominators returns the CurrentNominators field value
func (o *PoolInfo) GetCurrentNominators() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrentNominators
}

// GetCurrentNominatorsOk returns a tuple with the CurrentNominators field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetCurrentNominatorsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentNominators, true
}

// SetCurrentNominators sets field value
func (o *PoolInfo) SetCurrentNominators(v int32) {
	o.CurrentNominators = v
}

// GetMaxNominators returns the MaxNominators field value
func (o *PoolInfo) GetMaxNominators() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxNominators
}

// GetMaxNominatorsOk returns a tuple with the MaxNominators field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetMaxNominatorsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxNominators, true
}

// SetMaxNominators sets field value
func (o *PoolInfo) SetMaxNominators(v int32) {
	o.MaxNominators = v
}

// GetLiquidJettonMaster returns the LiquidJettonMaster field value if set, zero value otherwise.
func (o *PoolInfo) GetLiquidJettonMaster() string {
	if o == nil || IsNil(o.LiquidJettonMaster) {
		var ret string
		return ret
	}
	return *o.LiquidJettonMaster
}

// GetLiquidJettonMasterOk returns a tuple with the LiquidJettonMaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetLiquidJettonMasterOk() (*string, bool) {
	if o == nil || IsNil(o.LiquidJettonMaster) {
		return nil, false
	}
	return o.LiquidJettonMaster, true
}

// HasLiquidJettonMaster returns a boolean if a field has been set.
func (o *PoolInfo) HasLiquidJettonMaster() bool {
	if o != nil && !IsNil(o.LiquidJettonMaster) {
		return true
	}

	return false
}

// SetLiquidJettonMaster gets a reference to the given string and assigns it to the LiquidJettonMaster field.
func (o *PoolInfo) SetLiquidJettonMaster(v string) {
	o.LiquidJettonMaster = &v
}

// GetNominatorsStake returns the NominatorsStake field value
func (o *PoolInfo) GetNominatorsStake() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NominatorsStake
}

// GetNominatorsStakeOk returns a tuple with the NominatorsStake field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetNominatorsStakeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NominatorsStake, true
}

// SetNominatorsStake sets field value
func (o *PoolInfo) SetNominatorsStake(v int64) {
	o.NominatorsStake = v
}

// GetValidatorStake returns the ValidatorStake field value
func (o *PoolInfo) GetValidatorStake() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ValidatorStake
}

// GetValidatorStakeOk returns a tuple with the ValidatorStake field value
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetValidatorStakeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorStake, true
}

// SetValidatorStake sets field value
func (o *PoolInfo) SetValidatorStake(v int64) {
	o.ValidatorStake = v
}

// GetCycleLength returns the CycleLength field value if set, zero value otherwise.
func (o *PoolInfo) GetCycleLength() int64 {
	if o == nil || IsNil(o.CycleLength) {
		var ret int64
		return ret
	}
	return *o.CycleLength
}

// GetCycleLengthOk returns a tuple with the CycleLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolInfo) GetCycleLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.CycleLength) {
		return nil, false
	}
	return o.CycleLength, true
}

// HasCycleLength returns a boolean if a field has been set.
func (o *PoolInfo) HasCycleLength() bool {
	if o != nil && !IsNil(o.CycleLength) {
		return true
	}

	return false
}

// SetCycleLength gets a reference to the given int64 and assigns it to the CycleLength field.
func (o *PoolInfo) SetCycleLength(v int64) {
	o.CycleLength = &v
}

func (o PoolInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["name"] = o.Name
	toSerialize["total_amount"] = o.TotalAmount
	toSerialize["implementation"] = o.Implementation
	toSerialize["apy"] = o.Apy
	toSerialize["min_stake"] = o.MinStake
	toSerialize["cycle_start"] = o.CycleStart
	toSerialize["cycle_end"] = o.CycleEnd
	toSerialize["verified"] = o.Verified
	toSerialize["current_nominators"] = o.CurrentNominators
	toSerialize["max_nominators"] = o.MaxNominators
	if !IsNil(o.LiquidJettonMaster) {
		toSerialize["liquid_jetton_master"] = o.LiquidJettonMaster
	}
	toSerialize["nominators_stake"] = o.NominatorsStake
	toSerialize["validator_stake"] = o.ValidatorStake
	if !IsNil(o.CycleLength) {
		toSerialize["cycle_length"] = o.CycleLength
	}
	return toSerialize, nil
}

func (o *PoolInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"name",
		"total_amount",
		"implementation",
		"apy",
		"min_stake",
		"cycle_start",
		"cycle_end",
		"verified",
		"current_nominators",
		"max_nominators",
		"nominators_stake",
		"validator_stake",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPoolInfo := _PoolInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPoolInfo)

	if err != nil {
		return err
	}

	*o = PoolInfo(varPoolInfo)

	return err
}

type NullablePoolInfo struct {
	value *PoolInfo
	isSet bool
}

func (v NullablePoolInfo) Get() *PoolInfo {
	return v.value
}

func (v *NullablePoolInfo) Set(val *PoolInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolInfo(val *PoolInfo) *NullablePoolInfo {
	return &NullablePoolInfo{value: val, isSet: true}
}

func (v NullablePoolInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


