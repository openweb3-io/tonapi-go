/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig7CurrenciesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig7CurrenciesInner{}

// BlockchainConfig7CurrenciesInner struct for BlockchainConfig7CurrenciesInner
type BlockchainConfig7CurrenciesInner struct {
	CurrencyId int64 `json:"currency_id"`
	Amount string `json:"amount"`
}

type _BlockchainConfig7CurrenciesInner BlockchainConfig7CurrenciesInner

// NewBlockchainConfig7CurrenciesInner instantiates a new BlockchainConfig7CurrenciesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig7CurrenciesInner(currencyId int64, amount string) *BlockchainConfig7CurrenciesInner {
	this := BlockchainConfig7CurrenciesInner{}
	this.CurrencyId = currencyId
	this.Amount = amount
	return &this
}

// NewBlockchainConfig7CurrenciesInnerWithDefaults instantiates a new BlockchainConfig7CurrenciesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig7CurrenciesInnerWithDefaults() *BlockchainConfig7CurrenciesInner {
	this := BlockchainConfig7CurrenciesInner{}
	return &this
}

// GetCurrencyId returns the CurrencyId field value
func (o *BlockchainConfig7CurrenciesInner) GetCurrencyId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig7CurrenciesInner) GetCurrencyIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyId, true
}

// SetCurrencyId sets field value
func (o *BlockchainConfig7CurrenciesInner) SetCurrencyId(v int64) {
	o.CurrencyId = v
}

// GetAmount returns the Amount field value
func (o *BlockchainConfig7CurrenciesInner) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig7CurrenciesInner) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *BlockchainConfig7CurrenciesInner) SetAmount(v string) {
	o.Amount = v
}

func (o BlockchainConfig7CurrenciesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig7CurrenciesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currency_id"] = o.CurrencyId
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *BlockchainConfig7CurrenciesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency_id",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig7CurrenciesInner := _BlockchainConfig7CurrenciesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig7CurrenciesInner)

	if err != nil {
		return err
	}

	*o = BlockchainConfig7CurrenciesInner(varBlockchainConfig7CurrenciesInner)

	return err
}

type NullableBlockchainConfig7CurrenciesInner struct {
	value *BlockchainConfig7CurrenciesInner
	isSet bool
}

func (v NullableBlockchainConfig7CurrenciesInner) Get() *BlockchainConfig7CurrenciesInner {
	return v.value
}

func (v *NullableBlockchainConfig7CurrenciesInner) Set(val *BlockchainConfig7CurrenciesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig7CurrenciesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig7CurrenciesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig7CurrenciesInner(val *BlockchainConfig7CurrenciesInner) *NullableBlockchainConfig7CurrenciesInner {
	return &NullableBlockchainConfig7CurrenciesInner{value: val, isSet: true}
}

func (v NullableBlockchainConfig7CurrenciesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig7CurrenciesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


