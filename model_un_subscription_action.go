/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnSubscriptionAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnSubscriptionAction{}

// UnSubscriptionAction struct for UnSubscriptionAction
type UnSubscriptionAction struct {
	Subscriber AccountAddress `json:"subscriber"`
	Subscription string `json:"subscription"`
	Beneficiary AccountAddress `json:"beneficiary"`
}

type _UnSubscriptionAction UnSubscriptionAction

// NewUnSubscriptionAction instantiates a new UnSubscriptionAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnSubscriptionAction(subscriber AccountAddress, subscription string, beneficiary AccountAddress) *UnSubscriptionAction {
	this := UnSubscriptionAction{}
	this.Subscriber = subscriber
	this.Subscription = subscription
	this.Beneficiary = beneficiary
	return &this
}

// NewUnSubscriptionActionWithDefaults instantiates a new UnSubscriptionAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnSubscriptionActionWithDefaults() *UnSubscriptionAction {
	this := UnSubscriptionAction{}
	return &this
}

// GetSubscriber returns the Subscriber field value
func (o *UnSubscriptionAction) GetSubscriber() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Subscriber
}

// GetSubscriberOk returns a tuple with the Subscriber field value
// and a boolean to check if the value has been set.
func (o *UnSubscriptionAction) GetSubscriberOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscriber, true
}

// SetSubscriber sets field value
func (o *UnSubscriptionAction) SetSubscriber(v AccountAddress) {
	o.Subscriber = v
}

// GetSubscription returns the Subscription field value
func (o *UnSubscriptionAction) GetSubscription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value
// and a boolean to check if the value has been set.
func (o *UnSubscriptionAction) GetSubscriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscription, true
}

// SetSubscription sets field value
func (o *UnSubscriptionAction) SetSubscription(v string) {
	o.Subscription = v
}

// GetBeneficiary returns the Beneficiary field value
func (o *UnSubscriptionAction) GetBeneficiary() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Beneficiary
}

// GetBeneficiaryOk returns a tuple with the Beneficiary field value
// and a boolean to check if the value has been set.
func (o *UnSubscriptionAction) GetBeneficiaryOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Beneficiary, true
}

// SetBeneficiary sets field value
func (o *UnSubscriptionAction) SetBeneficiary(v AccountAddress) {
	o.Beneficiary = v
}

func (o UnSubscriptionAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnSubscriptionAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriber"] = o.Subscriber
	toSerialize["subscription"] = o.Subscription
	toSerialize["beneficiary"] = o.Beneficiary
	return toSerialize, nil
}

func (o *UnSubscriptionAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscriber",
		"subscription",
		"beneficiary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnSubscriptionAction := _UnSubscriptionAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnSubscriptionAction)

	if err != nil {
		return err
	}

	*o = UnSubscriptionAction(varUnSubscriptionAction)

	return err
}

type NullableUnSubscriptionAction struct {
	value *UnSubscriptionAction
	isSet bool
}

func (v NullableUnSubscriptionAction) Get() *UnSubscriptionAction {
	return v.value
}

func (v *NullableUnSubscriptionAction) Set(val *UnSubscriptionAction) {
	v.value = val
	v.isSet = true
}

func (v NullableUnSubscriptionAction) IsSet() bool {
	return v.isSet
}

func (v *NullableUnSubscriptionAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnSubscriptionAction(val *UnSubscriptionAction) *NullableUnSubscriptionAction {
	return &NullableUnSubscriptionAction{value: val, isSet: true}
}

func (v NullableUnSubscriptionAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnSubscriptionAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


