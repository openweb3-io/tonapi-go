/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockCurrencyCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockCurrencyCollection{}

// BlockCurrencyCollection struct for BlockCurrencyCollection
type BlockCurrencyCollection struct {
	Grams int64 `json:"grams"`
	Other []BlockCurrencyCollectionOtherInner `json:"other"`
}

type _BlockCurrencyCollection BlockCurrencyCollection

// NewBlockCurrencyCollection instantiates a new BlockCurrencyCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockCurrencyCollection(grams int64, other []BlockCurrencyCollectionOtherInner) *BlockCurrencyCollection {
	this := BlockCurrencyCollection{}
	this.Grams = grams
	this.Other = other
	return &this
}

// NewBlockCurrencyCollectionWithDefaults instantiates a new BlockCurrencyCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockCurrencyCollectionWithDefaults() *BlockCurrencyCollection {
	this := BlockCurrencyCollection{}
	return &this
}

// GetGrams returns the Grams field value
func (o *BlockCurrencyCollection) GetGrams() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Grams
}

// GetGramsOk returns a tuple with the Grams field value
// and a boolean to check if the value has been set.
func (o *BlockCurrencyCollection) GetGramsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Grams, true
}

// SetGrams sets field value
func (o *BlockCurrencyCollection) SetGrams(v int64) {
	o.Grams = v
}

// GetOther returns the Other field value
func (o *BlockCurrencyCollection) GetOther() []BlockCurrencyCollectionOtherInner {
	if o == nil {
		var ret []BlockCurrencyCollectionOtherInner
		return ret
	}

	return o.Other
}

// GetOtherOk returns a tuple with the Other field value
// and a boolean to check if the value has been set.
func (o *BlockCurrencyCollection) GetOtherOk() ([]BlockCurrencyCollectionOtherInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Other, true
}

// SetOther sets field value
func (o *BlockCurrencyCollection) SetOther(v []BlockCurrencyCollectionOtherInner) {
	o.Other = v
}

func (o BlockCurrencyCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockCurrencyCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["grams"] = o.Grams
	toSerialize["other"] = o.Other
	return toSerialize, nil
}

func (o *BlockCurrencyCollection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"grams",
		"other",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockCurrencyCollection := _BlockCurrencyCollection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockCurrencyCollection)

	if err != nil {
		return err
	}

	*o = BlockCurrencyCollection(varBlockCurrencyCollection)

	return err
}

type NullableBlockCurrencyCollection struct {
	value *BlockCurrencyCollection
	isSet bool
}

func (v NullableBlockCurrencyCollection) Get() *BlockCurrencyCollection {
	return v.value
}

func (v *NullableBlockCurrencyCollection) Set(val *BlockCurrencyCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockCurrencyCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockCurrencyCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockCurrencyCollection(val *BlockCurrencyCollection) *NullableBlockCurrencyCollection {
	return &NullableBlockCurrencyCollection{value: val, isSet: true}
}

func (v NullableBlockCurrencyCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockCurrencyCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


