/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonBridgeParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonBridgeParams{}

// JettonBridgeParams struct for JettonBridgeParams
type JettonBridgeParams struct {
	BridgeAddress string `json:"bridge_address"`
	OraclesAddress string `json:"oracles_address"`
	StateFlags int32 `json:"state_flags"`
	BurnBridgeFee *int64 `json:"burn_bridge_fee,omitempty"`
	Oracles []Oracle `json:"oracles"`
	ExternalChainAddress *string `json:"external_chain_address,omitempty"`
	Prices *JettonBridgePrices `json:"prices,omitempty"`
}

type _JettonBridgeParams JettonBridgeParams

// NewJettonBridgeParams instantiates a new JettonBridgeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonBridgeParams(bridgeAddress string, oraclesAddress string, stateFlags int32, oracles []Oracle) *JettonBridgeParams {
	this := JettonBridgeParams{}
	this.BridgeAddress = bridgeAddress
	this.OraclesAddress = oraclesAddress
	this.StateFlags = stateFlags
	this.Oracles = oracles
	return &this
}

// NewJettonBridgeParamsWithDefaults instantiates a new JettonBridgeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonBridgeParamsWithDefaults() *JettonBridgeParams {
	this := JettonBridgeParams{}
	return &this
}

// GetBridgeAddress returns the BridgeAddress field value
func (o *JettonBridgeParams) GetBridgeAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BridgeAddress
}

// GetBridgeAddressOk returns a tuple with the BridgeAddress field value
// and a boolean to check if the value has been set.
func (o *JettonBridgeParams) GetBridgeAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BridgeAddress, true
}

// SetBridgeAddress sets field value
func (o *JettonBridgeParams) SetBridgeAddress(v string) {
	o.BridgeAddress = v
}

// GetOraclesAddress returns the OraclesAddress field value
func (o *JettonBridgeParams) GetOraclesAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OraclesAddress
}

// GetOraclesAddressOk returns a tuple with the OraclesAddress field value
// and a boolean to check if the value has been set.
func (o *JettonBridgeParams) GetOraclesAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OraclesAddress, true
}

// SetOraclesAddress sets field value
func (o *JettonBridgeParams) SetOraclesAddress(v string) {
	o.OraclesAddress = v
}

// GetStateFlags returns the StateFlags field value
func (o *JettonBridgeParams) GetStateFlags() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StateFlags
}

// GetStateFlagsOk returns a tuple with the StateFlags field value
// and a boolean to check if the value has been set.
func (o *JettonBridgeParams) GetStateFlagsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateFlags, true
}

// SetStateFlags sets field value
func (o *JettonBridgeParams) SetStateFlags(v int32) {
	o.StateFlags = v
}

// GetBurnBridgeFee returns the BurnBridgeFee field value if set, zero value otherwise.
func (o *JettonBridgeParams) GetBurnBridgeFee() int64 {
	if o == nil || IsNil(o.BurnBridgeFee) {
		var ret int64
		return ret
	}
	return *o.BurnBridgeFee
}

// GetBurnBridgeFeeOk returns a tuple with the BurnBridgeFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonBridgeParams) GetBurnBridgeFeeOk() (*int64, bool) {
	if o == nil || IsNil(o.BurnBridgeFee) {
		return nil, false
	}
	return o.BurnBridgeFee, true
}

// HasBurnBridgeFee returns a boolean if a field has been set.
func (o *JettonBridgeParams) HasBurnBridgeFee() bool {
	if o != nil && !IsNil(o.BurnBridgeFee) {
		return true
	}

	return false
}

// SetBurnBridgeFee gets a reference to the given int64 and assigns it to the BurnBridgeFee field.
func (o *JettonBridgeParams) SetBurnBridgeFee(v int64) {
	o.BurnBridgeFee = &v
}

// GetOracles returns the Oracles field value
func (o *JettonBridgeParams) GetOracles() []Oracle {
	if o == nil {
		var ret []Oracle
		return ret
	}

	return o.Oracles
}

// GetOraclesOk returns a tuple with the Oracles field value
// and a boolean to check if the value has been set.
func (o *JettonBridgeParams) GetOraclesOk() ([]Oracle, bool) {
	if o == nil {
		return nil, false
	}
	return o.Oracles, true
}

// SetOracles sets field value
func (o *JettonBridgeParams) SetOracles(v []Oracle) {
	o.Oracles = v
}

// GetExternalChainAddress returns the ExternalChainAddress field value if set, zero value otherwise.
func (o *JettonBridgeParams) GetExternalChainAddress() string {
	if o == nil || IsNil(o.ExternalChainAddress) {
		var ret string
		return ret
	}
	return *o.ExternalChainAddress
}

// GetExternalChainAddressOk returns a tuple with the ExternalChainAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonBridgeParams) GetExternalChainAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalChainAddress) {
		return nil, false
	}
	return o.ExternalChainAddress, true
}

// HasExternalChainAddress returns a boolean if a field has been set.
func (o *JettonBridgeParams) HasExternalChainAddress() bool {
	if o != nil && !IsNil(o.ExternalChainAddress) {
		return true
	}

	return false
}

// SetExternalChainAddress gets a reference to the given string and assigns it to the ExternalChainAddress field.
func (o *JettonBridgeParams) SetExternalChainAddress(v string) {
	o.ExternalChainAddress = &v
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *JettonBridgeParams) GetPrices() JettonBridgePrices {
	if o == nil || IsNil(o.Prices) {
		var ret JettonBridgePrices
		return ret
	}
	return *o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonBridgeParams) GetPricesOk() (*JettonBridgePrices, bool) {
	if o == nil || IsNil(o.Prices) {
		return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *JettonBridgeParams) HasPrices() bool {
	if o != nil && !IsNil(o.Prices) {
		return true
	}

	return false
}

// SetPrices gets a reference to the given JettonBridgePrices and assigns it to the Prices field.
func (o *JettonBridgeParams) SetPrices(v JettonBridgePrices) {
	o.Prices = &v
}

func (o JettonBridgeParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonBridgeParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bridge_address"] = o.BridgeAddress
	toSerialize["oracles_address"] = o.OraclesAddress
	toSerialize["state_flags"] = o.StateFlags
	if !IsNil(o.BurnBridgeFee) {
		toSerialize["burn_bridge_fee"] = o.BurnBridgeFee
	}
	toSerialize["oracles"] = o.Oracles
	if !IsNil(o.ExternalChainAddress) {
		toSerialize["external_chain_address"] = o.ExternalChainAddress
	}
	if !IsNil(o.Prices) {
		toSerialize["prices"] = o.Prices
	}
	return toSerialize, nil
}

func (o *JettonBridgeParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bridge_address",
		"oracles_address",
		"state_flags",
		"oracles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonBridgeParams := _JettonBridgeParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonBridgeParams)

	if err != nil {
		return err
	}

	*o = JettonBridgeParams(varJettonBridgeParams)

	return err
}

type NullableJettonBridgeParams struct {
	value *JettonBridgeParams
	isSet bool
}

func (v NullableJettonBridgeParams) Get() *JettonBridgeParams {
	return v.value
}

func (v *NullableJettonBridgeParams) Set(val *JettonBridgeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonBridgeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonBridgeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonBridgeParams(val *JettonBridgeParams) *NullableJettonBridgeParams {
	return &NullableJettonBridgeParams{value: val, isSet: true}
}

func (v NullableJettonBridgeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonBridgeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


