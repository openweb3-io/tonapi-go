/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetAllRawShardsInfo200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetAllRawShardsInfo200Response{}

// GetAllRawShardsInfo200Response struct for GetAllRawShardsInfo200Response
type GetAllRawShardsInfo200Response struct {
	Id BlockRaw `json:"id"`
	Proof string `json:"proof"`
	Data string `json:"data"`
}

type _GetAllRawShardsInfo200Response GetAllRawShardsInfo200Response

// NewGetAllRawShardsInfo200Response instantiates a new GetAllRawShardsInfo200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetAllRawShardsInfo200Response(id BlockRaw, proof string, data string) *GetAllRawShardsInfo200Response {
	this := GetAllRawShardsInfo200Response{}
	this.Id = id
	this.Proof = proof
	this.Data = data
	return &this
}

// NewGetAllRawShardsInfo200ResponseWithDefaults instantiates a new GetAllRawShardsInfo200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetAllRawShardsInfo200ResponseWithDefaults() *GetAllRawShardsInfo200Response {
	this := GetAllRawShardsInfo200Response{}
	return &this
}

// GetId returns the Id field value
func (o *GetAllRawShardsInfo200Response) GetId() BlockRaw {
	if o == nil {
		var ret BlockRaw
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetAllRawShardsInfo200Response) GetIdOk() (*BlockRaw, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetAllRawShardsInfo200Response) SetId(v BlockRaw) {
	o.Id = v
}

// GetProof returns the Proof field value
func (o *GetAllRawShardsInfo200Response) GetProof() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Proof
}

// GetProofOk returns a tuple with the Proof field value
// and a boolean to check if the value has been set.
func (o *GetAllRawShardsInfo200Response) GetProofOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Proof, true
}

// SetProof sets field value
func (o *GetAllRawShardsInfo200Response) SetProof(v string) {
	o.Proof = v
}

// GetData returns the Data field value
func (o *GetAllRawShardsInfo200Response) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *GetAllRawShardsInfo200Response) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *GetAllRawShardsInfo200Response) SetData(v string) {
	o.Data = v
}

func (o GetAllRawShardsInfo200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetAllRawShardsInfo200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["proof"] = o.Proof
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *GetAllRawShardsInfo200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"proof",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetAllRawShardsInfo200Response := _GetAllRawShardsInfo200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetAllRawShardsInfo200Response)

	if err != nil {
		return err
	}

	*o = GetAllRawShardsInfo200Response(varGetAllRawShardsInfo200Response)

	return err
}

type NullableGetAllRawShardsInfo200Response struct {
	value *GetAllRawShardsInfo200Response
	isSet bool
}

func (v NullableGetAllRawShardsInfo200Response) Get() *GetAllRawShardsInfo200Response {
	return v.value
}

func (v *NullableGetAllRawShardsInfo200Response) Set(val *GetAllRawShardsInfo200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllRawShardsInfo200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllRawShardsInfo200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllRawShardsInfo200Response(val *GetAllRawShardsInfo200Response) *NullableGetAllRawShardsInfo200Response {
	return &NullableGetAllRawShardsInfo200Response{value: val, isSet: true}
}

func (v NullableGetAllRawShardsInfo200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllRawShardsInfo200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


