/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Validator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Validator{}

// Validator struct for Validator
type Validator struct {
	Address string `json:"address"`
	AdnlAddress string `json:"adnl_address"`
	Stake int64 `json:"stake"`
	MaxFactor int64 `json:"max_factor"`
}

type _Validator Validator

// NewValidator instantiates a new Validator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidator(address string, adnlAddress string, stake int64, maxFactor int64) *Validator {
	this := Validator{}
	this.Address = address
	this.AdnlAddress = adnlAddress
	this.Stake = stake
	this.MaxFactor = maxFactor
	return &this
}

// NewValidatorWithDefaults instantiates a new Validator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidatorWithDefaults() *Validator {
	this := Validator{}
	return &this
}

// GetAddress returns the Address field value
func (o *Validator) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Validator) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Validator) SetAddress(v string) {
	o.Address = v
}

// GetAdnlAddress returns the AdnlAddress field value
func (o *Validator) GetAdnlAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdnlAddress
}

// GetAdnlAddressOk returns a tuple with the AdnlAddress field value
// and a boolean to check if the value has been set.
func (o *Validator) GetAdnlAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdnlAddress, true
}

// SetAdnlAddress sets field value
func (o *Validator) SetAdnlAddress(v string) {
	o.AdnlAddress = v
}

// GetStake returns the Stake field value
func (o *Validator) GetStake() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Stake
}

// GetStakeOk returns a tuple with the Stake field value
// and a boolean to check if the value has been set.
func (o *Validator) GetStakeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stake, true
}

// SetStake sets field value
func (o *Validator) SetStake(v int64) {
	o.Stake = v
}

// GetMaxFactor returns the MaxFactor field value
func (o *Validator) GetMaxFactor() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxFactor
}

// GetMaxFactorOk returns a tuple with the MaxFactor field value
// and a boolean to check if the value has been set.
func (o *Validator) GetMaxFactorOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxFactor, true
}

// SetMaxFactor sets field value
func (o *Validator) SetMaxFactor(v int64) {
	o.MaxFactor = v
}

func (o Validator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Validator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["adnl_address"] = o.AdnlAddress
	toSerialize["stake"] = o.Stake
	toSerialize["max_factor"] = o.MaxFactor
	return toSerialize, nil
}

func (o *Validator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"adnl_address",
		"stake",
		"max_factor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidator := _Validator{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValidator)

	if err != nil {
		return err
	}

	*o = Validator(varValidator)

	return err
}

type NullableValidator struct {
	value *Validator
	isSet bool
}

func (v NullableValidator) Get() *Validator {
	return v.value
}

func (v *NullableValidator) Set(val *Validator) {
	v.value = val
	v.isSet = true
}

func (v NullableValidator) IsSet() bool {
	return v.isSet
}

func (v *NullableValidator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidator(val *Validator) *NullableValidator {
	return &NullableValidator{value: val, isSet: true}
}

func (v NullableValidator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


