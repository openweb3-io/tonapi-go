/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig15 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig15{}

// BlockchainConfig15 The reward in nanoTons for block creation in the TON blockchain.
type BlockchainConfig15 struct {
	ValidatorsElectedFor int64 `json:"validators_elected_for"`
	ElectionsStartBefore int64 `json:"elections_start_before"`
	ElectionsEndBefore int64 `json:"elections_end_before"`
	StakeHeldFor int64 `json:"stake_held_for"`
}

type _BlockchainConfig15 BlockchainConfig15

// NewBlockchainConfig15 instantiates a new BlockchainConfig15 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig15(validatorsElectedFor int64, electionsStartBefore int64, electionsEndBefore int64, stakeHeldFor int64) *BlockchainConfig15 {
	this := BlockchainConfig15{}
	this.ValidatorsElectedFor = validatorsElectedFor
	this.ElectionsStartBefore = electionsStartBefore
	this.ElectionsEndBefore = electionsEndBefore
	this.StakeHeldFor = stakeHeldFor
	return &this
}

// NewBlockchainConfig15WithDefaults instantiates a new BlockchainConfig15 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig15WithDefaults() *BlockchainConfig15 {
	this := BlockchainConfig15{}
	return &this
}

// GetValidatorsElectedFor returns the ValidatorsElectedFor field value
func (o *BlockchainConfig15) GetValidatorsElectedFor() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ValidatorsElectedFor
}

// GetValidatorsElectedForOk returns a tuple with the ValidatorsElectedFor field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig15) GetValidatorsElectedForOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorsElectedFor, true
}

// SetValidatorsElectedFor sets field value
func (o *BlockchainConfig15) SetValidatorsElectedFor(v int64) {
	o.ValidatorsElectedFor = v
}

// GetElectionsStartBefore returns the ElectionsStartBefore field value
func (o *BlockchainConfig15) GetElectionsStartBefore() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ElectionsStartBefore
}

// GetElectionsStartBeforeOk returns a tuple with the ElectionsStartBefore field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig15) GetElectionsStartBeforeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElectionsStartBefore, true
}

// SetElectionsStartBefore sets field value
func (o *BlockchainConfig15) SetElectionsStartBefore(v int64) {
	o.ElectionsStartBefore = v
}

// GetElectionsEndBefore returns the ElectionsEndBefore field value
func (o *BlockchainConfig15) GetElectionsEndBefore() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ElectionsEndBefore
}

// GetElectionsEndBeforeOk returns a tuple with the ElectionsEndBefore field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig15) GetElectionsEndBeforeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElectionsEndBefore, true
}

// SetElectionsEndBefore sets field value
func (o *BlockchainConfig15) SetElectionsEndBefore(v int64) {
	o.ElectionsEndBefore = v
}

// GetStakeHeldFor returns the StakeHeldFor field value
func (o *BlockchainConfig15) GetStakeHeldFor() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StakeHeldFor
}

// GetStakeHeldForOk returns a tuple with the StakeHeldFor field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig15) GetStakeHeldForOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StakeHeldFor, true
}

// SetStakeHeldFor sets field value
func (o *BlockchainConfig15) SetStakeHeldFor(v int64) {
	o.StakeHeldFor = v
}

func (o BlockchainConfig15) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig15) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["validators_elected_for"] = o.ValidatorsElectedFor
	toSerialize["elections_start_before"] = o.ElectionsStartBefore
	toSerialize["elections_end_before"] = o.ElectionsEndBefore
	toSerialize["stake_held_for"] = o.StakeHeldFor
	return toSerialize, nil
}

func (o *BlockchainConfig15) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"validators_elected_for",
		"elections_start_before",
		"elections_end_before",
		"stake_held_for",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig15 := _BlockchainConfig15{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig15)

	if err != nil {
		return err
	}

	*o = BlockchainConfig15(varBlockchainConfig15)

	return err
}

type NullableBlockchainConfig15 struct {
	value *BlockchainConfig15
	isSet bool
}

func (v NullableBlockchainConfig15) Get() *BlockchainConfig15 {
	return v.value
}

func (v *NullableBlockchainConfig15) Set(val *BlockchainConfig15) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig15) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig15) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig15(val *BlockchainConfig15) *NullableBlockchainConfig15 {
	return &NullableBlockchainConfig15{value: val, isSet: true}
}

func (v NullableBlockchainConfig15) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig15) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


