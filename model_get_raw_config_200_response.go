/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRawConfig200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRawConfig200Response{}

// GetRawConfig200Response struct for GetRawConfig200Response
type GetRawConfig200Response struct {
	Mode int32 `json:"mode"`
	Id BlockRaw `json:"id"`
	StateProof string `json:"state_proof"`
	ConfigProof string `json:"config_proof"`
}

type _GetRawConfig200Response GetRawConfig200Response

// NewGetRawConfig200Response instantiates a new GetRawConfig200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRawConfig200Response(mode int32, id BlockRaw, stateProof string, configProof string) *GetRawConfig200Response {
	this := GetRawConfig200Response{}
	this.Mode = mode
	this.Id = id
	this.StateProof = stateProof
	this.ConfigProof = configProof
	return &this
}

// NewGetRawConfig200ResponseWithDefaults instantiates a new GetRawConfig200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRawConfig200ResponseWithDefaults() *GetRawConfig200Response {
	this := GetRawConfig200Response{}
	return &this
}

// GetMode returns the Mode field value
func (o *GetRawConfig200Response) GetMode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *GetRawConfig200Response) GetModeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *GetRawConfig200Response) SetMode(v int32) {
	o.Mode = v
}

// GetId returns the Id field value
func (o *GetRawConfig200Response) GetId() BlockRaw {
	if o == nil {
		var ret BlockRaw
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetRawConfig200Response) GetIdOk() (*BlockRaw, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetRawConfig200Response) SetId(v BlockRaw) {
	o.Id = v
}

// GetStateProof returns the StateProof field value
func (o *GetRawConfig200Response) GetStateProof() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateProof
}

// GetStateProofOk returns a tuple with the StateProof field value
// and a boolean to check if the value has been set.
func (o *GetRawConfig200Response) GetStateProofOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateProof, true
}

// SetStateProof sets field value
func (o *GetRawConfig200Response) SetStateProof(v string) {
	o.StateProof = v
}

// GetConfigProof returns the ConfigProof field value
func (o *GetRawConfig200Response) GetConfigProof() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigProof
}

// GetConfigProofOk returns a tuple with the ConfigProof field value
// and a boolean to check if the value has been set.
func (o *GetRawConfig200Response) GetConfigProofOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigProof, true
}

// SetConfigProof sets field value
func (o *GetRawConfig200Response) SetConfigProof(v string) {
	o.ConfigProof = v
}

func (o GetRawConfig200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRawConfig200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mode"] = o.Mode
	toSerialize["id"] = o.Id
	toSerialize["state_proof"] = o.StateProof
	toSerialize["config_proof"] = o.ConfigProof
	return toSerialize, nil
}

func (o *GetRawConfig200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mode",
		"id",
		"state_proof",
		"config_proof",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRawConfig200Response := _GetRawConfig200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRawConfig200Response)

	if err != nil {
		return err
	}

	*o = GetRawConfig200Response(varGetRawConfig200Response)

	return err
}

type NullableGetRawConfig200Response struct {
	value *GetRawConfig200Response
	isSet bool
}

func (v NullableGetRawConfig200Response) Get() *GetRawConfig200Response {
	return v.value
}

func (v *NullableGetRawConfig200Response) Set(val *GetRawConfig200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRawConfig200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRawConfig200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRawConfig200Response(val *GetRawConfig200Response) *NullableGetRawConfig200Response {
	return &NullableGetRawConfig200Response{value: val, isSet: true}
}

func (v NullableGetRawConfig200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRawConfig200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


