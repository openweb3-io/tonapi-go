/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainBlockShardsShardsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainBlockShardsShardsInner{}

// BlockchainBlockShardsShardsInner struct for BlockchainBlockShardsShardsInner
type BlockchainBlockShardsShardsInner struct {
	LastKnownBlockId string `json:"last_known_block_id"`
	LastKnownBlock BlockchainBlock `json:"last_known_block"`
}

type _BlockchainBlockShardsShardsInner BlockchainBlockShardsShardsInner

// NewBlockchainBlockShardsShardsInner instantiates a new BlockchainBlockShardsShardsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainBlockShardsShardsInner(lastKnownBlockId string, lastKnownBlock BlockchainBlock) *BlockchainBlockShardsShardsInner {
	this := BlockchainBlockShardsShardsInner{}
	this.LastKnownBlockId = lastKnownBlockId
	this.LastKnownBlock = lastKnownBlock
	return &this
}

// NewBlockchainBlockShardsShardsInnerWithDefaults instantiates a new BlockchainBlockShardsShardsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainBlockShardsShardsInnerWithDefaults() *BlockchainBlockShardsShardsInner {
	this := BlockchainBlockShardsShardsInner{}
	return &this
}

// GetLastKnownBlockId returns the LastKnownBlockId field value
func (o *BlockchainBlockShardsShardsInner) GetLastKnownBlockId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastKnownBlockId
}

// GetLastKnownBlockIdOk returns a tuple with the LastKnownBlockId field value
// and a boolean to check if the value has been set.
func (o *BlockchainBlockShardsShardsInner) GetLastKnownBlockIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastKnownBlockId, true
}

// SetLastKnownBlockId sets field value
func (o *BlockchainBlockShardsShardsInner) SetLastKnownBlockId(v string) {
	o.LastKnownBlockId = v
}

// GetLastKnownBlock returns the LastKnownBlock field value
func (o *BlockchainBlockShardsShardsInner) GetLastKnownBlock() BlockchainBlock {
	if o == nil {
		var ret BlockchainBlock
		return ret
	}

	return o.LastKnownBlock
}

// GetLastKnownBlockOk returns a tuple with the LastKnownBlock field value
// and a boolean to check if the value has been set.
func (o *BlockchainBlockShardsShardsInner) GetLastKnownBlockOk() (*BlockchainBlock, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastKnownBlock, true
}

// SetLastKnownBlock sets field value
func (o *BlockchainBlockShardsShardsInner) SetLastKnownBlock(v BlockchainBlock) {
	o.LastKnownBlock = v
}

func (o BlockchainBlockShardsShardsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainBlockShardsShardsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["last_known_block_id"] = o.LastKnownBlockId
	toSerialize["last_known_block"] = o.LastKnownBlock
	return toSerialize, nil
}

func (o *BlockchainBlockShardsShardsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"last_known_block_id",
		"last_known_block",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainBlockShardsShardsInner := _BlockchainBlockShardsShardsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainBlockShardsShardsInner)

	if err != nil {
		return err
	}

	*o = BlockchainBlockShardsShardsInner(varBlockchainBlockShardsShardsInner)

	return err
}

type NullableBlockchainBlockShardsShardsInner struct {
	value *BlockchainBlockShardsShardsInner
	isSet bool
}

func (v NullableBlockchainBlockShardsShardsInner) Get() *BlockchainBlockShardsShardsInner {
	return v.value
}

func (v *NullableBlockchainBlockShardsShardsInner) Set(val *BlockchainBlockShardsShardsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainBlockShardsShardsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainBlockShardsShardsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainBlockShardsShardsInner(val *BlockchainBlockShardsShardsInner) *NullableBlockchainBlockShardsShardsInner {
	return &NullableBlockchainBlockShardsShardsInner{value: val, isSet: true}
}

func (v NullableBlockchainBlockShardsShardsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainBlockShardsShardsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


