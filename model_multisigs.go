/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Multisigs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Multisigs{}

// Multisigs struct for Multisigs
type Multisigs struct {
	Multisigs []Multisig `json:"multisigs"`
}

type _Multisigs Multisigs

// NewMultisigs instantiates a new Multisigs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultisigs(multisigs []Multisig) *Multisigs {
	this := Multisigs{}
	this.Multisigs = multisigs
	return &this
}

// NewMultisigsWithDefaults instantiates a new Multisigs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultisigsWithDefaults() *Multisigs {
	this := Multisigs{}
	return &this
}

// GetMultisigs returns the Multisigs field value
func (o *Multisigs) GetMultisigs() []Multisig {
	if o == nil {
		var ret []Multisig
		return ret
	}

	return o.Multisigs
}

// GetMultisigsOk returns a tuple with the Multisigs field value
// and a boolean to check if the value has been set.
func (o *Multisigs) GetMultisigsOk() ([]Multisig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Multisigs, true
}

// SetMultisigs sets field value
func (o *Multisigs) SetMultisigs(v []Multisig) {
	o.Multisigs = v
}

func (o Multisigs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Multisigs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["multisigs"] = o.Multisigs
	return toSerialize, nil
}

func (o *Multisigs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"multisigs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultisigs := _Multisigs{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMultisigs)

	if err != nil {
		return err
	}

	*o = Multisigs(varMultisigs)

	return err
}

type NullableMultisigs struct {
	value *Multisigs
	isSet bool
}

func (v NullableMultisigs) Get() *Multisigs {
	return v.value
}

func (v *NullableMultisigs) Set(val *Multisigs) {
	v.value = val
	v.isSet = true
}

func (v NullableMultisigs) IsSet() bool {
	return v.isSet
}

func (v *NullableMultisigs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultisigs(val *Multisigs) *NullableMultisigs {
	return &NullableMultisigs{value: val, isSet: true}
}

func (v NullableMultisigs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultisigs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


