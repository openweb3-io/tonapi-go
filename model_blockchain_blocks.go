/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainBlocks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainBlocks{}

// BlockchainBlocks struct for BlockchainBlocks
type BlockchainBlocks struct {
	Blocks []BlockchainBlock `json:"blocks"`
}

type _BlockchainBlocks BlockchainBlocks

// NewBlockchainBlocks instantiates a new BlockchainBlocks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainBlocks(blocks []BlockchainBlock) *BlockchainBlocks {
	this := BlockchainBlocks{}
	this.Blocks = blocks
	return &this
}

// NewBlockchainBlocksWithDefaults instantiates a new BlockchainBlocks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainBlocksWithDefaults() *BlockchainBlocks {
	this := BlockchainBlocks{}
	return &this
}

// GetBlocks returns the Blocks field value
func (o *BlockchainBlocks) GetBlocks() []BlockchainBlock {
	if o == nil {
		var ret []BlockchainBlock
		return ret
	}

	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value
// and a boolean to check if the value has been set.
func (o *BlockchainBlocks) GetBlocksOk() ([]BlockchainBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.Blocks, true
}

// SetBlocks sets field value
func (o *BlockchainBlocks) SetBlocks(v []BlockchainBlock) {
	o.Blocks = v
}

func (o BlockchainBlocks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainBlocks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blocks"] = o.Blocks
	return toSerialize, nil
}

func (o *BlockchainBlocks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blocks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainBlocks := _BlockchainBlocks{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainBlocks)

	if err != nil {
		return err
	}

	*o = BlockchainBlocks(varBlockchainBlocks)

	return err
}

type NullableBlockchainBlocks struct {
	value *BlockchainBlocks
	isSet bool
}

func (v NullableBlockchainBlocks) Get() *BlockchainBlocks {
	return v.value
}

func (v *NullableBlockchainBlocks) Set(val *BlockchainBlocks) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainBlocks) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainBlocks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainBlocks(val *BlockchainBlocks) *NullableBlockchainBlocks {
	return &NullableBlockchainBlocks{value: val, isSet: true}
}

func (v NullableBlockchainBlocks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainBlocks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


