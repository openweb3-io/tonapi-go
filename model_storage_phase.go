/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoragePhase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePhase{}

// StoragePhase struct for StoragePhase
type StoragePhase struct {
	FeesCollected int64 `json:"fees_collected"`
	FeesDue *int64 `json:"fees_due,omitempty"`
	StatusChange AccStatusChange `json:"status_change"`
}

type _StoragePhase StoragePhase

// NewStoragePhase instantiates a new StoragePhase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePhase(feesCollected int64, statusChange AccStatusChange) *StoragePhase {
	this := StoragePhase{}
	this.FeesCollected = feesCollected
	this.StatusChange = statusChange
	return &this
}

// NewStoragePhaseWithDefaults instantiates a new StoragePhase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePhaseWithDefaults() *StoragePhase {
	this := StoragePhase{}
	return &this
}

// GetFeesCollected returns the FeesCollected field value
func (o *StoragePhase) GetFeesCollected() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FeesCollected
}

// GetFeesCollectedOk returns a tuple with the FeesCollected field value
// and a boolean to check if the value has been set.
func (o *StoragePhase) GetFeesCollectedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeesCollected, true
}

// SetFeesCollected sets field value
func (o *StoragePhase) SetFeesCollected(v int64) {
	o.FeesCollected = v
}

// GetFeesDue returns the FeesDue field value if set, zero value otherwise.
func (o *StoragePhase) GetFeesDue() int64 {
	if o == nil || IsNil(o.FeesDue) {
		var ret int64
		return ret
	}
	return *o.FeesDue
}

// GetFeesDueOk returns a tuple with the FeesDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePhase) GetFeesDueOk() (*int64, bool) {
	if o == nil || IsNil(o.FeesDue) {
		return nil, false
	}
	return o.FeesDue, true
}

// HasFeesDue returns a boolean if a field has been set.
func (o *StoragePhase) HasFeesDue() bool {
	if o != nil && !IsNil(o.FeesDue) {
		return true
	}

	return false
}

// SetFeesDue gets a reference to the given int64 and assigns it to the FeesDue field.
func (o *StoragePhase) SetFeesDue(v int64) {
	o.FeesDue = &v
}

// GetStatusChange returns the StatusChange field value
func (o *StoragePhase) GetStatusChange() AccStatusChange {
	if o == nil {
		var ret AccStatusChange
		return ret
	}

	return o.StatusChange
}

// GetStatusChangeOk returns a tuple with the StatusChange field value
// and a boolean to check if the value has been set.
func (o *StoragePhase) GetStatusChangeOk() (*AccStatusChange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusChange, true
}

// SetStatusChange sets field value
func (o *StoragePhase) SetStatusChange(v AccStatusChange) {
	o.StatusChange = v
}

func (o StoragePhase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePhase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fees_collected"] = o.FeesCollected
	if !IsNil(o.FeesDue) {
		toSerialize["fees_due"] = o.FeesDue
	}
	toSerialize["status_change"] = o.StatusChange
	return toSerialize, nil
}

func (o *StoragePhase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fees_collected",
		"status_change",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoragePhase := _StoragePhase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoragePhase)

	if err != nil {
		return err
	}

	*o = StoragePhase(varStoragePhase)

	return err
}

type NullableStoragePhase struct {
	value *StoragePhase
	isSet bool
}

func (v NullableStoragePhase) Get() *StoragePhase {
	return v.value
}

func (v *NullableStoragePhase) Set(val *StoragePhase) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePhase) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePhase(val *StoragePhase) *NullableStoragePhase {
	return &NullableStoragePhase{value: val, isSet: true}
}

func (v NullableStoragePhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


