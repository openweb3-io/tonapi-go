/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"fmt"
)

// AccountStatus the model 'AccountStatus'
type AccountStatus string

// List of AccountStatus
const (
	ACCOUNTSTATUS_NONEXIST AccountStatus = "nonexist"
	ACCOUNTSTATUS_UNINIT AccountStatus = "uninit"
	ACCOUNTSTATUS_ACTIVE AccountStatus = "active"
	ACCOUNTSTATUS_FROZEN AccountStatus = "frozen"
)

// All allowed values of AccountStatus enum
var AllowedAccountStatusEnumValues = []AccountStatus{
	"nonexist",
	"uninit",
	"active",
	"frozen",
}

func (v *AccountStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountStatus(value)
	for _, existing := range AllowedAccountStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountStatus", value)
}

// NewAccountStatusFromValue returns a pointer to a valid AccountStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountStatusFromValue(v string) (*AccountStatus, error) {
	ev := AccountStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountStatus: valid values are %v", v, AllowedAccountStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountStatus) IsValid() bool {
	for _, existing := range AllowedAccountStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountStatus value
func (v AccountStatus) Ptr() *AccountStatus {
	return &v
}

type NullableAccountStatus struct {
	value *AccountStatus
	isSet bool
}

func (v NullableAccountStatus) Get() *AccountStatus {
	return v.value
}

func (v *NullableAccountStatus) Set(val *AccountStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountStatus(val *AccountStatus) *NullableAccountStatus {
	return &NullableAccountStatus{value: val, isSet: true}
}

func (v NullableAccountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

