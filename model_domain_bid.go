/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DomainBid type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainBid{}

// DomainBid struct for DomainBid
type DomainBid struct {
	Success bool `json:"success"`
	Value int64 `json:"value"`
	TxTime int64 `json:"txTime"`
	TxHash string `json:"txHash"`
	Bidder AccountAddress `json:"bidder"`
}

type _DomainBid DomainBid

// NewDomainBid instantiates a new DomainBid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainBid(success bool, value int64, txTime int64, txHash string, bidder AccountAddress) *DomainBid {
	this := DomainBid{}
	this.Success = success
	this.Value = value
	this.TxTime = txTime
	this.TxHash = txHash
	this.Bidder = bidder
	return &this
}

// NewDomainBidWithDefaults instantiates a new DomainBid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainBidWithDefaults() *DomainBid {
	this := DomainBid{}
	var success bool = false
	this.Success = success
	return &this
}

// GetSuccess returns the Success field value
func (o *DomainBid) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *DomainBid) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *DomainBid) SetSuccess(v bool) {
	o.Success = v
}

// GetValue returns the Value field value
func (o *DomainBid) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DomainBid) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DomainBid) SetValue(v int64) {
	o.Value = v
}

// GetTxTime returns the TxTime field value
func (o *DomainBid) GetTxTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TxTime
}

// GetTxTimeOk returns a tuple with the TxTime field value
// and a boolean to check if the value has been set.
func (o *DomainBid) GetTxTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxTime, true
}

// SetTxTime sets field value
func (o *DomainBid) SetTxTime(v int64) {
	o.TxTime = v
}

// GetTxHash returns the TxHash field value
func (o *DomainBid) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *DomainBid) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *DomainBid) SetTxHash(v string) {
	o.TxHash = v
}

// GetBidder returns the Bidder field value
func (o *DomainBid) GetBidder() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Bidder
}

// GetBidderOk returns a tuple with the Bidder field value
// and a boolean to check if the value has been set.
func (o *DomainBid) GetBidderOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bidder, true
}

// SetBidder sets field value
func (o *DomainBid) SetBidder(v AccountAddress) {
	o.Bidder = v
}

func (o DomainBid) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainBid) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["value"] = o.Value
	toSerialize["txTime"] = o.TxTime
	toSerialize["txHash"] = o.TxHash
	toSerialize["bidder"] = o.Bidder
	return toSerialize, nil
}

func (o *DomainBid) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"value",
		"txTime",
		"txHash",
		"bidder",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDomainBid := _DomainBid{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDomainBid)

	if err != nil {
		return err
	}

	*o = DomainBid(varDomainBid)

	return err
}

type NullableDomainBid struct {
	value *DomainBid
	isSet bool
}

func (v NullableDomainBid) Get() *DomainBid {
	return v.value
}

func (v *NullableDomainBid) Set(val *DomainBid) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainBid) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainBid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainBid(val *DomainBid) *NullableDomainBid {
	return &NullableDomainBid{value: val, isSet: true}
}

func (v NullableDomainBid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainBid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


