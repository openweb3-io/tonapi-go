/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig31 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig31{}

// BlockchainConfig31 The configuration for the consensus protocol above catchain.
type BlockchainConfig31 struct {
	FundamentalSmcAddr []string `json:"fundamental_smc_addr"`
}

type _BlockchainConfig31 BlockchainConfig31

// NewBlockchainConfig31 instantiates a new BlockchainConfig31 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig31(fundamentalSmcAddr []string) *BlockchainConfig31 {
	this := BlockchainConfig31{}
	this.FundamentalSmcAddr = fundamentalSmcAddr
	return &this
}

// NewBlockchainConfig31WithDefaults instantiates a new BlockchainConfig31 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig31WithDefaults() *BlockchainConfig31 {
	this := BlockchainConfig31{}
	return &this
}

// GetFundamentalSmcAddr returns the FundamentalSmcAddr field value
func (o *BlockchainConfig31) GetFundamentalSmcAddr() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FundamentalSmcAddr
}

// GetFundamentalSmcAddrOk returns a tuple with the FundamentalSmcAddr field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig31) GetFundamentalSmcAddrOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FundamentalSmcAddr, true
}

// SetFundamentalSmcAddr sets field value
func (o *BlockchainConfig31) SetFundamentalSmcAddr(v []string) {
	o.FundamentalSmcAddr = v
}

func (o BlockchainConfig31) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig31) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fundamental_smc_addr"] = o.FundamentalSmcAddr
	return toSerialize, nil
}

func (o *BlockchainConfig31) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fundamental_smc_addr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig31 := _BlockchainConfig31{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig31)

	if err != nil {
		return err
	}

	*o = BlockchainConfig31(varBlockchainConfig31)

	return err
}

type NullableBlockchainConfig31 struct {
	value *BlockchainConfig31
	isSet bool
}

func (v NullableBlockchainConfig31) Get() *BlockchainConfig31 {
	return v.value
}

func (v *NullableBlockchainConfig31) Set(val *BlockchainConfig31) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig31) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig31) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig31(val *BlockchainConfig31) *NullableBlockchainConfig31 {
	return &NullableBlockchainConfig31{value: val, isSet: true}
}

func (v NullableBlockchainConfig31) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig31) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


