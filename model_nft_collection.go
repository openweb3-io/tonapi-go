/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NftCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NftCollection{}

// NftCollection struct for NftCollection
type NftCollection struct {
	Address string `json:"address"`
	NextItemIndex int64 `json:"next_item_index"`
	Owner *AccountAddress `json:"owner,omitempty"`
	RawCollectionContent string `json:"raw_collection_content"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Previews []ImagePreview `json:"previews,omitempty"`
	ApprovedBy []string `json:"approved_by"`
}

type _NftCollection NftCollection

// NewNftCollection instantiates a new NftCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftCollection(address string, nextItemIndex int64, rawCollectionContent string, approvedBy []string) *NftCollection {
	this := NftCollection{}
	this.Address = address
	this.NextItemIndex = nextItemIndex
	this.RawCollectionContent = rawCollectionContent
	this.ApprovedBy = approvedBy
	return &this
}

// NewNftCollectionWithDefaults instantiates a new NftCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftCollectionWithDefaults() *NftCollection {
	this := NftCollection{}
	return &this
}

// GetAddress returns the Address field value
func (o *NftCollection) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *NftCollection) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *NftCollection) SetAddress(v string) {
	o.Address = v
}

// GetNextItemIndex returns the NextItemIndex field value
func (o *NftCollection) GetNextItemIndex() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NextItemIndex
}

// GetNextItemIndexOk returns a tuple with the NextItemIndex field value
// and a boolean to check if the value has been set.
func (o *NftCollection) GetNextItemIndexOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextItemIndex, true
}

// SetNextItemIndex sets field value
func (o *NftCollection) SetNextItemIndex(v int64) {
	o.NextItemIndex = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *NftCollection) GetOwner() AccountAddress {
	if o == nil || IsNil(o.Owner) {
		var ret AccountAddress
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftCollection) GetOwnerOk() (*AccountAddress, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *NftCollection) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given AccountAddress and assigns it to the Owner field.
func (o *NftCollection) SetOwner(v AccountAddress) {
	o.Owner = &v
}

// GetRawCollectionContent returns the RawCollectionContent field value
func (o *NftCollection) GetRawCollectionContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawCollectionContent
}

// GetRawCollectionContentOk returns a tuple with the RawCollectionContent field value
// and a boolean to check if the value has been set.
func (o *NftCollection) GetRawCollectionContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawCollectionContent, true
}

// SetRawCollectionContent sets field value
func (o *NftCollection) SetRawCollectionContent(v string) {
	o.RawCollectionContent = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *NftCollection) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftCollection) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *NftCollection) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *NftCollection) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetPreviews returns the Previews field value if set, zero value otherwise.
func (o *NftCollection) GetPreviews() []ImagePreview {
	if o == nil || IsNil(o.Previews) {
		var ret []ImagePreview
		return ret
	}
	return o.Previews
}

// GetPreviewsOk returns a tuple with the Previews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftCollection) GetPreviewsOk() ([]ImagePreview, bool) {
	if o == nil || IsNil(o.Previews) {
		return nil, false
	}
	return o.Previews, true
}

// HasPreviews returns a boolean if a field has been set.
func (o *NftCollection) HasPreviews() bool {
	if o != nil && !IsNil(o.Previews) {
		return true
	}

	return false
}

// SetPreviews gets a reference to the given []ImagePreview and assigns it to the Previews field.
func (o *NftCollection) SetPreviews(v []ImagePreview) {
	o.Previews = v
}

// GetApprovedBy returns the ApprovedBy field value
func (o *NftCollection) GetApprovedBy() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ApprovedBy
}

// GetApprovedByOk returns a tuple with the ApprovedBy field value
// and a boolean to check if the value has been set.
func (o *NftCollection) GetApprovedByOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApprovedBy, true
}

// SetApprovedBy sets field value
func (o *NftCollection) SetApprovedBy(v []string) {
	o.ApprovedBy = v
}

func (o NftCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NftCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["next_item_index"] = o.NextItemIndex
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	toSerialize["raw_collection_content"] = o.RawCollectionContent
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Previews) {
		toSerialize["previews"] = o.Previews
	}
	toSerialize["approved_by"] = o.ApprovedBy
	return toSerialize, nil
}

func (o *NftCollection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"next_item_index",
		"raw_collection_content",
		"approved_by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNftCollection := _NftCollection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNftCollection)

	if err != nil {
		return err
	}

	*o = NftCollection(varNftCollection)

	return err
}

type NullableNftCollection struct {
	value *NftCollection
	isSet bool
}

func (v NullableNftCollection) Get() *NftCollection {
	return v.value
}

func (v *NullableNftCollection) Set(val *NftCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableNftCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableNftCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftCollection(val *NftCollection) *NullableNftCollection {
	return &NullableNftCollection{value: val, isSet: true}
}

func (v NullableNftCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


