/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig8 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig8{}

// BlockchainConfig8 The network version and additional capabilities supported by the validators.
type BlockchainConfig8 struct {
	Version int64 `json:"version"`
	Capabilities int64 `json:"capabilities"`
}

type _BlockchainConfig8 BlockchainConfig8

// NewBlockchainConfig8 instantiates a new BlockchainConfig8 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig8(version int64, capabilities int64) *BlockchainConfig8 {
	this := BlockchainConfig8{}
	this.Version = version
	this.Capabilities = capabilities
	return &this
}

// NewBlockchainConfig8WithDefaults instantiates a new BlockchainConfig8 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig8WithDefaults() *BlockchainConfig8 {
	this := BlockchainConfig8{}
	return &this
}

// GetVersion returns the Version field value
func (o *BlockchainConfig8) GetVersion() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig8) GetVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *BlockchainConfig8) SetVersion(v int64) {
	o.Version = v
}

// GetCapabilities returns the Capabilities field value
func (o *BlockchainConfig8) GetCapabilities() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig8) GetCapabilitiesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capabilities, true
}

// SetCapabilities sets field value
func (o *BlockchainConfig8) SetCapabilities(v int64) {
	o.Capabilities = v
}

func (o BlockchainConfig8) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig8) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["capabilities"] = o.Capabilities
	return toSerialize, nil
}

func (o *BlockchainConfig8) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"capabilities",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig8 := _BlockchainConfig8{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig8)

	if err != nil {
		return err
	}

	*o = BlockchainConfig8(varBlockchainConfig8)

	return err
}

type NullableBlockchainConfig8 struct {
	value *BlockchainConfig8
	isSet bool
}

func (v NullableBlockchainConfig8) Get() *BlockchainConfig8 {
	return v.value
}

func (v *NullableBlockchainConfig8) Set(val *BlockchainConfig8) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig8) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig8) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig8(val *BlockchainConfig8) *NullableBlockchainConfig8 {
	return &NullableBlockchainConfig8{value: val, isSet: true}
}

func (v NullableBlockchainConfig8) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig8) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


