/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ElectionsDepositStakeAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ElectionsDepositStakeAction{}

// ElectionsDepositStakeAction struct for ElectionsDepositStakeAction
type ElectionsDepositStakeAction struct {
	Amount int64 `json:"amount"`
	Staker AccountAddress `json:"staker"`
}

type _ElectionsDepositStakeAction ElectionsDepositStakeAction

// NewElectionsDepositStakeAction instantiates a new ElectionsDepositStakeAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElectionsDepositStakeAction(amount int64, staker AccountAddress) *ElectionsDepositStakeAction {
	this := ElectionsDepositStakeAction{}
	this.Amount = amount
	this.Staker = staker
	return &this
}

// NewElectionsDepositStakeActionWithDefaults instantiates a new ElectionsDepositStakeAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElectionsDepositStakeActionWithDefaults() *ElectionsDepositStakeAction {
	this := ElectionsDepositStakeAction{}
	return &this
}

// GetAmount returns the Amount field value
func (o *ElectionsDepositStakeAction) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ElectionsDepositStakeAction) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ElectionsDepositStakeAction) SetAmount(v int64) {
	o.Amount = v
}

// GetStaker returns the Staker field value
func (o *ElectionsDepositStakeAction) GetStaker() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Staker
}

// GetStakerOk returns a tuple with the Staker field value
// and a boolean to check if the value has been set.
func (o *ElectionsDepositStakeAction) GetStakerOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Staker, true
}

// SetStaker sets field value
func (o *ElectionsDepositStakeAction) SetStaker(v AccountAddress) {
	o.Staker = v
}

func (o ElectionsDepositStakeAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ElectionsDepositStakeAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["staker"] = o.Staker
	return toSerialize, nil
}

func (o *ElectionsDepositStakeAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"staker",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varElectionsDepositStakeAction := _ElectionsDepositStakeAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varElectionsDepositStakeAction)

	if err != nil {
		return err
	}

	*o = ElectionsDepositStakeAction(varElectionsDepositStakeAction)

	return err
}

type NullableElectionsDepositStakeAction struct {
	value *ElectionsDepositStakeAction
	isSet bool
}

func (v NullableElectionsDepositStakeAction) Get() *ElectionsDepositStakeAction {
	return v.value
}

func (v *NullableElectionsDepositStakeAction) Set(val *ElectionsDepositStakeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableElectionsDepositStakeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableElectionsDepositStakeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElectionsDepositStakeAction(val *ElectionsDepositStakeAction) *NullableElectionsDepositStakeAction {
	return &NullableElectionsDepositStakeAction{value: val, isSet: true}
}

func (v NullableElectionsDepositStakeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElectionsDepositStakeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


