/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DecodedRawMessageMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecodedRawMessageMessage{}

// DecodedRawMessageMessage struct for DecodedRawMessageMessage
type DecodedRawMessageMessage struct {
	Boc string `json:"boc"`
	DecodedOpName *string `json:"decoded_op_name,omitempty"`
	OpCode *string `json:"op_code,omitempty"`
	DecodedBody interface{} `json:"decoded_body,omitempty"`
}

type _DecodedRawMessageMessage DecodedRawMessageMessage

// NewDecodedRawMessageMessage instantiates a new DecodedRawMessageMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecodedRawMessageMessage(boc string) *DecodedRawMessageMessage {
	this := DecodedRawMessageMessage{}
	this.Boc = boc
	return &this
}

// NewDecodedRawMessageMessageWithDefaults instantiates a new DecodedRawMessageMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecodedRawMessageMessageWithDefaults() *DecodedRawMessageMessage {
	this := DecodedRawMessageMessage{}
	return &this
}

// GetBoc returns the Boc field value
func (o *DecodedRawMessageMessage) GetBoc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Boc
}

// GetBocOk returns a tuple with the Boc field value
// and a boolean to check if the value has been set.
func (o *DecodedRawMessageMessage) GetBocOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Boc, true
}

// SetBoc sets field value
func (o *DecodedRawMessageMessage) SetBoc(v string) {
	o.Boc = v
}

// GetDecodedOpName returns the DecodedOpName field value if set, zero value otherwise.
func (o *DecodedRawMessageMessage) GetDecodedOpName() string {
	if o == nil || IsNil(o.DecodedOpName) {
		var ret string
		return ret
	}
	return *o.DecodedOpName
}

// GetDecodedOpNameOk returns a tuple with the DecodedOpName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecodedRawMessageMessage) GetDecodedOpNameOk() (*string, bool) {
	if o == nil || IsNil(o.DecodedOpName) {
		return nil, false
	}
	return o.DecodedOpName, true
}

// HasDecodedOpName returns a boolean if a field has been set.
func (o *DecodedRawMessageMessage) HasDecodedOpName() bool {
	if o != nil && !IsNil(o.DecodedOpName) {
		return true
	}

	return false
}

// SetDecodedOpName gets a reference to the given string and assigns it to the DecodedOpName field.
func (o *DecodedRawMessageMessage) SetDecodedOpName(v string) {
	o.DecodedOpName = &v
}

// GetOpCode returns the OpCode field value if set, zero value otherwise.
func (o *DecodedRawMessageMessage) GetOpCode() string {
	if o == nil || IsNil(o.OpCode) {
		var ret string
		return ret
	}
	return *o.OpCode
}

// GetOpCodeOk returns a tuple with the OpCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecodedRawMessageMessage) GetOpCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OpCode) {
		return nil, false
	}
	return o.OpCode, true
}

// HasOpCode returns a boolean if a field has been set.
func (o *DecodedRawMessageMessage) HasOpCode() bool {
	if o != nil && !IsNil(o.OpCode) {
		return true
	}

	return false
}

// SetOpCode gets a reference to the given string and assigns it to the OpCode field.
func (o *DecodedRawMessageMessage) SetOpCode(v string) {
	o.OpCode = &v
}

// GetDecodedBody returns the DecodedBody field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecodedRawMessageMessage) GetDecodedBody() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DecodedBody
}

// GetDecodedBodyOk returns a tuple with the DecodedBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecodedRawMessageMessage) GetDecodedBodyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DecodedBody) {
		return nil, false
	}
	return &o.DecodedBody, true
}

// HasDecodedBody returns a boolean if a field has been set.
func (o *DecodedRawMessageMessage) HasDecodedBody() bool {
	if o != nil && !IsNil(o.DecodedBody) {
		return true
	}

	return false
}

// SetDecodedBody gets a reference to the given interface{} and assigns it to the DecodedBody field.
func (o *DecodedRawMessageMessage) SetDecodedBody(v interface{}) {
	o.DecodedBody = v
}

func (o DecodedRawMessageMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecodedRawMessageMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["boc"] = o.Boc
	if !IsNil(o.DecodedOpName) {
		toSerialize["decoded_op_name"] = o.DecodedOpName
	}
	if !IsNil(o.OpCode) {
		toSerialize["op_code"] = o.OpCode
	}
	if o.DecodedBody != nil {
		toSerialize["decoded_body"] = o.DecodedBody
	}
	return toSerialize, nil
}

func (o *DecodedRawMessageMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"boc",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDecodedRawMessageMessage := _DecodedRawMessageMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDecodedRawMessageMessage)

	if err != nil {
		return err
	}

	*o = DecodedRawMessageMessage(varDecodedRawMessageMessage)

	return err
}

type NullableDecodedRawMessageMessage struct {
	value *DecodedRawMessageMessage
	isSet bool
}

func (v NullableDecodedRawMessageMessage) Get() *DecodedRawMessageMessage {
	return v.value
}

func (v *NullableDecodedRawMessageMessage) Set(val *DecodedRawMessageMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableDecodedRawMessageMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableDecodedRawMessageMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecodedRawMessageMessage(val *DecodedRawMessageMessage) *NullableDecodedRawMessageMessage {
	return &NullableDecodedRawMessageMessage{value: val, isSet: true}
}

func (v NullableDecodedRawMessageMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecodedRawMessageMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


