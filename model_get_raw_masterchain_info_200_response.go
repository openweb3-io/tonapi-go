/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRawMasterchainInfo200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRawMasterchainInfo200Response{}

// GetRawMasterchainInfo200Response struct for GetRawMasterchainInfo200Response
type GetRawMasterchainInfo200Response struct {
	Last BlockRaw `json:"last"`
	StateRootHash string `json:"state_root_hash"`
	Init InitStateRaw `json:"init"`
}

type _GetRawMasterchainInfo200Response GetRawMasterchainInfo200Response

// NewGetRawMasterchainInfo200Response instantiates a new GetRawMasterchainInfo200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRawMasterchainInfo200Response(last BlockRaw, stateRootHash string, init InitStateRaw) *GetRawMasterchainInfo200Response {
	this := GetRawMasterchainInfo200Response{}
	this.Last = last
	this.StateRootHash = stateRootHash
	this.Init = init
	return &this
}

// NewGetRawMasterchainInfo200ResponseWithDefaults instantiates a new GetRawMasterchainInfo200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRawMasterchainInfo200ResponseWithDefaults() *GetRawMasterchainInfo200Response {
	this := GetRawMasterchainInfo200Response{}
	return &this
}

// GetLast returns the Last field value
func (o *GetRawMasterchainInfo200Response) GetLast() BlockRaw {
	if o == nil {
		var ret BlockRaw
		return ret
	}

	return o.Last
}

// GetLastOk returns a tuple with the Last field value
// and a boolean to check if the value has been set.
func (o *GetRawMasterchainInfo200Response) GetLastOk() (*BlockRaw, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Last, true
}

// SetLast sets field value
func (o *GetRawMasterchainInfo200Response) SetLast(v BlockRaw) {
	o.Last = v
}

// GetStateRootHash returns the StateRootHash field value
func (o *GetRawMasterchainInfo200Response) GetStateRootHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateRootHash
}

// GetStateRootHashOk returns a tuple with the StateRootHash field value
// and a boolean to check if the value has been set.
func (o *GetRawMasterchainInfo200Response) GetStateRootHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateRootHash, true
}

// SetStateRootHash sets field value
func (o *GetRawMasterchainInfo200Response) SetStateRootHash(v string) {
	o.StateRootHash = v
}

// GetInit returns the Init field value
func (o *GetRawMasterchainInfo200Response) GetInit() InitStateRaw {
	if o == nil {
		var ret InitStateRaw
		return ret
	}

	return o.Init
}

// GetInitOk returns a tuple with the Init field value
// and a boolean to check if the value has been set.
func (o *GetRawMasterchainInfo200Response) GetInitOk() (*InitStateRaw, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Init, true
}

// SetInit sets field value
func (o *GetRawMasterchainInfo200Response) SetInit(v InitStateRaw) {
	o.Init = v
}

func (o GetRawMasterchainInfo200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRawMasterchainInfo200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["last"] = o.Last
	toSerialize["state_root_hash"] = o.StateRootHash
	toSerialize["init"] = o.Init
	return toSerialize, nil
}

func (o *GetRawMasterchainInfo200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"last",
		"state_root_hash",
		"init",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRawMasterchainInfo200Response := _GetRawMasterchainInfo200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRawMasterchainInfo200Response)

	if err != nil {
		return err
	}

	*o = GetRawMasterchainInfo200Response(varGetRawMasterchainInfo200Response)

	return err
}

type NullableGetRawMasterchainInfo200Response struct {
	value *GetRawMasterchainInfo200Response
	isSet bool
}

func (v NullableGetRawMasterchainInfo200Response) Get() *GetRawMasterchainInfo200Response {
	return v.value
}

func (v *NullableGetRawMasterchainInfo200Response) Set(val *GetRawMasterchainInfo200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRawMasterchainInfo200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRawMasterchainInfo200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRawMasterchainInfo200Response(val *GetRawMasterchainInfo200Response) *NullableGetRawMasterchainInfo200Response {
	return &NullableGetRawMasterchainInfo200Response{value: val, isSet: true}
}

func (v NullableGetRawMasterchainInfo200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRawMasterchainInfo200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


