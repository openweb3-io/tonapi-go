/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MethodExecutionResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MethodExecutionResult{}

// MethodExecutionResult struct for MethodExecutionResult
type MethodExecutionResult struct {
	Success bool `json:"success"`
	// tvm exit code
	ExitCode int32 `json:"exit_code"`
	Stack []TvmStackRecord `json:"stack"`
	Decoded interface{} `json:"decoded,omitempty"`
}

type _MethodExecutionResult MethodExecutionResult

// NewMethodExecutionResult instantiates a new MethodExecutionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMethodExecutionResult(success bool, exitCode int32, stack []TvmStackRecord) *MethodExecutionResult {
	this := MethodExecutionResult{}
	this.Success = success
	this.ExitCode = exitCode
	this.Stack = stack
	return &this
}

// NewMethodExecutionResultWithDefaults instantiates a new MethodExecutionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMethodExecutionResultWithDefaults() *MethodExecutionResult {
	this := MethodExecutionResult{}
	return &this
}

// GetSuccess returns the Success field value
func (o *MethodExecutionResult) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *MethodExecutionResult) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *MethodExecutionResult) SetSuccess(v bool) {
	o.Success = v
}

// GetExitCode returns the ExitCode field value
func (o *MethodExecutionResult) GetExitCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExitCode
}

// GetExitCodeOk returns a tuple with the ExitCode field value
// and a boolean to check if the value has been set.
func (o *MethodExecutionResult) GetExitCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExitCode, true
}

// SetExitCode sets field value
func (o *MethodExecutionResult) SetExitCode(v int32) {
	o.ExitCode = v
}

// GetStack returns the Stack field value
func (o *MethodExecutionResult) GetStack() []TvmStackRecord {
	if o == nil {
		var ret []TvmStackRecord
		return ret
	}

	return o.Stack
}

// GetStackOk returns a tuple with the Stack field value
// and a boolean to check if the value has been set.
func (o *MethodExecutionResult) GetStackOk() ([]TvmStackRecord, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stack, true
}

// SetStack sets field value
func (o *MethodExecutionResult) SetStack(v []TvmStackRecord) {
	o.Stack = v
}

// GetDecoded returns the Decoded field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MethodExecutionResult) GetDecoded() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Decoded
}

// GetDecodedOk returns a tuple with the Decoded field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MethodExecutionResult) GetDecodedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Decoded) {
		return nil, false
	}
	return &o.Decoded, true
}

// HasDecoded returns a boolean if a field has been set.
func (o *MethodExecutionResult) HasDecoded() bool {
	if o != nil && !IsNil(o.Decoded) {
		return true
	}

	return false
}

// SetDecoded gets a reference to the given interface{} and assigns it to the Decoded field.
func (o *MethodExecutionResult) SetDecoded(v interface{}) {
	o.Decoded = v
}

func (o MethodExecutionResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MethodExecutionResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["exit_code"] = o.ExitCode
	toSerialize["stack"] = o.Stack
	if o.Decoded != nil {
		toSerialize["decoded"] = o.Decoded
	}
	return toSerialize, nil
}

func (o *MethodExecutionResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"exit_code",
		"stack",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMethodExecutionResult := _MethodExecutionResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMethodExecutionResult)

	if err != nil {
		return err
	}

	*o = MethodExecutionResult(varMethodExecutionResult)

	return err
}

type NullableMethodExecutionResult struct {
	value *MethodExecutionResult
	isSet bool
}

func (v NullableMethodExecutionResult) Get() *MethodExecutionResult {
	return v.value
}

func (v *NullableMethodExecutionResult) Set(val *MethodExecutionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMethodExecutionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMethodExecutionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMethodExecutionResult(val *MethodExecutionResult) *NullableMethodExecutionResult {
	return &NullableMethodExecutionResult{value: val, isSet: true}
}

func (v NullableMethodExecutionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMethodExecutionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


