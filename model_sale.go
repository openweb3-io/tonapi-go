/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Sale type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sale{}

// Sale struct for Sale
type Sale struct {
	Address string `json:"address"`
	Market AccountAddress `json:"market"`
	Owner *AccountAddress `json:"owner,omitempty"`
	Price Price `json:"price"`
}

type _Sale Sale

// NewSale instantiates a new Sale object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSale(address string, market AccountAddress, price Price) *Sale {
	this := Sale{}
	this.Address = address
	this.Market = market
	this.Price = price
	return &this
}

// NewSaleWithDefaults instantiates a new Sale object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaleWithDefaults() *Sale {
	this := Sale{}
	return &this
}

// GetAddress returns the Address field value
func (o *Sale) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Sale) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Sale) SetAddress(v string) {
	o.Address = v
}

// GetMarket returns the Market field value
func (o *Sale) GetMarket() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Market
}

// GetMarketOk returns a tuple with the Market field value
// and a boolean to check if the value has been set.
func (o *Sale) GetMarketOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Market, true
}

// SetMarket sets field value
func (o *Sale) SetMarket(v AccountAddress) {
	o.Market = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Sale) GetOwner() AccountAddress {
	if o == nil || IsNil(o.Owner) {
		var ret AccountAddress
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sale) GetOwnerOk() (*AccountAddress, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Sale) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given AccountAddress and assigns it to the Owner field.
func (o *Sale) SetOwner(v AccountAddress) {
	o.Owner = &v
}

// GetPrice returns the Price field value
func (o *Sale) GetPrice() Price {
	if o == nil {
		var ret Price
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Sale) GetPriceOk() (*Price, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Sale) SetPrice(v Price) {
	o.Price = v
}

func (o Sale) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sale) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["market"] = o.Market
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	toSerialize["price"] = o.Price
	return toSerialize, nil
}

func (o *Sale) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"market",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSale := _Sale{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSale)

	if err != nil {
		return err
	}

	*o = Sale(varSale)

	return err
}

type NullableSale struct {
	value *Sale
	isSet bool
}

func (v NullableSale) Get() *Sale {
	return v.value
}

func (v *NullableSale) Set(val *Sale) {
	v.value = val
	v.isSet = true
}

func (v NullableSale) IsSet() bool {
	return v.isSet
}

func (v *NullableSale) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSale(val *Sale) *NullableSale {
	return &NullableSale{value: val, isSet: true}
}

func (v NullableSale) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSale) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


