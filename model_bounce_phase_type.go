/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"fmt"
)

// BouncePhaseType the model 'BouncePhaseType'
type BouncePhaseType string

// List of BouncePhaseType
const (
	BOUNCEPHASETYPE_TR_PHASE_BOUNCE_NEGFUNDS BouncePhaseType = "TrPhaseBounceNegfunds"
	BOUNCEPHASETYPE_TR_PHASE_BOUNCE_NOFUNDS BouncePhaseType = "TrPhaseBounceNofunds"
	BOUNCEPHASETYPE_TR_PHASE_BOUNCE_OK BouncePhaseType = "TrPhaseBounceOk"
)

// All allowed values of BouncePhaseType enum
var AllowedBouncePhaseTypeEnumValues = []BouncePhaseType{
	"TrPhaseBounceNegfunds",
	"TrPhaseBounceNofunds",
	"TrPhaseBounceOk",
}

func (v *BouncePhaseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BouncePhaseType(value)
	for _, existing := range AllowedBouncePhaseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BouncePhaseType", value)
}

// NewBouncePhaseTypeFromValue returns a pointer to a valid BouncePhaseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBouncePhaseTypeFromValue(v string) (*BouncePhaseType, error) {
	ev := BouncePhaseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BouncePhaseType: valid values are %v", v, AllowedBouncePhaseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BouncePhaseType) IsValid() bool {
	for _, existing := range AllowedBouncePhaseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BouncePhaseType value
func (v BouncePhaseType) Ptr() *BouncePhaseType {
	return &v
}

type NullableBouncePhaseType struct {
	value *BouncePhaseType
	isSet bool
}

func (v NullableBouncePhaseType) Get() *BouncePhaseType {
	return v.value
}

func (v *NullableBouncePhaseType) Set(val *BouncePhaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableBouncePhaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableBouncePhaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBouncePhaseType(val *BouncePhaseType) *NullableBouncePhaseType {
	return &NullableBouncePhaseType{value: val, isSet: true}
}

func (v NullableBouncePhaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBouncePhaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

