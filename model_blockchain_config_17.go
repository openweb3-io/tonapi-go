/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig17 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig17{}

// BlockchainConfig17 The stake parameters configuration in the TON blockchain.
type BlockchainConfig17 struct {
	MinStake string `json:"min_stake"`
	MaxStake string `json:"max_stake"`
	MinTotalStake string `json:"min_total_stake"`
	MaxStakeFactor int64 `json:"max_stake_factor"`
}

type _BlockchainConfig17 BlockchainConfig17

// NewBlockchainConfig17 instantiates a new BlockchainConfig17 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig17(minStake string, maxStake string, minTotalStake string, maxStakeFactor int64) *BlockchainConfig17 {
	this := BlockchainConfig17{}
	this.MinStake = minStake
	this.MaxStake = maxStake
	this.MinTotalStake = minTotalStake
	this.MaxStakeFactor = maxStakeFactor
	return &this
}

// NewBlockchainConfig17WithDefaults instantiates a new BlockchainConfig17 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig17WithDefaults() *BlockchainConfig17 {
	this := BlockchainConfig17{}
	return &this
}

// GetMinStake returns the MinStake field value
func (o *BlockchainConfig17) GetMinStake() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinStake
}

// GetMinStakeOk returns a tuple with the MinStake field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig17) GetMinStakeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinStake, true
}

// SetMinStake sets field value
func (o *BlockchainConfig17) SetMinStake(v string) {
	o.MinStake = v
}

// GetMaxStake returns the MaxStake field value
func (o *BlockchainConfig17) GetMaxStake() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxStake
}

// GetMaxStakeOk returns a tuple with the MaxStake field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig17) GetMaxStakeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxStake, true
}

// SetMaxStake sets field value
func (o *BlockchainConfig17) SetMaxStake(v string) {
	o.MaxStake = v
}

// GetMinTotalStake returns the MinTotalStake field value
func (o *BlockchainConfig17) GetMinTotalStake() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinTotalStake
}

// GetMinTotalStakeOk returns a tuple with the MinTotalStake field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig17) GetMinTotalStakeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinTotalStake, true
}

// SetMinTotalStake sets field value
func (o *BlockchainConfig17) SetMinTotalStake(v string) {
	o.MinTotalStake = v
}

// GetMaxStakeFactor returns the MaxStakeFactor field value
func (o *BlockchainConfig17) GetMaxStakeFactor() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxStakeFactor
}

// GetMaxStakeFactorOk returns a tuple with the MaxStakeFactor field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig17) GetMaxStakeFactorOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxStakeFactor, true
}

// SetMaxStakeFactor sets field value
func (o *BlockchainConfig17) SetMaxStakeFactor(v int64) {
	o.MaxStakeFactor = v
}

func (o BlockchainConfig17) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig17) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["min_stake"] = o.MinStake
	toSerialize["max_stake"] = o.MaxStake
	toSerialize["min_total_stake"] = o.MinTotalStake
	toSerialize["max_stake_factor"] = o.MaxStakeFactor
	return toSerialize, nil
}

func (o *BlockchainConfig17) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"min_stake",
		"max_stake",
		"min_total_stake",
		"max_stake_factor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig17 := _BlockchainConfig17{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig17)

	if err != nil {
		return err
	}

	*o = BlockchainConfig17(varBlockchainConfig17)

	return err
}

type NullableBlockchainConfig17 struct {
	value *BlockchainConfig17
	isSet bool
}

func (v NullableBlockchainConfig17) Get() *BlockchainConfig17 {
	return v.value
}

func (v *NullableBlockchainConfig17) Set(val *BlockchainConfig17) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig17) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig17) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig17(val *BlockchainConfig17) *NullableBlockchainConfig17 {
	return &NullableBlockchainConfig17{value: val, isSet: true}
}

func (v NullableBlockchainConfig17) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig17) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


