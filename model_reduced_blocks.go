/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReducedBlocks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReducedBlocks{}

// ReducedBlocks struct for ReducedBlocks
type ReducedBlocks struct {
	Blocks []ReducedBlock `json:"blocks"`
}

type _ReducedBlocks ReducedBlocks

// NewReducedBlocks instantiates a new ReducedBlocks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReducedBlocks(blocks []ReducedBlock) *ReducedBlocks {
	this := ReducedBlocks{}
	this.Blocks = blocks
	return &this
}

// NewReducedBlocksWithDefaults instantiates a new ReducedBlocks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReducedBlocksWithDefaults() *ReducedBlocks {
	this := ReducedBlocks{}
	return &this
}

// GetBlocks returns the Blocks field value
func (o *ReducedBlocks) GetBlocks() []ReducedBlock {
	if o == nil {
		var ret []ReducedBlock
		return ret
	}

	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value
// and a boolean to check if the value has been set.
func (o *ReducedBlocks) GetBlocksOk() ([]ReducedBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.Blocks, true
}

// SetBlocks sets field value
func (o *ReducedBlocks) SetBlocks(v []ReducedBlock) {
	o.Blocks = v
}

func (o ReducedBlocks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReducedBlocks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blocks"] = o.Blocks
	return toSerialize, nil
}

func (o *ReducedBlocks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blocks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReducedBlocks := _ReducedBlocks{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReducedBlocks)

	if err != nil {
		return err
	}

	*o = ReducedBlocks(varReducedBlocks)

	return err
}

type NullableReducedBlocks struct {
	value *ReducedBlocks
	isSet bool
}

func (v NullableReducedBlocks) Get() *ReducedBlocks {
	return v.value
}

func (v *NullableReducedBlocks) Set(val *ReducedBlocks) {
	v.value = val
	v.isSet = true
}

func (v NullableReducedBlocks) IsSet() bool {
	return v.isSet
}

func (v *NullableReducedBlocks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReducedBlocks(val *ReducedBlocks) *NullableReducedBlocks {
	return &NullableReducedBlocks{value: val, isSet: true}
}

func (v NullableReducedBlocks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReducedBlocks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


