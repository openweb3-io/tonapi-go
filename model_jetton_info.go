/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonInfo{}

// JettonInfo struct for JettonInfo
type JettonInfo struct {
	Mintable bool `json:"mintable"`
	TotalSupply string `json:"total_supply"`
	Admin *AccountAddress `json:"admin,omitempty"`
	Metadata JettonMetadata `json:"metadata"`
	Verification JettonVerificationType `json:"verification"`
	HoldersCount int32 `json:"holders_count"`
}

type _JettonInfo JettonInfo

// NewJettonInfo instantiates a new JettonInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonInfo(mintable bool, totalSupply string, metadata JettonMetadata, verification JettonVerificationType, holdersCount int32) *JettonInfo {
	this := JettonInfo{}
	this.Mintable = mintable
	this.TotalSupply = totalSupply
	this.Metadata = metadata
	this.Verification = verification
	this.HoldersCount = holdersCount
	return &this
}

// NewJettonInfoWithDefaults instantiates a new JettonInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonInfoWithDefaults() *JettonInfo {
	this := JettonInfo{}
	return &this
}

// GetMintable returns the Mintable field value
func (o *JettonInfo) GetMintable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Mintable
}

// GetMintableOk returns a tuple with the Mintable field value
// and a boolean to check if the value has been set.
func (o *JettonInfo) GetMintableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mintable, true
}

// SetMintable sets field value
func (o *JettonInfo) SetMintable(v bool) {
	o.Mintable = v
}

// GetTotalSupply returns the TotalSupply field value
func (o *JettonInfo) GetTotalSupply() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalSupply
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value
// and a boolean to check if the value has been set.
func (o *JettonInfo) GetTotalSupplyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSupply, true
}

// SetTotalSupply sets field value
func (o *JettonInfo) SetTotalSupply(v string) {
	o.TotalSupply = v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *JettonInfo) GetAdmin() AccountAddress {
	if o == nil || IsNil(o.Admin) {
		var ret AccountAddress
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonInfo) GetAdminOk() (*AccountAddress, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *JettonInfo) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given AccountAddress and assigns it to the Admin field.
func (o *JettonInfo) SetAdmin(v AccountAddress) {
	o.Admin = &v
}

// GetMetadata returns the Metadata field value
func (o *JettonInfo) GetMetadata() JettonMetadata {
	if o == nil {
		var ret JettonMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *JettonInfo) GetMetadataOk() (*JettonMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *JettonInfo) SetMetadata(v JettonMetadata) {
	o.Metadata = v
}

// GetVerification returns the Verification field value
func (o *JettonInfo) GetVerification() JettonVerificationType {
	if o == nil {
		var ret JettonVerificationType
		return ret
	}

	return o.Verification
}

// GetVerificationOk returns a tuple with the Verification field value
// and a boolean to check if the value has been set.
func (o *JettonInfo) GetVerificationOk() (*JettonVerificationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verification, true
}

// SetVerification sets field value
func (o *JettonInfo) SetVerification(v JettonVerificationType) {
	o.Verification = v
}

// GetHoldersCount returns the HoldersCount field value
func (o *JettonInfo) GetHoldersCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HoldersCount
}

// GetHoldersCountOk returns a tuple with the HoldersCount field value
// and a boolean to check if the value has been set.
func (o *JettonInfo) GetHoldersCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HoldersCount, true
}

// SetHoldersCount sets field value
func (o *JettonInfo) SetHoldersCount(v int32) {
	o.HoldersCount = v
}

func (o JettonInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mintable"] = o.Mintable
	toSerialize["total_supply"] = o.TotalSupply
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	toSerialize["metadata"] = o.Metadata
	toSerialize["verification"] = o.Verification
	toSerialize["holders_count"] = o.HoldersCount
	return toSerialize, nil
}

func (o *JettonInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mintable",
		"total_supply",
		"metadata",
		"verification",
		"holders_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonInfo := _JettonInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonInfo)

	if err != nil {
		return err
	}

	*o = JettonInfo(varJettonInfo)

	return err
}

type NullableJettonInfo struct {
	value *JettonInfo
	isSet bool
}

func (v NullableJettonInfo) Get() *JettonInfo {
	return v.value
}

func (v *NullableJettonInfo) Set(val *JettonInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonInfo(val *JettonInfo) *NullableJettonInfo {
	return &NullableJettonInfo{value: val, isSet: true}
}

func (v NullableJettonInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


