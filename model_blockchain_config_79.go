/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig79 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig79{}

// BlockchainConfig79 Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
type BlockchainConfig79 struct {
	JettonBridgeParams JettonBridgeParams `json:"jetton_bridge_params"`
}

type _BlockchainConfig79 BlockchainConfig79

// NewBlockchainConfig79 instantiates a new BlockchainConfig79 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig79(jettonBridgeParams JettonBridgeParams) *BlockchainConfig79 {
	this := BlockchainConfig79{}
	this.JettonBridgeParams = jettonBridgeParams
	return &this
}

// NewBlockchainConfig79WithDefaults instantiates a new BlockchainConfig79 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig79WithDefaults() *BlockchainConfig79 {
	this := BlockchainConfig79{}
	return &this
}

// GetJettonBridgeParams returns the JettonBridgeParams field value
func (o *BlockchainConfig79) GetJettonBridgeParams() JettonBridgeParams {
	if o == nil {
		var ret JettonBridgeParams
		return ret
	}

	return o.JettonBridgeParams
}

// GetJettonBridgeParamsOk returns a tuple with the JettonBridgeParams field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig79) GetJettonBridgeParamsOk() (*JettonBridgeParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JettonBridgeParams, true
}

// SetJettonBridgeParams sets field value
func (o *BlockchainConfig79) SetJettonBridgeParams(v JettonBridgeParams) {
	o.JettonBridgeParams = v
}

func (o BlockchainConfig79) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig79) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jetton_bridge_params"] = o.JettonBridgeParams
	return toSerialize, nil
}

func (o *BlockchainConfig79) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jetton_bridge_params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig79 := _BlockchainConfig79{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig79)

	if err != nil {
		return err
	}

	*o = BlockchainConfig79(varBlockchainConfig79)

	return err
}

type NullableBlockchainConfig79 struct {
	value *BlockchainConfig79
	isSet bool
}

func (v NullableBlockchainConfig79) Get() *BlockchainConfig79 {
	return v.value
}

func (v *NullableBlockchainConfig79) Set(val *BlockchainConfig79) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig79) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig79) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig79(val *BlockchainConfig79) *NullableBlockchainConfig79 {
	return &NullableBlockchainConfig79{value: val, isSet: true}
}

func (v NullableBlockchainConfig79) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig79) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


