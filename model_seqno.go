/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Seqno type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Seqno{}

// Seqno struct for Seqno
type Seqno struct {
	Seqno int32 `json:"seqno"`
}

type _Seqno Seqno

// NewSeqno instantiates a new Seqno object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeqno(seqno int32) *Seqno {
	this := Seqno{}
	this.Seqno = seqno
	return &this
}

// NewSeqnoWithDefaults instantiates a new Seqno object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeqnoWithDefaults() *Seqno {
	this := Seqno{}
	return &this
}

// GetSeqno returns the Seqno field value
func (o *Seqno) GetSeqno() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Seqno
}

// GetSeqnoOk returns a tuple with the Seqno field value
// and a boolean to check if the value has been set.
func (o *Seqno) GetSeqnoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seqno, true
}

// SetSeqno sets field value
func (o *Seqno) SetSeqno(v int32) {
	o.Seqno = v
}

func (o Seqno) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Seqno) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["seqno"] = o.Seqno
	return toSerialize, nil
}

func (o *Seqno) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"seqno",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSeqno := _Seqno{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSeqno)

	if err != nil {
		return err
	}

	*o = Seqno(varSeqno)

	return err
}

type NullableSeqno struct {
	value *Seqno
	isSet bool
}

func (v NullableSeqno) Get() *Seqno {
	return v.value
}

func (v *NullableSeqno) Set(val *Seqno) {
	v.value = val
	v.isSet = true
}

func (v NullableSeqno) IsSet() bool {
	return v.isSet
}

func (v *NullableSeqno) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeqno(val *Seqno) *NullableSeqno {
	return &NullableSeqno{value: val, isSet: true}
}

func (v NullableSeqno) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeqno) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


