/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FoundAccountsAddressesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FoundAccountsAddressesInner{}

// FoundAccountsAddressesInner struct for FoundAccountsAddressesInner
type FoundAccountsAddressesInner struct {
	Address string `json:"address"`
	Name string `json:"name"`
	Preview string `json:"preview"`
}

type _FoundAccountsAddressesInner FoundAccountsAddressesInner

// NewFoundAccountsAddressesInner instantiates a new FoundAccountsAddressesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFoundAccountsAddressesInner(address string, name string, preview string) *FoundAccountsAddressesInner {
	this := FoundAccountsAddressesInner{}
	this.Address = address
	this.Name = name
	this.Preview = preview
	return &this
}

// NewFoundAccountsAddressesInnerWithDefaults instantiates a new FoundAccountsAddressesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFoundAccountsAddressesInnerWithDefaults() *FoundAccountsAddressesInner {
	this := FoundAccountsAddressesInner{}
	return &this
}

// GetAddress returns the Address field value
func (o *FoundAccountsAddressesInner) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *FoundAccountsAddressesInner) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *FoundAccountsAddressesInner) SetAddress(v string) {
	o.Address = v
}

// GetName returns the Name field value
func (o *FoundAccountsAddressesInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FoundAccountsAddressesInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FoundAccountsAddressesInner) SetName(v string) {
	o.Name = v
}

// GetPreview returns the Preview field value
func (o *FoundAccountsAddressesInner) GetPreview() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Preview
}

// GetPreviewOk returns a tuple with the Preview field value
// and a boolean to check if the value has been set.
func (o *FoundAccountsAddressesInner) GetPreviewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Preview, true
}

// SetPreview sets field value
func (o *FoundAccountsAddressesInner) SetPreview(v string) {
	o.Preview = v
}

func (o FoundAccountsAddressesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FoundAccountsAddressesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["name"] = o.Name
	toSerialize["preview"] = o.Preview
	return toSerialize, nil
}

func (o *FoundAccountsAddressesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"name",
		"preview",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFoundAccountsAddressesInner := _FoundAccountsAddressesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFoundAccountsAddressesInner)

	if err != nil {
		return err
	}

	*o = FoundAccountsAddressesInner(varFoundAccountsAddressesInner)

	return err
}

type NullableFoundAccountsAddressesInner struct {
	value *FoundAccountsAddressesInner
	isSet bool
}

func (v NullableFoundAccountsAddressesInner) Get() *FoundAccountsAddressesInner {
	return v.value
}

func (v *NullableFoundAccountsAddressesInner) Set(val *FoundAccountsAddressesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFoundAccountsAddressesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFoundAccountsAddressesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFoundAccountsAddressesInner(val *FoundAccountsAddressesInner) *NullableFoundAccountsAddressesInner {
	return &NullableFoundAccountsAddressesInner{value: val, isSet: true}
}

func (v NullableFoundAccountsAddressesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFoundAccountsAddressesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


