/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreditPhase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditPhase{}

// CreditPhase struct for CreditPhase
type CreditPhase struct {
	FeesCollected int64 `json:"fees_collected"`
	Credit int64 `json:"credit"`
}

type _CreditPhase CreditPhase

// NewCreditPhase instantiates a new CreditPhase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditPhase(feesCollected int64, credit int64) *CreditPhase {
	this := CreditPhase{}
	this.FeesCollected = feesCollected
	this.Credit = credit
	return &this
}

// NewCreditPhaseWithDefaults instantiates a new CreditPhase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditPhaseWithDefaults() *CreditPhase {
	this := CreditPhase{}
	return &this
}

// GetFeesCollected returns the FeesCollected field value
func (o *CreditPhase) GetFeesCollected() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FeesCollected
}

// GetFeesCollectedOk returns a tuple with the FeesCollected field value
// and a boolean to check if the value has been set.
func (o *CreditPhase) GetFeesCollectedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeesCollected, true
}

// SetFeesCollected sets field value
func (o *CreditPhase) SetFeesCollected(v int64) {
	o.FeesCollected = v
}

// GetCredit returns the Credit field value
func (o *CreditPhase) GetCredit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Credit
}

// GetCreditOk returns a tuple with the Credit field value
// and a boolean to check if the value has been set.
func (o *CreditPhase) GetCreditOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credit, true
}

// SetCredit sets field value
func (o *CreditPhase) SetCredit(v int64) {
	o.Credit = v
}

func (o CreditPhase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditPhase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fees_collected"] = o.FeesCollected
	toSerialize["credit"] = o.Credit
	return toSerialize, nil
}

func (o *CreditPhase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fees_collected",
		"credit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditPhase := _CreditPhase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreditPhase)

	if err != nil {
		return err
	}

	*o = CreditPhase(varCreditPhase)

	return err
}

type NullableCreditPhase struct {
	value *CreditPhase
	isSet bool
}

func (v NullableCreditPhase) Get() *CreditPhase {
	return v.value
}

func (v *NullableCreditPhase) Set(val *CreditPhase) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditPhase) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditPhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditPhase(val *CreditPhase) *NullableCreditPhase {
	return &NullableCreditPhase{value: val, isSet: true}
}

func (v NullableCreditPhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditPhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


