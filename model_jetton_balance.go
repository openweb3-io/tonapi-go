/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JettonBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JettonBalance{}

// JettonBalance struct for JettonBalance
type JettonBalance struct {
	Balance string `json:"balance"`
	Price *TokenRates `json:"price,omitempty"`
	WalletAddress AccountAddress `json:"wallet_address"`
	Jetton JettonPreview `json:"jetton"`
	Lock *JettonBalanceLock `json:"lock,omitempty"`
}

type _JettonBalance JettonBalance

// NewJettonBalance instantiates a new JettonBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJettonBalance(balance string, walletAddress AccountAddress, jetton JettonPreview) *JettonBalance {
	this := JettonBalance{}
	this.Balance = balance
	this.WalletAddress = walletAddress
	this.Jetton = jetton
	return &this
}

// NewJettonBalanceWithDefaults instantiates a new JettonBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJettonBalanceWithDefaults() *JettonBalance {
	this := JettonBalance{}
	return &this
}

// GetBalance returns the Balance field value
func (o *JettonBalance) GetBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *JettonBalance) GetBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *JettonBalance) SetBalance(v string) {
	o.Balance = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *JettonBalance) GetPrice() TokenRates {
	if o == nil || IsNil(o.Price) {
		var ret TokenRates
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonBalance) GetPriceOk() (*TokenRates, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *JettonBalance) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given TokenRates and assigns it to the Price field.
func (o *JettonBalance) SetPrice(v TokenRates) {
	o.Price = &v
}

// GetWalletAddress returns the WalletAddress field value
func (o *JettonBalance) GetWalletAddress() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.WalletAddress
}

// GetWalletAddressOk returns a tuple with the WalletAddress field value
// and a boolean to check if the value has been set.
func (o *JettonBalance) GetWalletAddressOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletAddress, true
}

// SetWalletAddress sets field value
func (o *JettonBalance) SetWalletAddress(v AccountAddress) {
	o.WalletAddress = v
}

// GetJetton returns the Jetton field value
func (o *JettonBalance) GetJetton() JettonPreview {
	if o == nil {
		var ret JettonPreview
		return ret
	}

	return o.Jetton
}

// GetJettonOk returns a tuple with the Jetton field value
// and a boolean to check if the value has been set.
func (o *JettonBalance) GetJettonOk() (*JettonPreview, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jetton, true
}

// SetJetton sets field value
func (o *JettonBalance) SetJetton(v JettonPreview) {
	o.Jetton = v
}

// GetLock returns the Lock field value if set, zero value otherwise.
func (o *JettonBalance) GetLock() JettonBalanceLock {
	if o == nil || IsNil(o.Lock) {
		var ret JettonBalanceLock
		return ret
	}
	return *o.Lock
}

// GetLockOk returns a tuple with the Lock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JettonBalance) GetLockOk() (*JettonBalanceLock, bool) {
	if o == nil || IsNil(o.Lock) {
		return nil, false
	}
	return o.Lock, true
}

// HasLock returns a boolean if a field has been set.
func (o *JettonBalance) HasLock() bool {
	if o != nil && !IsNil(o.Lock) {
		return true
	}

	return false
}

// SetLock gets a reference to the given JettonBalanceLock and assigns it to the Lock field.
func (o *JettonBalance) SetLock(v JettonBalanceLock) {
	o.Lock = &v
}

func (o JettonBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JettonBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["balance"] = o.Balance
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	toSerialize["wallet_address"] = o.WalletAddress
	toSerialize["jetton"] = o.Jetton
	if !IsNil(o.Lock) {
		toSerialize["lock"] = o.Lock
	}
	return toSerialize, nil
}

func (o *JettonBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"balance",
		"wallet_address",
		"jetton",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJettonBalance := _JettonBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJettonBalance)

	if err != nil {
		return err
	}

	*o = JettonBalance(varJettonBalance)

	return err
}

type NullableJettonBalance struct {
	value *JettonBalance
	isSet bool
}

func (v NullableJettonBalance) Get() *JettonBalance {
	return v.value
}

func (v *NullableJettonBalance) Set(val *JettonBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableJettonBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableJettonBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJettonBalance(val *JettonBalance) *NullableJettonBalance {
	return &NullableJettonBalance{value: val, isSet: true}
}

func (v NullableJettonBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJettonBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


