/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubscriptionAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionAction{}

// SubscriptionAction struct for SubscriptionAction
type SubscriptionAction struct {
	Subscriber AccountAddress `json:"subscriber"`
	Subscription string `json:"subscription"`
	Beneficiary AccountAddress `json:"beneficiary"`
	Amount int64 `json:"amount"`
	Initial bool `json:"initial"`
}

type _SubscriptionAction SubscriptionAction

// NewSubscriptionAction instantiates a new SubscriptionAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionAction(subscriber AccountAddress, subscription string, beneficiary AccountAddress, amount int64, initial bool) *SubscriptionAction {
	this := SubscriptionAction{}
	this.Subscriber = subscriber
	this.Subscription = subscription
	this.Beneficiary = beneficiary
	this.Amount = amount
	this.Initial = initial
	return &this
}

// NewSubscriptionActionWithDefaults instantiates a new SubscriptionAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionActionWithDefaults() *SubscriptionAction {
	this := SubscriptionAction{}
	return &this
}

// GetSubscriber returns the Subscriber field value
func (o *SubscriptionAction) GetSubscriber() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Subscriber
}

// GetSubscriberOk returns a tuple with the Subscriber field value
// and a boolean to check if the value has been set.
func (o *SubscriptionAction) GetSubscriberOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscriber, true
}

// SetSubscriber sets field value
func (o *SubscriptionAction) SetSubscriber(v AccountAddress) {
	o.Subscriber = v
}

// GetSubscription returns the Subscription field value
func (o *SubscriptionAction) GetSubscription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value
// and a boolean to check if the value has been set.
func (o *SubscriptionAction) GetSubscriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscription, true
}

// SetSubscription sets field value
func (o *SubscriptionAction) SetSubscription(v string) {
	o.Subscription = v
}

// GetBeneficiary returns the Beneficiary field value
func (o *SubscriptionAction) GetBeneficiary() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Beneficiary
}

// GetBeneficiaryOk returns a tuple with the Beneficiary field value
// and a boolean to check if the value has been set.
func (o *SubscriptionAction) GetBeneficiaryOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Beneficiary, true
}

// SetBeneficiary sets field value
func (o *SubscriptionAction) SetBeneficiary(v AccountAddress) {
	o.Beneficiary = v
}

// GetAmount returns the Amount field value
func (o *SubscriptionAction) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SubscriptionAction) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SubscriptionAction) SetAmount(v int64) {
	o.Amount = v
}

// GetInitial returns the Initial field value
func (o *SubscriptionAction) GetInitial() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Initial
}

// GetInitialOk returns a tuple with the Initial field value
// and a boolean to check if the value has been set.
func (o *SubscriptionAction) GetInitialOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initial, true
}

// SetInitial sets field value
func (o *SubscriptionAction) SetInitial(v bool) {
	o.Initial = v
}

func (o SubscriptionAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriber"] = o.Subscriber
	toSerialize["subscription"] = o.Subscription
	toSerialize["beneficiary"] = o.Beneficiary
	toSerialize["amount"] = o.Amount
	toSerialize["initial"] = o.Initial
	return toSerialize, nil
}

func (o *SubscriptionAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscriber",
		"subscription",
		"beneficiary",
		"amount",
		"initial",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionAction := _SubscriptionAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionAction)

	if err != nil {
		return err
	}

	*o = SubscriptionAction(varSubscriptionAction)

	return err
}

type NullableSubscriptionAction struct {
	value *SubscriptionAction
	isSet bool
}

func (v NullableSubscriptionAction) Get() *SubscriptionAction {
	return v.value
}

func (v *NullableSubscriptionAction) Set(val *SubscriptionAction) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionAction) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionAction(val *SubscriptionAction) *NullableSubscriptionAction {
	return &NullableSubscriptionAction{value: val, isSet: true}
}

func (v NullableSubscriptionAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


