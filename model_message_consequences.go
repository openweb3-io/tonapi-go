/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageConsequences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageConsequences{}

// MessageConsequences struct for MessageConsequences
type MessageConsequences struct {
	Trace Trace `json:"trace"`
	Risk Risk `json:"risk"`
	Event AccountEvent `json:"event"`
}

type _MessageConsequences MessageConsequences

// NewMessageConsequences instantiates a new MessageConsequences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageConsequences(trace Trace, risk Risk, event AccountEvent) *MessageConsequences {
	this := MessageConsequences{}
	this.Trace = trace
	this.Risk = risk
	this.Event = event
	return &this
}

// NewMessageConsequencesWithDefaults instantiates a new MessageConsequences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageConsequencesWithDefaults() *MessageConsequences {
	this := MessageConsequences{}
	return &this
}

// GetTrace returns the Trace field value
func (o *MessageConsequences) GetTrace() Trace {
	if o == nil {
		var ret Trace
		return ret
	}

	return o.Trace
}

// GetTraceOk returns a tuple with the Trace field value
// and a boolean to check if the value has been set.
func (o *MessageConsequences) GetTraceOk() (*Trace, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trace, true
}

// SetTrace sets field value
func (o *MessageConsequences) SetTrace(v Trace) {
	o.Trace = v
}

// GetRisk returns the Risk field value
func (o *MessageConsequences) GetRisk() Risk {
	if o == nil {
		var ret Risk
		return ret
	}

	return o.Risk
}

// GetRiskOk returns a tuple with the Risk field value
// and a boolean to check if the value has been set.
func (o *MessageConsequences) GetRiskOk() (*Risk, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Risk, true
}

// SetRisk sets field value
func (o *MessageConsequences) SetRisk(v Risk) {
	o.Risk = v
}

// GetEvent returns the Event field value
func (o *MessageConsequences) GetEvent() AccountEvent {
	if o == nil {
		var ret AccountEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *MessageConsequences) GetEventOk() (*AccountEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *MessageConsequences) SetEvent(v AccountEvent) {
	o.Event = v
}

func (o MessageConsequences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageConsequences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trace"] = o.Trace
	toSerialize["risk"] = o.Risk
	toSerialize["event"] = o.Event
	return toSerialize, nil
}

func (o *MessageConsequences) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trace",
		"risk",
		"event",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageConsequences := _MessageConsequences{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageConsequences)

	if err != nil {
		return err
	}

	*o = MessageConsequences(varMessageConsequences)

	return err
}

type NullableMessageConsequences struct {
	value *MessageConsequences
	isSet bool
}

func (v NullableMessageConsequences) Get() *MessageConsequences {
	return v.value
}

func (v *NullableMessageConsequences) Set(val *MessageConsequences) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageConsequences) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageConsequences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageConsequences(val *MessageConsequences) *NullableMessageConsequences {
	return &NullableMessageConsequences{value: val, isSet: true}
}

func (v NullableMessageConsequences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageConsequences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


