/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Event type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Event{}

// Event struct for Event
type Event struct {
	EventId string `json:"event_id"`
	Timestamp int64 `json:"timestamp"`
	Actions []Action `json:"actions"`
	ValueFlow []ValueFlow `json:"value_flow"`
	// scam
	IsScam bool `json:"is_scam"`
	Lt int64 `json:"lt"`
	// Event is not finished yet. Transactions still happening
	InProgress bool `json:"in_progress"`
}

type _Event Event

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent(eventId string, timestamp int64, actions []Action, valueFlow []ValueFlow, isScam bool, lt int64, inProgress bool) *Event {
	this := Event{}
	this.EventId = eventId
	this.Timestamp = timestamp
	this.Actions = actions
	this.ValueFlow = valueFlow
	this.IsScam = isScam
	this.Lt = lt
	this.InProgress = inProgress
	return &this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := Event{}
	return &this
}

// GetEventId returns the EventId field value
func (o *Event) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *Event) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *Event) SetEventId(v string) {
	o.EventId = v
}

// GetTimestamp returns the Timestamp field value
func (o *Event) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Event) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Event) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetActions returns the Actions field value
func (o *Event) GetActions() []Action {
	if o == nil {
		var ret []Action
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *Event) GetActionsOk() ([]Action, bool) {
	if o == nil {
		return nil, false
	}
	return o.Actions, true
}

// SetActions sets field value
func (o *Event) SetActions(v []Action) {
	o.Actions = v
}

// GetValueFlow returns the ValueFlow field value
func (o *Event) GetValueFlow() []ValueFlow {
	if o == nil {
		var ret []ValueFlow
		return ret
	}

	return o.ValueFlow
}

// GetValueFlowOk returns a tuple with the ValueFlow field value
// and a boolean to check if the value has been set.
func (o *Event) GetValueFlowOk() ([]ValueFlow, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueFlow, true
}

// SetValueFlow sets field value
func (o *Event) SetValueFlow(v []ValueFlow) {
	o.ValueFlow = v
}

// GetIsScam returns the IsScam field value
func (o *Event) GetIsScam() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsScam
}

// GetIsScamOk returns a tuple with the IsScam field value
// and a boolean to check if the value has been set.
func (o *Event) GetIsScamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsScam, true
}

// SetIsScam sets field value
func (o *Event) SetIsScam(v bool) {
	o.IsScam = v
}

// GetLt returns the Lt field value
func (o *Event) GetLt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Lt
}

// GetLtOk returns a tuple with the Lt field value
// and a boolean to check if the value has been set.
func (o *Event) GetLtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lt, true
}

// SetLt sets field value
func (o *Event) SetLt(v int64) {
	o.Lt = v
}

// GetInProgress returns the InProgress field value
func (o *Event) GetInProgress() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InProgress
}

// GetInProgressOk returns a tuple with the InProgress field value
// and a boolean to check if the value has been set.
func (o *Event) GetInProgressOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InProgress, true
}

// SetInProgress sets field value
func (o *Event) SetInProgress(v bool) {
	o.InProgress = v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Event) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["actions"] = o.Actions
	toSerialize["value_flow"] = o.ValueFlow
	toSerialize["is_scam"] = o.IsScam
	toSerialize["lt"] = o.Lt
	toSerialize["in_progress"] = o.InProgress
	return toSerialize, nil
}

func (o *Event) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
		"timestamp",
		"actions",
		"value_flow",
		"is_scam",
		"lt",
		"in_progress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvent := _Event{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvent)

	if err != nil {
		return err
	}

	*o = Event(varEvent)

	return err
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


