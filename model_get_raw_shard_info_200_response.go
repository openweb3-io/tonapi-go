/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRawShardInfo200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRawShardInfo200Response{}

// GetRawShardInfo200Response struct for GetRawShardInfo200Response
type GetRawShardInfo200Response struct {
	Id BlockRaw `json:"id"`
	Shardblk BlockRaw `json:"shardblk"`
	ShardProof string `json:"shard_proof"`
	ShardDescr string `json:"shard_descr"`
}

type _GetRawShardInfo200Response GetRawShardInfo200Response

// NewGetRawShardInfo200Response instantiates a new GetRawShardInfo200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRawShardInfo200Response(id BlockRaw, shardblk BlockRaw, shardProof string, shardDescr string) *GetRawShardInfo200Response {
	this := GetRawShardInfo200Response{}
	this.Id = id
	this.Shardblk = shardblk
	this.ShardProof = shardProof
	this.ShardDescr = shardDescr
	return &this
}

// NewGetRawShardInfo200ResponseWithDefaults instantiates a new GetRawShardInfo200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRawShardInfo200ResponseWithDefaults() *GetRawShardInfo200Response {
	this := GetRawShardInfo200Response{}
	return &this
}

// GetId returns the Id field value
func (o *GetRawShardInfo200Response) GetId() BlockRaw {
	if o == nil {
		var ret BlockRaw
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetRawShardInfo200Response) GetIdOk() (*BlockRaw, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetRawShardInfo200Response) SetId(v BlockRaw) {
	o.Id = v
}

// GetShardblk returns the Shardblk field value
func (o *GetRawShardInfo200Response) GetShardblk() BlockRaw {
	if o == nil {
		var ret BlockRaw
		return ret
	}

	return o.Shardblk
}

// GetShardblkOk returns a tuple with the Shardblk field value
// and a boolean to check if the value has been set.
func (o *GetRawShardInfo200Response) GetShardblkOk() (*BlockRaw, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shardblk, true
}

// SetShardblk sets field value
func (o *GetRawShardInfo200Response) SetShardblk(v BlockRaw) {
	o.Shardblk = v
}

// GetShardProof returns the ShardProof field value
func (o *GetRawShardInfo200Response) GetShardProof() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShardProof
}

// GetShardProofOk returns a tuple with the ShardProof field value
// and a boolean to check if the value has been set.
func (o *GetRawShardInfo200Response) GetShardProofOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShardProof, true
}

// SetShardProof sets field value
func (o *GetRawShardInfo200Response) SetShardProof(v string) {
	o.ShardProof = v
}

// GetShardDescr returns the ShardDescr field value
func (o *GetRawShardInfo200Response) GetShardDescr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShardDescr
}

// GetShardDescrOk returns a tuple with the ShardDescr field value
// and a boolean to check if the value has been set.
func (o *GetRawShardInfo200Response) GetShardDescrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShardDescr, true
}

// SetShardDescr sets field value
func (o *GetRawShardInfo200Response) SetShardDescr(v string) {
	o.ShardDescr = v
}

func (o GetRawShardInfo200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRawShardInfo200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["shardblk"] = o.Shardblk
	toSerialize["shard_proof"] = o.ShardProof
	toSerialize["shard_descr"] = o.ShardDescr
	return toSerialize, nil
}

func (o *GetRawShardInfo200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"shardblk",
		"shard_proof",
		"shard_descr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRawShardInfo200Response := _GetRawShardInfo200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRawShardInfo200Response)

	if err != nil {
		return err
	}

	*o = GetRawShardInfo200Response(varGetRawShardInfo200Response)

	return err
}

type NullableGetRawShardInfo200Response struct {
	value *GetRawShardInfo200Response
	isSet bool
}

func (v NullableGetRawShardInfo200Response) Get() *GetRawShardInfo200Response {
	return v.value
}

func (v *NullableGetRawShardInfo200Response) Set(val *GetRawShardInfo200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRawShardInfo200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRawShardInfo200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRawShardInfo200Response(val *GetRawShardInfo200Response) *NullableGetRawShardInfo200Response {
	return &NullableGetRawShardInfo200Response{value: val, isSet: true}
}

func (v NullableGetRawShardInfo200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRawShardInfo200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


