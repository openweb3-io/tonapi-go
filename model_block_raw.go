/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockRaw type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockRaw{}

// BlockRaw struct for BlockRaw
type BlockRaw struct {
	Workchain int32 `json:"workchain"`
	Shard string `json:"shard"`
	Seqno int32 `json:"seqno"`
	RootHash string `json:"root_hash"`
	FileHash string `json:"file_hash"`
}

type _BlockRaw BlockRaw

// NewBlockRaw instantiates a new BlockRaw object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockRaw(workchain int32, shard string, seqno int32, rootHash string, fileHash string) *BlockRaw {
	this := BlockRaw{}
	this.Workchain = workchain
	this.Shard = shard
	this.Seqno = seqno
	this.RootHash = rootHash
	this.FileHash = fileHash
	return &this
}

// NewBlockRawWithDefaults instantiates a new BlockRaw object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockRawWithDefaults() *BlockRaw {
	this := BlockRaw{}
	return &this
}

// GetWorkchain returns the Workchain field value
func (o *BlockRaw) GetWorkchain() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Workchain
}

// GetWorkchainOk returns a tuple with the Workchain field value
// and a boolean to check if the value has been set.
func (o *BlockRaw) GetWorkchainOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workchain, true
}

// SetWorkchain sets field value
func (o *BlockRaw) SetWorkchain(v int32) {
	o.Workchain = v
}

// GetShard returns the Shard field value
func (o *BlockRaw) GetShard() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Shard
}

// GetShardOk returns a tuple with the Shard field value
// and a boolean to check if the value has been set.
func (o *BlockRaw) GetShardOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shard, true
}

// SetShard sets field value
func (o *BlockRaw) SetShard(v string) {
	o.Shard = v
}

// GetSeqno returns the Seqno field value
func (o *BlockRaw) GetSeqno() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Seqno
}

// GetSeqnoOk returns a tuple with the Seqno field value
// and a boolean to check if the value has been set.
func (o *BlockRaw) GetSeqnoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seqno, true
}

// SetSeqno sets field value
func (o *BlockRaw) SetSeqno(v int32) {
	o.Seqno = v
}

// GetRootHash returns the RootHash field value
func (o *BlockRaw) GetRootHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootHash
}

// GetRootHashOk returns a tuple with the RootHash field value
// and a boolean to check if the value has been set.
func (o *BlockRaw) GetRootHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootHash, true
}

// SetRootHash sets field value
func (o *BlockRaw) SetRootHash(v string) {
	o.RootHash = v
}

// GetFileHash returns the FileHash field value
func (o *BlockRaw) GetFileHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileHash
}

// GetFileHashOk returns a tuple with the FileHash field value
// and a boolean to check if the value has been set.
func (o *BlockRaw) GetFileHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileHash, true
}

// SetFileHash sets field value
func (o *BlockRaw) SetFileHash(v string) {
	o.FileHash = v
}

func (o BlockRaw) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockRaw) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workchain"] = o.Workchain
	toSerialize["shard"] = o.Shard
	toSerialize["seqno"] = o.Seqno
	toSerialize["root_hash"] = o.RootHash
	toSerialize["file_hash"] = o.FileHash
	return toSerialize, nil
}

func (o *BlockRaw) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workchain",
		"shard",
		"seqno",
		"root_hash",
		"file_hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockRaw := _BlockRaw{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockRaw)

	if err != nil {
		return err
	}

	*o = BlockRaw(varBlockRaw)

	return err
}

type NullableBlockRaw struct {
	value *BlockRaw
	isSet bool
}

func (v NullableBlockRaw) Get() *BlockRaw {
	return v.value
}

func (v *NullableBlockRaw) Set(val *BlockRaw) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockRaw) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockRaw) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockRaw(val *BlockRaw) *NullableBlockRaw {
	return &NullableBlockRaw{value: val, isSet: true}
}

func (v NullableBlockRaw) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockRaw) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


