/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"fmt"
)

// AccStatusChange the model 'AccStatusChange'
type AccStatusChange string

// List of AccStatusChange
const (
	ACCSTATUSCHANGE_UNCHANGED AccStatusChange = "acst_unchanged"
	ACCSTATUSCHANGE_FROZEN AccStatusChange = "acst_frozen"
	ACCSTATUSCHANGE_DELETED AccStatusChange = "acst_deleted"
)

// All allowed values of AccStatusChange enum
var AllowedAccStatusChangeEnumValues = []AccStatusChange{
	"acst_unchanged",
	"acst_frozen",
	"acst_deleted",
}

func (v *AccStatusChange) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccStatusChange(value)
	for _, existing := range AllowedAccStatusChangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccStatusChange", value)
}

// NewAccStatusChangeFromValue returns a pointer to a valid AccStatusChange
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccStatusChangeFromValue(v string) (*AccStatusChange, error) {
	ev := AccStatusChange(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccStatusChange: valid values are %v", v, AllowedAccStatusChangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccStatusChange) IsValid() bool {
	for _, existing := range AllowedAccStatusChangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccStatusChange value
func (v AccStatusChange) Ptr() *AccStatusChange {
	return &v
}

type NullableAccStatusChange struct {
	value *AccStatusChange
	isSet bool
}

func (v NullableAccStatusChange) Get() *AccStatusChange {
	return v.value
}

func (v *NullableAccStatusChange) Set(val *AccStatusChange) {
	v.value = val
	v.isSet = true
}

func (v NullableAccStatusChange) IsSet() bool {
	return v.isSet
}

func (v *NullableAccStatusChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccStatusChange(val *AccStatusChange) *NullableAccStatusChange {
	return &NullableAccStatusChange{value: val, isSet: true}
}

func (v NullableAccStatusChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccStatusChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

