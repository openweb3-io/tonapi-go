/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transaction{}

// Transaction struct for Transaction
type Transaction struct {
	Hash string `json:"hash"`
	Lt int64 `json:"lt"`
	Account AccountAddress `json:"account"`
	Success bool `json:"success"`
	Utime int64 `json:"utime"`
	OrigStatus AccountStatus `json:"orig_status"`
	EndStatus AccountStatus `json:"end_status"`
	TotalFees int64 `json:"total_fees"`
	EndBalance int64 `json:"end_balance"`
	TransactionType TransactionType `json:"transaction_type"`
	StateUpdateOld string `json:"state_update_old"`
	StateUpdateNew string `json:"state_update_new"`
	InMsg *Message `json:"in_msg,omitempty"`
	OutMsgs []Message `json:"out_msgs"`
	Block string `json:"block"`
	PrevTransHash *string `json:"prev_trans_hash,omitempty"`
	PrevTransLt *int64 `json:"prev_trans_lt,omitempty"`
	ComputePhase *ComputePhase `json:"compute_phase,omitempty"`
	StoragePhase *StoragePhase `json:"storage_phase,omitempty"`
	CreditPhase *CreditPhase `json:"credit_phase,omitempty"`
	ActionPhase *ActionPhase `json:"action_phase,omitempty"`
	BouncePhase *BouncePhaseType `json:"bounce_phase,omitempty"`
	Aborted bool `json:"aborted"`
	Destroyed bool `json:"destroyed"`
	// hex encoded boc with raw transaction
	Raw string `json:"raw"`
}

type _Transaction Transaction

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(hash string, lt int64, account AccountAddress, success bool, utime int64, origStatus AccountStatus, endStatus AccountStatus, totalFees int64, endBalance int64, transactionType TransactionType, stateUpdateOld string, stateUpdateNew string, outMsgs []Message, block string, aborted bool, destroyed bool, raw string) *Transaction {
	this := Transaction{}
	this.Hash = hash
	this.Lt = lt
	this.Account = account
	this.Success = success
	this.Utime = utime
	this.OrigStatus = origStatus
	this.EndStatus = endStatus
	this.TotalFees = totalFees
	this.EndBalance = endBalance
	this.TransactionType = transactionType
	this.StateUpdateOld = stateUpdateOld
	this.StateUpdateNew = stateUpdateNew
	this.OutMsgs = outMsgs
	this.Block = block
	this.Aborted = aborted
	this.Destroyed = destroyed
	this.Raw = raw
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetHash returns the Hash field value
func (o *Transaction) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *Transaction) SetHash(v string) {
	o.Hash = v
}

// GetLt returns the Lt field value
func (o *Transaction) GetLt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Lt
}

// GetLtOk returns a tuple with the Lt field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetLtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lt, true
}

// SetLt sets field value
func (o *Transaction) SetLt(v int64) {
	o.Lt = v
}

// GetAccount returns the Account field value
func (o *Transaction) GetAccount() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAccountOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *Transaction) SetAccount(v AccountAddress) {
	o.Account = v
}

// GetSuccess returns the Success field value
func (o *Transaction) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *Transaction) SetSuccess(v bool) {
	o.Success = v
}

// GetUtime returns the Utime field value
func (o *Transaction) GetUtime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Utime
}

// GetUtimeOk returns a tuple with the Utime field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetUtimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Utime, true
}

// SetUtime sets field value
func (o *Transaction) SetUtime(v int64) {
	o.Utime = v
}

// GetOrigStatus returns the OrigStatus field value
func (o *Transaction) GetOrigStatus() AccountStatus {
	if o == nil {
		var ret AccountStatus
		return ret
	}

	return o.OrigStatus
}

// GetOrigStatusOk returns a tuple with the OrigStatus field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetOrigStatusOk() (*AccountStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrigStatus, true
}

// SetOrigStatus sets field value
func (o *Transaction) SetOrigStatus(v AccountStatus) {
	o.OrigStatus = v
}

// GetEndStatus returns the EndStatus field value
func (o *Transaction) GetEndStatus() AccountStatus {
	if o == nil {
		var ret AccountStatus
		return ret
	}

	return o.EndStatus
}

// GetEndStatusOk returns a tuple with the EndStatus field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetEndStatusOk() (*AccountStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndStatus, true
}

// SetEndStatus sets field value
func (o *Transaction) SetEndStatus(v AccountStatus) {
	o.EndStatus = v
}

// GetTotalFees returns the TotalFees field value
func (o *Transaction) GetTotalFees() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalFees
}

// GetTotalFeesOk returns a tuple with the TotalFees field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTotalFeesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFees, true
}

// SetTotalFees sets field value
func (o *Transaction) SetTotalFees(v int64) {
	o.TotalFees = v
}

// GetEndBalance returns the EndBalance field value
func (o *Transaction) GetEndBalance() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EndBalance
}

// GetEndBalanceOk returns a tuple with the EndBalance field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetEndBalanceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndBalance, true
}

// SetEndBalance sets field value
func (o *Transaction) SetEndBalance(v int64) {
	o.EndBalance = v
}

// GetTransactionType returns the TransactionType field value
func (o *Transaction) GetTransactionType() TransactionType {
	if o == nil {
		var ret TransactionType
		return ret
	}

	return o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionTypeOk() (*TransactionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionType, true
}

// SetTransactionType sets field value
func (o *Transaction) SetTransactionType(v TransactionType) {
	o.TransactionType = v
}

// GetStateUpdateOld returns the StateUpdateOld field value
func (o *Transaction) GetStateUpdateOld() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateUpdateOld
}

// GetStateUpdateOldOk returns a tuple with the StateUpdateOld field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetStateUpdateOldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateUpdateOld, true
}

// SetStateUpdateOld sets field value
func (o *Transaction) SetStateUpdateOld(v string) {
	o.StateUpdateOld = v
}

// GetStateUpdateNew returns the StateUpdateNew field value
func (o *Transaction) GetStateUpdateNew() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateUpdateNew
}

// GetStateUpdateNewOk returns a tuple with the StateUpdateNew field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetStateUpdateNewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateUpdateNew, true
}

// SetStateUpdateNew sets field value
func (o *Transaction) SetStateUpdateNew(v string) {
	o.StateUpdateNew = v
}

// GetInMsg returns the InMsg field value if set, zero value otherwise.
func (o *Transaction) GetInMsg() Message {
	if o == nil || IsNil(o.InMsg) {
		var ret Message
		return ret
	}
	return *o.InMsg
}

// GetInMsgOk returns a tuple with the InMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetInMsgOk() (*Message, bool) {
	if o == nil || IsNil(o.InMsg) {
		return nil, false
	}
	return o.InMsg, true
}

// HasInMsg returns a boolean if a field has been set.
func (o *Transaction) HasInMsg() bool {
	if o != nil && !IsNil(o.InMsg) {
		return true
	}

	return false
}

// SetInMsg gets a reference to the given Message and assigns it to the InMsg field.
func (o *Transaction) SetInMsg(v Message) {
	o.InMsg = &v
}

// GetOutMsgs returns the OutMsgs field value
func (o *Transaction) GetOutMsgs() []Message {
	if o == nil {
		var ret []Message
		return ret
	}

	return o.OutMsgs
}

// GetOutMsgsOk returns a tuple with the OutMsgs field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetOutMsgsOk() ([]Message, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutMsgs, true
}

// SetOutMsgs sets field value
func (o *Transaction) SetOutMsgs(v []Message) {
	o.OutMsgs = v
}

// GetBlock returns the Block field value
func (o *Transaction) GetBlock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Block
}

// GetBlockOk returns a tuple with the Block field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Block, true
}

// SetBlock sets field value
func (o *Transaction) SetBlock(v string) {
	o.Block = v
}

// GetPrevTransHash returns the PrevTransHash field value if set, zero value otherwise.
func (o *Transaction) GetPrevTransHash() string {
	if o == nil || IsNil(o.PrevTransHash) {
		var ret string
		return ret
	}
	return *o.PrevTransHash
}

// GetPrevTransHashOk returns a tuple with the PrevTransHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetPrevTransHashOk() (*string, bool) {
	if o == nil || IsNil(o.PrevTransHash) {
		return nil, false
	}
	return o.PrevTransHash, true
}

// HasPrevTransHash returns a boolean if a field has been set.
func (o *Transaction) HasPrevTransHash() bool {
	if o != nil && !IsNil(o.PrevTransHash) {
		return true
	}

	return false
}

// SetPrevTransHash gets a reference to the given string and assigns it to the PrevTransHash field.
func (o *Transaction) SetPrevTransHash(v string) {
	o.PrevTransHash = &v
}

// GetPrevTransLt returns the PrevTransLt field value if set, zero value otherwise.
func (o *Transaction) GetPrevTransLt() int64 {
	if o == nil || IsNil(o.PrevTransLt) {
		var ret int64
		return ret
	}
	return *o.PrevTransLt
}

// GetPrevTransLtOk returns a tuple with the PrevTransLt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetPrevTransLtOk() (*int64, bool) {
	if o == nil || IsNil(o.PrevTransLt) {
		return nil, false
	}
	return o.PrevTransLt, true
}

// HasPrevTransLt returns a boolean if a field has been set.
func (o *Transaction) HasPrevTransLt() bool {
	if o != nil && !IsNil(o.PrevTransLt) {
		return true
	}

	return false
}

// SetPrevTransLt gets a reference to the given int64 and assigns it to the PrevTransLt field.
func (o *Transaction) SetPrevTransLt(v int64) {
	o.PrevTransLt = &v
}

// GetComputePhase returns the ComputePhase field value if set, zero value otherwise.
func (o *Transaction) GetComputePhase() ComputePhase {
	if o == nil || IsNil(o.ComputePhase) {
		var ret ComputePhase
		return ret
	}
	return *o.ComputePhase
}

// GetComputePhaseOk returns a tuple with the ComputePhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetComputePhaseOk() (*ComputePhase, bool) {
	if o == nil || IsNil(o.ComputePhase) {
		return nil, false
	}
	return o.ComputePhase, true
}

// HasComputePhase returns a boolean if a field has been set.
func (o *Transaction) HasComputePhase() bool {
	if o != nil && !IsNil(o.ComputePhase) {
		return true
	}

	return false
}

// SetComputePhase gets a reference to the given ComputePhase and assigns it to the ComputePhase field.
func (o *Transaction) SetComputePhase(v ComputePhase) {
	o.ComputePhase = &v
}

// GetStoragePhase returns the StoragePhase field value if set, zero value otherwise.
func (o *Transaction) GetStoragePhase() StoragePhase {
	if o == nil || IsNil(o.StoragePhase) {
		var ret StoragePhase
		return ret
	}
	return *o.StoragePhase
}

// GetStoragePhaseOk returns a tuple with the StoragePhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetStoragePhaseOk() (*StoragePhase, bool) {
	if o == nil || IsNil(o.StoragePhase) {
		return nil, false
	}
	return o.StoragePhase, true
}

// HasStoragePhase returns a boolean if a field has been set.
func (o *Transaction) HasStoragePhase() bool {
	if o != nil && !IsNil(o.StoragePhase) {
		return true
	}

	return false
}

// SetStoragePhase gets a reference to the given StoragePhase and assigns it to the StoragePhase field.
func (o *Transaction) SetStoragePhase(v StoragePhase) {
	o.StoragePhase = &v
}

// GetCreditPhase returns the CreditPhase field value if set, zero value otherwise.
func (o *Transaction) GetCreditPhase() CreditPhase {
	if o == nil || IsNil(o.CreditPhase) {
		var ret CreditPhase
		return ret
	}
	return *o.CreditPhase
}

// GetCreditPhaseOk returns a tuple with the CreditPhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCreditPhaseOk() (*CreditPhase, bool) {
	if o == nil || IsNil(o.CreditPhase) {
		return nil, false
	}
	return o.CreditPhase, true
}

// HasCreditPhase returns a boolean if a field has been set.
func (o *Transaction) HasCreditPhase() bool {
	if o != nil && !IsNil(o.CreditPhase) {
		return true
	}

	return false
}

// SetCreditPhase gets a reference to the given CreditPhase and assigns it to the CreditPhase field.
func (o *Transaction) SetCreditPhase(v CreditPhase) {
	o.CreditPhase = &v
}

// GetActionPhase returns the ActionPhase field value if set, zero value otherwise.
func (o *Transaction) GetActionPhase() ActionPhase {
	if o == nil || IsNil(o.ActionPhase) {
		var ret ActionPhase
		return ret
	}
	return *o.ActionPhase
}

// GetActionPhaseOk returns a tuple with the ActionPhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetActionPhaseOk() (*ActionPhase, bool) {
	if o == nil || IsNil(o.ActionPhase) {
		return nil, false
	}
	return o.ActionPhase, true
}

// HasActionPhase returns a boolean if a field has been set.
func (o *Transaction) HasActionPhase() bool {
	if o != nil && !IsNil(o.ActionPhase) {
		return true
	}

	return false
}

// SetActionPhase gets a reference to the given ActionPhase and assigns it to the ActionPhase field.
func (o *Transaction) SetActionPhase(v ActionPhase) {
	o.ActionPhase = &v
}

// GetBouncePhase returns the BouncePhase field value if set, zero value otherwise.
func (o *Transaction) GetBouncePhase() BouncePhaseType {
	if o == nil || IsNil(o.BouncePhase) {
		var ret BouncePhaseType
		return ret
	}
	return *o.BouncePhase
}

// GetBouncePhaseOk returns a tuple with the BouncePhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBouncePhaseOk() (*BouncePhaseType, bool) {
	if o == nil || IsNil(o.BouncePhase) {
		return nil, false
	}
	return o.BouncePhase, true
}

// HasBouncePhase returns a boolean if a field has been set.
func (o *Transaction) HasBouncePhase() bool {
	if o != nil && !IsNil(o.BouncePhase) {
		return true
	}

	return false
}

// SetBouncePhase gets a reference to the given BouncePhaseType and assigns it to the BouncePhase field.
func (o *Transaction) SetBouncePhase(v BouncePhaseType) {
	o.BouncePhase = &v
}

// GetAborted returns the Aborted field value
func (o *Transaction) GetAborted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Aborted
}

// GetAbortedOk returns a tuple with the Aborted field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAbortedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aborted, true
}

// SetAborted sets field value
func (o *Transaction) SetAborted(v bool) {
	o.Aborted = v
}

// GetDestroyed returns the Destroyed field value
func (o *Transaction) GetDestroyed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Destroyed
}

// GetDestroyedOk returns a tuple with the Destroyed field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetDestroyedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destroyed, true
}

// SetDestroyed sets field value
func (o *Transaction) SetDestroyed(v bool) {
	o.Destroyed = v
}

// GetRaw returns the Raw field value
func (o *Transaction) GetRaw() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Raw
}

// GetRawOk returns a tuple with the Raw field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Raw, true
}

// SetRaw sets field value
func (o *Transaction) SetRaw(v string) {
	o.Raw = v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	toSerialize["lt"] = o.Lt
	toSerialize["account"] = o.Account
	toSerialize["success"] = o.Success
	toSerialize["utime"] = o.Utime
	toSerialize["orig_status"] = o.OrigStatus
	toSerialize["end_status"] = o.EndStatus
	toSerialize["total_fees"] = o.TotalFees
	toSerialize["end_balance"] = o.EndBalance
	toSerialize["transaction_type"] = o.TransactionType
	toSerialize["state_update_old"] = o.StateUpdateOld
	toSerialize["state_update_new"] = o.StateUpdateNew
	if !IsNil(o.InMsg) {
		toSerialize["in_msg"] = o.InMsg
	}
	toSerialize["out_msgs"] = o.OutMsgs
	toSerialize["block"] = o.Block
	if !IsNil(o.PrevTransHash) {
		toSerialize["prev_trans_hash"] = o.PrevTransHash
	}
	if !IsNil(o.PrevTransLt) {
		toSerialize["prev_trans_lt"] = o.PrevTransLt
	}
	if !IsNil(o.ComputePhase) {
		toSerialize["compute_phase"] = o.ComputePhase
	}
	if !IsNil(o.StoragePhase) {
		toSerialize["storage_phase"] = o.StoragePhase
	}
	if !IsNil(o.CreditPhase) {
		toSerialize["credit_phase"] = o.CreditPhase
	}
	if !IsNil(o.ActionPhase) {
		toSerialize["action_phase"] = o.ActionPhase
	}
	if !IsNil(o.BouncePhase) {
		toSerialize["bounce_phase"] = o.BouncePhase
	}
	toSerialize["aborted"] = o.Aborted
	toSerialize["destroyed"] = o.Destroyed
	toSerialize["raw"] = o.Raw
	return toSerialize, nil
}

func (o *Transaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hash",
		"lt",
		"account",
		"success",
		"utime",
		"orig_status",
		"end_status",
		"total_fees",
		"end_balance",
		"transaction_type",
		"state_update_old",
		"state_update_new",
		"out_msgs",
		"block",
		"aborted",
		"destroyed",
		"raw",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransaction := _Transaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransaction)

	if err != nil {
		return err
	}

	*o = Transaction(varTransaction)

	return err
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


