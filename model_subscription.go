/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Subscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscription{}

// Subscription struct for Subscription
type Subscription struct {
	Address string `json:"address"`
	WalletAddress string `json:"wallet_address"`
	BeneficiaryAddress string `json:"beneficiary_address"`
	Amount int64 `json:"amount"`
	Period int64 `json:"period"`
	StartTime int64 `json:"start_time"`
	Timeout int64 `json:"timeout"`
	LastPaymentTime int64 `json:"last_payment_time"`
	LastRequestTime int64 `json:"last_request_time"`
	SubscriptionId int64 `json:"subscription_id"`
	FailedAttempts int32 `json:"failed_attempts"`
}

type _Subscription Subscription

// NewSubscription instantiates a new Subscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscription(address string, walletAddress string, beneficiaryAddress string, amount int64, period int64, startTime int64, timeout int64, lastPaymentTime int64, lastRequestTime int64, subscriptionId int64, failedAttempts int32) *Subscription {
	this := Subscription{}
	this.Address = address
	this.WalletAddress = walletAddress
	this.BeneficiaryAddress = beneficiaryAddress
	this.Amount = amount
	this.Period = period
	this.StartTime = startTime
	this.Timeout = timeout
	this.LastPaymentTime = lastPaymentTime
	this.LastRequestTime = lastRequestTime
	this.SubscriptionId = subscriptionId
	this.FailedAttempts = failedAttempts
	return &this
}

// NewSubscriptionWithDefaults instantiates a new Subscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionWithDefaults() *Subscription {
	this := Subscription{}
	return &this
}

// GetAddress returns the Address field value
func (o *Subscription) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Subscription) SetAddress(v string) {
	o.Address = v
}

// GetWalletAddress returns the WalletAddress field value
func (o *Subscription) GetWalletAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletAddress
}

// GetWalletAddressOk returns a tuple with the WalletAddress field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetWalletAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletAddress, true
}

// SetWalletAddress sets field value
func (o *Subscription) SetWalletAddress(v string) {
	o.WalletAddress = v
}

// GetBeneficiaryAddress returns the BeneficiaryAddress field value
func (o *Subscription) GetBeneficiaryAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BeneficiaryAddress
}

// GetBeneficiaryAddressOk returns a tuple with the BeneficiaryAddress field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetBeneficiaryAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BeneficiaryAddress, true
}

// SetBeneficiaryAddress sets field value
func (o *Subscription) SetBeneficiaryAddress(v string) {
	o.BeneficiaryAddress = v
}

// GetAmount returns the Amount field value
func (o *Subscription) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Subscription) SetAmount(v int64) {
	o.Amount = v
}

// GetPeriod returns the Period field value
func (o *Subscription) GetPeriod() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetPeriodOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *Subscription) SetPeriod(v int64) {
	o.Period = v
}

// GetStartTime returns the StartTime field value
func (o *Subscription) GetStartTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetStartTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Subscription) SetStartTime(v int64) {
	o.StartTime = v
}

// GetTimeout returns the Timeout field value
func (o *Subscription) GetTimeout() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetTimeoutOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *Subscription) SetTimeout(v int64) {
	o.Timeout = v
}

// GetLastPaymentTime returns the LastPaymentTime field value
func (o *Subscription) GetLastPaymentTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastPaymentTime
}

// GetLastPaymentTimeOk returns a tuple with the LastPaymentTime field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetLastPaymentTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastPaymentTime, true
}

// SetLastPaymentTime sets field value
func (o *Subscription) SetLastPaymentTime(v int64) {
	o.LastPaymentTime = v
}

// GetLastRequestTime returns the LastRequestTime field value
func (o *Subscription) GetLastRequestTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastRequestTime
}

// GetLastRequestTimeOk returns a tuple with the LastRequestTime field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetLastRequestTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastRequestTime, true
}

// SetLastRequestTime sets field value
func (o *Subscription) SetLastRequestTime(v int64) {
	o.LastRequestTime = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *Subscription) GetSubscriptionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetSubscriptionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *Subscription) SetSubscriptionId(v int64) {
	o.SubscriptionId = v
}

// GetFailedAttempts returns the FailedAttempts field value
func (o *Subscription) GetFailedAttempts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FailedAttempts
}

// GetFailedAttemptsOk returns a tuple with the FailedAttempts field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetFailedAttemptsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedAttempts, true
}

// SetFailedAttempts sets field value
func (o *Subscription) SetFailedAttempts(v int32) {
	o.FailedAttempts = v
}

func (o Subscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["wallet_address"] = o.WalletAddress
	toSerialize["beneficiary_address"] = o.BeneficiaryAddress
	toSerialize["amount"] = o.Amount
	toSerialize["period"] = o.Period
	toSerialize["start_time"] = o.StartTime
	toSerialize["timeout"] = o.Timeout
	toSerialize["last_payment_time"] = o.LastPaymentTime
	toSerialize["last_request_time"] = o.LastRequestTime
	toSerialize["subscription_id"] = o.SubscriptionId
	toSerialize["failed_attempts"] = o.FailedAttempts
	return toSerialize, nil
}

func (o *Subscription) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"wallet_address",
		"beneficiary_address",
		"amount",
		"period",
		"start_time",
		"timeout",
		"last_payment_time",
		"last_request_time",
		"subscription_id",
		"failed_attempts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscription := _Subscription{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscription)

	if err != nil {
		return err
	}

	*o = Subscription(varSubscription)

	return err
}

type NullableSubscription struct {
	value *Subscription
	isSet bool
}

func (v NullableSubscription) Get() *Subscription {
	return v.value
}

func (v *NullableSubscription) Set(val *Subscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscription(val *Subscription) *NullableSubscription {
	return &NullableSubscription{value: val, isSet: true}
}

func (v NullableSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


