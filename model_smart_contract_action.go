/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmartContractAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartContractAction{}

// SmartContractAction struct for SmartContractAction
type SmartContractAction struct {
	Executor AccountAddress `json:"executor"`
	Contract AccountAddress `json:"contract"`
	// amount in nanotons
	TonAttached int64 `json:"ton_attached"`
	Operation string `json:"operation"`
	Payload *string `json:"payload,omitempty"`
	Refund *Refund `json:"refund,omitempty"`
}

type _SmartContractAction SmartContractAction

// NewSmartContractAction instantiates a new SmartContractAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartContractAction(executor AccountAddress, contract AccountAddress, tonAttached int64, operation string) *SmartContractAction {
	this := SmartContractAction{}
	this.Executor = executor
	this.Contract = contract
	this.TonAttached = tonAttached
	this.Operation = operation
	return &this
}

// NewSmartContractActionWithDefaults instantiates a new SmartContractAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartContractActionWithDefaults() *SmartContractAction {
	this := SmartContractAction{}
	return &this
}

// GetExecutor returns the Executor field value
func (o *SmartContractAction) GetExecutor() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Executor
}

// GetExecutorOk returns a tuple with the Executor field value
// and a boolean to check if the value has been set.
func (o *SmartContractAction) GetExecutorOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Executor, true
}

// SetExecutor sets field value
func (o *SmartContractAction) SetExecutor(v AccountAddress) {
	o.Executor = v
}

// GetContract returns the Contract field value
func (o *SmartContractAction) GetContract() AccountAddress {
	if o == nil {
		var ret AccountAddress
		return ret
	}

	return o.Contract
}

// GetContractOk returns a tuple with the Contract field value
// and a boolean to check if the value has been set.
func (o *SmartContractAction) GetContractOk() (*AccountAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contract, true
}

// SetContract sets field value
func (o *SmartContractAction) SetContract(v AccountAddress) {
	o.Contract = v
}

// GetTonAttached returns the TonAttached field value
func (o *SmartContractAction) GetTonAttached() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TonAttached
}

// GetTonAttachedOk returns a tuple with the TonAttached field value
// and a boolean to check if the value has been set.
func (o *SmartContractAction) GetTonAttachedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TonAttached, true
}

// SetTonAttached sets field value
func (o *SmartContractAction) SetTonAttached(v int64) {
	o.TonAttached = v
}

// GetOperation returns the Operation field value
func (o *SmartContractAction) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *SmartContractAction) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *SmartContractAction) SetOperation(v string) {
	o.Operation = v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *SmartContractAction) GetPayload() string {
	if o == nil || IsNil(o.Payload) {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractAction) GetPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *SmartContractAction) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *SmartContractAction) SetPayload(v string) {
	o.Payload = &v
}

// GetRefund returns the Refund field value if set, zero value otherwise.
func (o *SmartContractAction) GetRefund() Refund {
	if o == nil || IsNil(o.Refund) {
		var ret Refund
		return ret
	}
	return *o.Refund
}

// GetRefundOk returns a tuple with the Refund field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartContractAction) GetRefundOk() (*Refund, bool) {
	if o == nil || IsNil(o.Refund) {
		return nil, false
	}
	return o.Refund, true
}

// HasRefund returns a boolean if a field has been set.
func (o *SmartContractAction) HasRefund() bool {
	if o != nil && !IsNil(o.Refund) {
		return true
	}

	return false
}

// SetRefund gets a reference to the given Refund and assigns it to the Refund field.
func (o *SmartContractAction) SetRefund(v Refund) {
	o.Refund = &v
}

func (o SmartContractAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartContractAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["executor"] = o.Executor
	toSerialize["contract"] = o.Contract
	toSerialize["ton_attached"] = o.TonAttached
	toSerialize["operation"] = o.Operation
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.Refund) {
		toSerialize["refund"] = o.Refund
	}
	return toSerialize, nil
}

func (o *SmartContractAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"executor",
		"contract",
		"ton_attached",
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartContractAction := _SmartContractAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartContractAction)

	if err != nil {
		return err
	}

	*o = SmartContractAction(varSmartContractAction)

	return err
}

type NullableSmartContractAction struct {
	value *SmartContractAction
	isSet bool
}

func (v NullableSmartContractAction) Get() *SmartContractAction {
	return v.value
}

func (v *NullableSmartContractAction) Set(val *SmartContractAction) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractAction) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractAction(val *SmartContractAction) *NullableSmartContractAction {
	return &NullableSmartContractAction{value: val, isSet: true}
}

func (v NullableSmartContractAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


