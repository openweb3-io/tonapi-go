/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GaslessConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GaslessConfig{}

// GaslessConfig struct for GaslessConfig
type GaslessConfig struct {
	// sending excess to this address decreases the commission of a gasless transfer
	RelayAddress string `json:"relay_address"`
	// list of jettons, any of them can be used to pay for gas
	GasJettons []GaslessConfigGasJettonsInner `json:"gas_jettons"`
}

type _GaslessConfig GaslessConfig

// NewGaslessConfig instantiates a new GaslessConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGaslessConfig(relayAddress string, gasJettons []GaslessConfigGasJettonsInner) *GaslessConfig {
	this := GaslessConfig{}
	this.RelayAddress = relayAddress
	this.GasJettons = gasJettons
	return &this
}

// NewGaslessConfigWithDefaults instantiates a new GaslessConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGaslessConfigWithDefaults() *GaslessConfig {
	this := GaslessConfig{}
	return &this
}

// GetRelayAddress returns the RelayAddress field value
func (o *GaslessConfig) GetRelayAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelayAddress
}

// GetRelayAddressOk returns a tuple with the RelayAddress field value
// and a boolean to check if the value has been set.
func (o *GaslessConfig) GetRelayAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelayAddress, true
}

// SetRelayAddress sets field value
func (o *GaslessConfig) SetRelayAddress(v string) {
	o.RelayAddress = v
}

// GetGasJettons returns the GasJettons field value
func (o *GaslessConfig) GetGasJettons() []GaslessConfigGasJettonsInner {
	if o == nil {
		var ret []GaslessConfigGasJettonsInner
		return ret
	}

	return o.GasJettons
}

// GetGasJettonsOk returns a tuple with the GasJettons field value
// and a boolean to check if the value has been set.
func (o *GaslessConfig) GetGasJettonsOk() ([]GaslessConfigGasJettonsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.GasJettons, true
}

// SetGasJettons sets field value
func (o *GaslessConfig) SetGasJettons(v []GaslessConfigGasJettonsInner) {
	o.GasJettons = v
}

func (o GaslessConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GaslessConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["relay_address"] = o.RelayAddress
	toSerialize["gas_jettons"] = o.GasJettons
	return toSerialize, nil
}

func (o *GaslessConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"relay_address",
		"gas_jettons",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGaslessConfig := _GaslessConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGaslessConfig)

	if err != nil {
		return err
	}

	*o = GaslessConfig(varGaslessConfig)

	return err
}

type NullableGaslessConfig struct {
	value *GaslessConfig
	isSet bool
}

func (v NullableGaslessConfig) Get() *GaslessConfig {
	return v.value
}

func (v *NullableGaslessConfig) Set(val *GaslessConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGaslessConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGaslessConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaslessConfig(val *GaslessConfig) *NullableGaslessConfig {
	return &NullableGaslessConfig{value: val, isSet: true}
}

func (v NullableGaslessConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaslessConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


