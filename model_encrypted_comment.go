/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EncryptedComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncryptedComment{}

// EncryptedComment struct for EncryptedComment
type EncryptedComment struct {
	EncryptionType string `json:"encryption_type"`
	CipherText string `json:"cipher_text"`
}

type _EncryptedComment EncryptedComment

// NewEncryptedComment instantiates a new EncryptedComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptedComment(encryptionType string, cipherText string) *EncryptedComment {
	this := EncryptedComment{}
	this.EncryptionType = encryptionType
	this.CipherText = cipherText
	return &this
}

// NewEncryptedCommentWithDefaults instantiates a new EncryptedComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptedCommentWithDefaults() *EncryptedComment {
	this := EncryptedComment{}
	return &this
}

// GetEncryptionType returns the EncryptionType field value
func (o *EncryptedComment) GetEncryptionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptionType
}

// GetEncryptionTypeOk returns a tuple with the EncryptionType field value
// and a boolean to check if the value has been set.
func (o *EncryptedComment) GetEncryptionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptionType, true
}

// SetEncryptionType sets field value
func (o *EncryptedComment) SetEncryptionType(v string) {
	o.EncryptionType = v
}

// GetCipherText returns the CipherText field value
func (o *EncryptedComment) GetCipherText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CipherText
}

// GetCipherTextOk returns a tuple with the CipherText field value
// and a boolean to check if the value has been set.
func (o *EncryptedComment) GetCipherTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CipherText, true
}

// SetCipherText sets field value
func (o *EncryptedComment) SetCipherText(v string) {
	o.CipherText = v
}

func (o EncryptedComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncryptedComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["encryption_type"] = o.EncryptionType
	toSerialize["cipher_text"] = o.CipherText
	return toSerialize, nil
}

func (o *EncryptedComment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"encryption_type",
		"cipher_text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEncryptedComment := _EncryptedComment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEncryptedComment)

	if err != nil {
		return err
	}

	*o = EncryptedComment(varEncryptedComment)

	return err
}

type NullableEncryptedComment struct {
	value *EncryptedComment
	isSet bool
}

func (v NullableEncryptedComment) Get() *EncryptedComment {
	return v.value
}

func (v *NullableEncryptedComment) Set(val *EncryptedComment) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptedComment) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptedComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptedComment(val *EncryptedComment) *NullableEncryptedComment {
	return &NullableEncryptedComment{value: val, isSet: true}
}

func (v NullableEncryptedComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptedComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


