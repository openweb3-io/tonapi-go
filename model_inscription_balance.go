/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InscriptionBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InscriptionBalance{}

// InscriptionBalance struct for InscriptionBalance
type InscriptionBalance struct {
	Type string `json:"type"`
	Ticker string `json:"ticker"`
	Balance string `json:"balance"`
	Decimals int32 `json:"decimals"`
}

type _InscriptionBalance InscriptionBalance

// NewInscriptionBalance instantiates a new InscriptionBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInscriptionBalance(type_ string, ticker string, balance string, decimals int32) *InscriptionBalance {
	this := InscriptionBalance{}
	this.Type = type_
	this.Ticker = ticker
	this.Balance = balance
	this.Decimals = decimals
	return &this
}

// NewInscriptionBalanceWithDefaults instantiates a new InscriptionBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInscriptionBalanceWithDefaults() *InscriptionBalance {
	this := InscriptionBalance{}
	return &this
}

// GetType returns the Type field value
func (o *InscriptionBalance) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InscriptionBalance) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InscriptionBalance) SetType(v string) {
	o.Type = v
}

// GetTicker returns the Ticker field value
func (o *InscriptionBalance) GetTicker() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value
// and a boolean to check if the value has been set.
func (o *InscriptionBalance) GetTickerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ticker, true
}

// SetTicker sets field value
func (o *InscriptionBalance) SetTicker(v string) {
	o.Ticker = v
}

// GetBalance returns the Balance field value
func (o *InscriptionBalance) GetBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *InscriptionBalance) GetBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *InscriptionBalance) SetBalance(v string) {
	o.Balance = v
}

// GetDecimals returns the Decimals field value
func (o *InscriptionBalance) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *InscriptionBalance) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *InscriptionBalance) SetDecimals(v int32) {
	o.Decimals = v
}

func (o InscriptionBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InscriptionBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["ticker"] = o.Ticker
	toSerialize["balance"] = o.Balance
	toSerialize["decimals"] = o.Decimals
	return toSerialize, nil
}

func (o *InscriptionBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"ticker",
		"balance",
		"decimals",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInscriptionBalance := _InscriptionBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInscriptionBalance)

	if err != nil {
		return err
	}

	*o = InscriptionBalance(varInscriptionBalance)

	return err
}

type NullableInscriptionBalance struct {
	value *InscriptionBalance
	isSet bool
}

func (v NullableInscriptionBalance) Get() *InscriptionBalance {
	return v.value
}

func (v *NullableInscriptionBalance) Set(val *InscriptionBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableInscriptionBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableInscriptionBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInscriptionBalance(val *InscriptionBalance) *NullableInscriptionBalance {
	return &NullableInscriptionBalance{value: val, isSet: true}
}

func (v NullableInscriptionBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInscriptionBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


