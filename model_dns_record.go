/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DnsRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsRecord{}

// DnsRecord struct for DnsRecord
type DnsRecord struct {
	Wallet *WalletDNS `json:"wallet,omitempty"`
	NextResolver *string `json:"next_resolver,omitempty"`
	Sites []string `json:"sites"`
	// tonstorage bag id
	Storage *string `json:"storage,omitempty"`
}

type _DnsRecord DnsRecord

// NewDnsRecord instantiates a new DnsRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsRecord(sites []string) *DnsRecord {
	this := DnsRecord{}
	this.Sites = sites
	return &this
}

// NewDnsRecordWithDefaults instantiates a new DnsRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsRecordWithDefaults() *DnsRecord {
	this := DnsRecord{}
	return &this
}

// GetWallet returns the Wallet field value if set, zero value otherwise.
func (o *DnsRecord) GetWallet() WalletDNS {
	if o == nil || IsNil(o.Wallet) {
		var ret WalletDNS
		return ret
	}
	return *o.Wallet
}

// GetWalletOk returns a tuple with the Wallet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetWalletOk() (*WalletDNS, bool) {
	if o == nil || IsNil(o.Wallet) {
		return nil, false
	}
	return o.Wallet, true
}

// HasWallet returns a boolean if a field has been set.
func (o *DnsRecord) HasWallet() bool {
	if o != nil && !IsNil(o.Wallet) {
		return true
	}

	return false
}

// SetWallet gets a reference to the given WalletDNS and assigns it to the Wallet field.
func (o *DnsRecord) SetWallet(v WalletDNS) {
	o.Wallet = &v
}

// GetNextResolver returns the NextResolver field value if set, zero value otherwise.
func (o *DnsRecord) GetNextResolver() string {
	if o == nil || IsNil(o.NextResolver) {
		var ret string
		return ret
	}
	return *o.NextResolver
}

// GetNextResolverOk returns a tuple with the NextResolver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetNextResolverOk() (*string, bool) {
	if o == nil || IsNil(o.NextResolver) {
		return nil, false
	}
	return o.NextResolver, true
}

// HasNextResolver returns a boolean if a field has been set.
func (o *DnsRecord) HasNextResolver() bool {
	if o != nil && !IsNil(o.NextResolver) {
		return true
	}

	return false
}

// SetNextResolver gets a reference to the given string and assigns it to the NextResolver field.
func (o *DnsRecord) SetNextResolver(v string) {
	o.NextResolver = &v
}

// GetSites returns the Sites field value
func (o *DnsRecord) GetSites() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Sites
}

// GetSitesOk returns a tuple with the Sites field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetSitesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sites, true
}

// SetSites sets field value
func (o *DnsRecord) SetSites(v []string) {
	o.Sites = v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *DnsRecord) GetStorage() string {
	if o == nil || IsNil(o.Storage) {
		var ret string
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetStorageOk() (*string, bool) {
	if o == nil || IsNil(o.Storage) {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *DnsRecord) HasStorage() bool {
	if o != nil && !IsNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given string and assigns it to the Storage field.
func (o *DnsRecord) SetStorage(v string) {
	o.Storage = &v
}

func (o DnsRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Wallet) {
		toSerialize["wallet"] = o.Wallet
	}
	if !IsNil(o.NextResolver) {
		toSerialize["next_resolver"] = o.NextResolver
	}
	toSerialize["sites"] = o.Sites
	if !IsNil(o.Storage) {
		toSerialize["storage"] = o.Storage
	}
	return toSerialize, nil
}

func (o *DnsRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sites",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsRecord := _DnsRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDnsRecord)

	if err != nil {
		return err
	}

	*o = DnsRecord(varDnsRecord)

	return err
}

type NullableDnsRecord struct {
	value *DnsRecord
	isSet bool
}

func (v NullableDnsRecord) Get() *DnsRecord {
	return v.value
}

func (v *NullableDnsRecord) Set(val *DnsRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsRecord(val *DnsRecord) *NullableDnsRecord {
	return &NullableDnsRecord{value: val, isSet: true}
}

func (v NullableDnsRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


