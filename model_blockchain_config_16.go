/*
REST api to TON blockchain explorer

Provide access to indexed TON blockchain

API version: 2.0.0
Contact: support@tonkeeper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tonapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockchainConfig16 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockchainConfig16{}

// BlockchainConfig16 The limits on the number of validators in the TON blockchain.
type BlockchainConfig16 struct {
	MaxValidators int32 `json:"max_validators"`
	MaxMainValidators int32 `json:"max_main_validators"`
	MinValidators int32 `json:"min_validators"`
}

type _BlockchainConfig16 BlockchainConfig16

// NewBlockchainConfig16 instantiates a new BlockchainConfig16 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockchainConfig16(maxValidators int32, maxMainValidators int32, minValidators int32) *BlockchainConfig16 {
	this := BlockchainConfig16{}
	this.MaxValidators = maxValidators
	this.MaxMainValidators = maxMainValidators
	this.MinValidators = minValidators
	return &this
}

// NewBlockchainConfig16WithDefaults instantiates a new BlockchainConfig16 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockchainConfig16WithDefaults() *BlockchainConfig16 {
	this := BlockchainConfig16{}
	return &this
}

// GetMaxValidators returns the MaxValidators field value
func (o *BlockchainConfig16) GetMaxValidators() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxValidators
}

// GetMaxValidatorsOk returns a tuple with the MaxValidators field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig16) GetMaxValidatorsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxValidators, true
}

// SetMaxValidators sets field value
func (o *BlockchainConfig16) SetMaxValidators(v int32) {
	o.MaxValidators = v
}

// GetMaxMainValidators returns the MaxMainValidators field value
func (o *BlockchainConfig16) GetMaxMainValidators() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxMainValidators
}

// GetMaxMainValidatorsOk returns a tuple with the MaxMainValidators field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig16) GetMaxMainValidatorsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxMainValidators, true
}

// SetMaxMainValidators sets field value
func (o *BlockchainConfig16) SetMaxMainValidators(v int32) {
	o.MaxMainValidators = v
}

// GetMinValidators returns the MinValidators field value
func (o *BlockchainConfig16) GetMinValidators() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinValidators
}

// GetMinValidatorsOk returns a tuple with the MinValidators field value
// and a boolean to check if the value has been set.
func (o *BlockchainConfig16) GetMinValidatorsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinValidators, true
}

// SetMinValidators sets field value
func (o *BlockchainConfig16) SetMinValidators(v int32) {
	o.MinValidators = v
}

func (o BlockchainConfig16) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockchainConfig16) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["max_validators"] = o.MaxValidators
	toSerialize["max_main_validators"] = o.MaxMainValidators
	toSerialize["min_validators"] = o.MinValidators
	return toSerialize, nil
}

func (o *BlockchainConfig16) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"max_validators",
		"max_main_validators",
		"min_validators",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockchainConfig16 := _BlockchainConfig16{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockchainConfig16)

	if err != nil {
		return err
	}

	*o = BlockchainConfig16(varBlockchainConfig16)

	return err
}

type NullableBlockchainConfig16 struct {
	value *BlockchainConfig16
	isSet bool
}

func (v NullableBlockchainConfig16) Get() *BlockchainConfig16 {
	return v.value
}

func (v *NullableBlockchainConfig16) Set(val *BlockchainConfig16) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockchainConfig16) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockchainConfig16) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockchainConfig16(val *BlockchainConfig16) *NullableBlockchainConfig16 {
	return &NullableBlockchainConfig16{value: val, isSet: true}
}

func (v NullableBlockchainConfig16) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockchainConfig16) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


